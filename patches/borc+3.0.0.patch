diff --git a/node_modules/borc/CHANGELOG.md b/node_modules/borc/CHANGELOG.md
index 0e0b03b..a372907 100644
--- a/node_modules/borc/CHANGELOG.md
+++ b/node_modules/borc/CHANGELOG.md
@@ -1,3 +1,7 @@
+# [3.0.0](https://github.com/dignifiedquire/borc/compare/v2.1.2...v3.0.0) (2021-04-27)
+
+
+
 <a name="2.1.2"></a>
 ## [2.1.2](https://github.com/dignifiedquire/borc/compare/v2.1.1...v2.1.2) (2020-03-26)
 
diff --git a/node_modules/borc/bin/cbor2comment.js b/node_modules/borc/bin/cbor2comment.js
new file mode 100755
index 0000000..6e82d49
--- /dev/null
+++ b/node_modules/borc/bin/cbor2comment.js
@@ -0,0 +1,31 @@
+#!/usr/bin/env node
+'use strict'
+
+const cbor = require('../src')
+const utils = require('../src/utils')
+const pkg = require('../package.json')
+
+const opts = require('commander')
+  .version(pkg.version)
+  .usage('[options] <file ...>')
+  .option('-x, --hex [string]', 'Hex string input')
+  .option('-t, --tabsize [spaces]', 'Indent amount')
+  .parse(process.argv)
+
+const numTabs = (opts.tabsize | 0) || 10
+const argv = opts.args
+if (opts.hex) {
+  argv.push(new utils.DeHexStream(opts.hex))
+}
+
+if (argv.length === 0) {
+  argv.push('-')
+}
+
+utils.streamFiles(argv, function () {
+  const c = new cbor.Commented({
+    max_depth: numTabs
+  })
+  c.pipe(process.stdout)
+  return c
+})
diff --git a/node_modules/borc/bin/cbor2diag.js b/node_modules/borc/bin/cbor2diag.js
new file mode 100755
index 0000000..c2d8a26
--- /dev/null
+++ b/node_modules/borc/bin/cbor2diag.js
@@ -0,0 +1,27 @@
+#!/usr/bin/env node
+'use strict'
+
+const cbor = require('../src')
+const utils = require('../src/utils')
+const pkg = require('../package.json')
+
+const opts = require('commander')
+  .version(pkg.version)
+  .usage('[options] <file ...>')
+  .option('-x, --hex [STRING]', 'Hex string input')
+  .parse(process.argv)
+
+const argv = opts.args
+if (opts.hex) {
+  argv.push(new utils.DeHexStream(opts.hex))
+}
+
+if (argv.length === 0) {
+  argv.push('-')
+}
+
+utils.streamFiles(argv, function () {
+  const d = new cbor.Diagnose()
+  d.pipe(process.stdout)
+  return d
+})
diff --git a/node_modules/borc/bin/cbor2json.js b/node_modules/borc/bin/cbor2json.js
new file mode 100755
index 0000000..c2ebd2d
--- /dev/null
+++ b/node_modules/borc/bin/cbor2json.js
@@ -0,0 +1,30 @@
+#!/usr/bin/env node
+/* eslint-disable no-console */
+'use strict'
+
+const cbor = require('../src')
+const utils = require('../src/utils')
+const pkg = require('../package.json')
+
+const opts = require('commander')
+  .version(pkg.version)
+  .usage('[options] <file ...>')
+  .option('-x, --hex [STRING]', 'Hex string input')
+  .parse(process.argv)
+
+const argv = opts.args
+if (opts.hex) {
+  argv.push(new utils.DeHexStream(opts.hex))
+}
+
+if (argv.length === 0) {
+  argv.push('-')
+}
+
+utils.streamFiles(argv, function () {
+  const d = new cbor.Decoder()
+  d.on('data', function (v) {
+    console.log(JSON.stringify(v))
+  })
+  return d
+})
diff --git a/node_modules/borc/bin/json2cbor.js b/node_modules/borc/bin/json2cbor.js
new file mode 100755
index 0000000..419839d
--- /dev/null
+++ b/node_modules/borc/bin/json2cbor.js
@@ -0,0 +1,40 @@
+#!/usr/bin/env node
+'use strict'
+
+const cbor = require('../src')
+const utils = require('../src/utils')
+const pkg = require('../package.json')
+
+const opts = require('commander')
+  .version(pkg.version)
+  .usage('[options] <file ...>')
+  .option('-x, --hex', 'Hex string output')
+  .parse(process.argv)
+
+const argv = opts.args
+if (argv.length === 0) {
+  argv.push('-')
+}
+
+utils.streamFiles(argv, function () {
+  const Parser = require('json-text-sequence').parser
+  const p = new Parser()
+  const d = new cbor.Encoder()
+  p.pipe(d)
+  p.on('truncated', function (b) {
+    try {
+      d.write(JSON.parse(b))
+    } catch (e) {
+      e.message += ' for input ' + b.inspect()
+      throw e
+    }
+  })
+  let o = d
+  if (opts.hex) {
+    o = new utils.HexStream()
+    d.pipe(o)
+    o.on('end', function () { process.stdout.write('\n') })
+  }
+  o.pipe(process.stdout)
+  return p
+})
diff --git a/node_modules/borc/dist/index.js b/node_modules/borc/dist/index.js
deleted file mode 100644
index 452d8c0..0000000
--- a/node_modules/borc/dist/index.js
+++ /dev/null
@@ -1,8145 +0,0 @@
-(function webpackUniversalModuleDefinition(root, factory) {
-	if(typeof exports === 'object' && typeof module === 'object')
-		module.exports = factory();
-	else if(typeof define === 'function' && define.amd)
-		define([], factory);
-	else if(typeof exports === 'object')
-		exports["Borc"] = factory();
-	else
-		root["Borc"] = factory();
-})(window, function() {
-return /******/ (function(modules) { // webpackBootstrap
-/******/ 	// The module cache
-/******/ 	var installedModules = {};
-/******/
-/******/ 	// The require function
-/******/ 	function __webpack_require__(moduleId) {
-/******/
-/******/ 		// Check if module is in cache
-/******/ 		if(installedModules[moduleId]) {
-/******/ 			return installedModules[moduleId].exports;
-/******/ 		}
-/******/ 		// Create a new module (and put it into the cache)
-/******/ 		var module = installedModules[moduleId] = {
-/******/ 			i: moduleId,
-/******/ 			l: false,
-/******/ 			exports: {}
-/******/ 		};
-/******/
-/******/ 		// Execute the module function
-/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
-/******/
-/******/ 		// Flag the module as loaded
-/******/ 		module.l = true;
-/******/
-/******/ 		// Return the exports of the module
-/******/ 		return module.exports;
-/******/ 	}
-/******/
-/******/
-/******/ 	// expose the modules object (__webpack_modules__)
-/******/ 	__webpack_require__.m = modules;
-/******/
-/******/ 	// expose the module cache
-/******/ 	__webpack_require__.c = installedModules;
-/******/
-/******/ 	// define getter function for harmony exports
-/******/ 	__webpack_require__.d = function(exports, name, getter) {
-/******/ 		if(!__webpack_require__.o(exports, name)) {
-/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
-/******/ 		}
-/******/ 	};
-/******/
-/******/ 	// define __esModule on exports
-/******/ 	__webpack_require__.r = function(exports) {
-/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
-/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
-/******/ 		}
-/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
-/******/ 	};
-/******/
-/******/ 	// create a fake namespace object
-/******/ 	// mode & 1: value is a module id, require it
-/******/ 	// mode & 2: merge all properties of value into the ns
-/******/ 	// mode & 4: return value when already ns object
-/******/ 	// mode & 8|1: behave like require
-/******/ 	__webpack_require__.t = function(value, mode) {
-/******/ 		if(mode & 1) value = __webpack_require__(value);
-/******/ 		if(mode & 8) return value;
-/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
-/******/ 		var ns = Object.create(null);
-/******/ 		__webpack_require__.r(ns);
-/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
-/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
-/******/ 		return ns;
-/******/ 	};
-/******/
-/******/ 	// getDefaultExport function for compatibility with non-harmony modules
-/******/ 	__webpack_require__.n = function(module) {
-/******/ 		var getter = module && module.__esModule ?
-/******/ 			function getDefault() { return module['default']; } :
-/******/ 			function getModuleExports() { return module; };
-/******/ 		__webpack_require__.d(getter, 'a', getter);
-/******/ 		return getter;
-/******/ 	};
-/******/
-/******/ 	// Object.prototype.hasOwnProperty.call
-/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
-/******/
-/******/ 	// __webpack_public_path__
-/******/ 	__webpack_require__.p = "";
-/******/
-/******/
-/******/ 	// Load entry module and return exports
-/******/ 	return __webpack_require__(__webpack_require__.s = 11);
-/******/ })
-/************************************************************************/
-/******/ ([
-/* 0 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-/* WEBPACK VAR INJECTION */(function(global) {/*!
- * The buffer module from node.js, for the browser.
- *
- * @author   Feross Aboukhadijeh <http://feross.org>
- * @license  MIT
- */
-
-/* eslint-disable no-proto */
-
-
-var base64 = __webpack_require__(14);
-
-var ieee754 = __webpack_require__(5);
-
-var isArray = __webpack_require__(15);
-
-exports.Buffer = Buffer;
-exports.SlowBuffer = SlowBuffer;
-exports.INSPECT_MAX_BYTES = 50;
-/**
- * If `Buffer.TYPED_ARRAY_SUPPORT`:
- *   === true    Use Uint8Array implementation (fastest)
- *   === false   Use Object implementation (most compatible, even IE6)
- *
- * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
- * Opera 11.6+, iOS 4.2+.
- *
- * Due to various browser bugs, sometimes the Object implementation will be used even
- * when the browser supports typed arrays.
- *
- * Note:
- *
- *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
- *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
- *
- *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
- *
- *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
- *     incorrect length in some situations.
-
- * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
- * get the Object implementation, which is slower but behaves correctly.
- */
-
-Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
-/*
- * Export kMaxLength after typed array support is determined.
- */
-
-exports.kMaxLength = kMaxLength();
-
-function typedArraySupport() {
-  try {
-    var arr = new Uint8Array(1);
-    arr.__proto__ = {
-      __proto__: Uint8Array.prototype,
-      foo: function foo() {
-        return 42;
-      }
-    };
-    return arr.foo() === 42 && // typed array instances can be augmented
-    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
-    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
-  } catch (e) {
-    return false;
-  }
-}
-
-function kMaxLength() {
-  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
-}
-
-function createBuffer(that, length) {
-  if (kMaxLength() < length) {
-    throw new RangeError('Invalid typed array length');
-  }
-
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
-    // Return an augmented `Uint8Array` instance, for best performance
-    that = new Uint8Array(length);
-    that.__proto__ = Buffer.prototype;
-  } else {
-    // Fallback: Return an object instance of the Buffer class
-    if (that === null) {
-      that = new Buffer(length);
-    }
-
-    that.length = length;
-  }
-
-  return that;
-}
-/**
- * The Buffer constructor returns instances of `Uint8Array` that have their
- * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
- * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
- * and the `Uint8Array` methods. Square bracket notation works as expected -- it
- * returns a single octet.
- *
- * The `Uint8Array` prototype remains unmodified.
- */
-
-
-function Buffer(arg, encodingOrOffset, length) {
-  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
-    return new Buffer(arg, encodingOrOffset, length);
-  } // Common case.
-
-
-  if (typeof arg === 'number') {
-    if (typeof encodingOrOffset === 'string') {
-      throw new Error('If encoding is specified then the first argument must be a string');
-    }
-
-    return allocUnsafe(this, arg);
-  }
-
-  return from(this, arg, encodingOrOffset, length);
-}
-
-Buffer.poolSize = 8192; // not used by this implementation
-// TODO: Legacy, not needed anymore. Remove in next major version.
-
-Buffer._augment = function (arr) {
-  arr.__proto__ = Buffer.prototype;
-  return arr;
-};
-
-function from(that, value, encodingOrOffset, length) {
-  if (typeof value === 'number') {
-    throw new TypeError('"value" argument must not be a number');
-  }
-
-  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
-    return fromArrayBuffer(that, value, encodingOrOffset, length);
-  }
-
-  if (typeof value === 'string') {
-    return fromString(that, value, encodingOrOffset);
-  }
-
-  return fromObject(that, value);
-}
-/**
- * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
- * if value is a number.
- * Buffer.from(str[, encoding])
- * Buffer.from(array)
- * Buffer.from(buffer)
- * Buffer.from(arrayBuffer[, byteOffset[, length]])
- **/
-
-
-Buffer.from = function (value, encodingOrOffset, length) {
-  return from(null, value, encodingOrOffset, length);
-};
-
-if (Buffer.TYPED_ARRAY_SUPPORT) {
-  Buffer.prototype.__proto__ = Uint8Array.prototype;
-  Buffer.__proto__ = Uint8Array;
-
-  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
-    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
-    Object.defineProperty(Buffer, Symbol.species, {
-      value: null,
-      configurable: true
-    });
-  }
-}
-
-function assertSize(size) {
-  if (typeof size !== 'number') {
-    throw new TypeError('"size" argument must be a number');
-  } else if (size < 0) {
-    throw new RangeError('"size" argument must not be negative');
-  }
-}
-
-function alloc(that, size, fill, encoding) {
-  assertSize(size);
-
-  if (size <= 0) {
-    return createBuffer(that, size);
-  }
-
-  if (fill !== undefined) {
-    // Only pay attention to encoding if it's a string. This
-    // prevents accidentally sending in a number that would
-    // be interpretted as a start offset.
-    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
-  }
-
-  return createBuffer(that, size);
-}
-/**
- * Creates a new filled Buffer instance.
- * alloc(size[, fill[, encoding]])
- **/
-
-
-Buffer.alloc = function (size, fill, encoding) {
-  return alloc(null, size, fill, encoding);
-};
-
-function allocUnsafe(that, size) {
-  assertSize(size);
-  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
-
-  if (!Buffer.TYPED_ARRAY_SUPPORT) {
-    for (var i = 0; i < size; ++i) {
-      that[i] = 0;
-    }
-  }
-
-  return that;
-}
-/**
- * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
- * */
-
-
-Buffer.allocUnsafe = function (size) {
-  return allocUnsafe(null, size);
-};
-/**
- * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
- */
-
-
-Buffer.allocUnsafeSlow = function (size) {
-  return allocUnsafe(null, size);
-};
-
-function fromString(that, string, encoding) {
-  if (typeof encoding !== 'string' || encoding === '') {
-    encoding = 'utf8';
-  }
-
-  if (!Buffer.isEncoding(encoding)) {
-    throw new TypeError('"encoding" must be a valid string encoding');
-  }
-
-  var length = byteLength(string, encoding) | 0;
-  that = createBuffer(that, length);
-  var actual = that.write(string, encoding);
-
-  if (actual !== length) {
-    // Writing a hex string, for example, that contains invalid characters will
-    // cause everything after the first invalid character to be ignored. (e.g.
-    // 'abxxcd' will be treated as 'ab')
-    that = that.slice(0, actual);
-  }
-
-  return that;
-}
-
-function fromArrayLike(that, array) {
-  var length = array.length < 0 ? 0 : checked(array.length) | 0;
-  that = createBuffer(that, length);
-
-  for (var i = 0; i < length; i += 1) {
-    that[i] = array[i] & 255;
-  }
-
-  return that;
-}
-
-function fromArrayBuffer(that, array, byteOffset, length) {
-  array.byteLength; // this throws if `array` is not a valid ArrayBuffer
-
-  if (byteOffset < 0 || array.byteLength < byteOffset) {
-    throw new RangeError('\'offset\' is out of bounds');
-  }
-
-  if (array.byteLength < byteOffset + (length || 0)) {
-    throw new RangeError('\'length\' is out of bounds');
-  }
-
-  if (byteOffset === undefined && length === undefined) {
-    array = new Uint8Array(array);
-  } else if (length === undefined) {
-    array = new Uint8Array(array, byteOffset);
-  } else {
-    array = new Uint8Array(array, byteOffset, length);
-  }
-
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
-    // Return an augmented `Uint8Array` instance, for best performance
-    that = array;
-    that.__proto__ = Buffer.prototype;
-  } else {
-    // Fallback: Return an object instance of the Buffer class
-    that = fromArrayLike(that, array);
-  }
-
-  return that;
-}
-
-function fromObject(that, obj) {
-  if (Buffer.isBuffer(obj)) {
-    var len = checked(obj.length) | 0;
-    that = createBuffer(that, len);
-
-    if (that.length === 0) {
-      return that;
-    }
-
-    obj.copy(that, 0, 0, len);
-    return that;
-  }
-
-  if (obj) {
-    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
-      if (typeof obj.length !== 'number' || isnan(obj.length)) {
-        return createBuffer(that, 0);
-      }
-
-      return fromArrayLike(that, obj);
-    }
-
-    if (obj.type === 'Buffer' && isArray(obj.data)) {
-      return fromArrayLike(that, obj.data);
-    }
-  }
-
-  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
-}
-
-function checked(length) {
-  // Note: cannot use `length < kMaxLength()` here because that fails when
-  // length is NaN (which is otherwise coerced to zero.)
-  if (length >= kMaxLength()) {
-    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
-  }
-
-  return length | 0;
-}
-
-function SlowBuffer(length) {
-  if (+length != length) {
-    // eslint-disable-line eqeqeq
-    length = 0;
-  }
-
-  return Buffer.alloc(+length);
-}
-
-Buffer.isBuffer = function isBuffer(b) {
-  return !!(b != null && b._isBuffer);
-};
-
-Buffer.compare = function compare(a, b) {
-  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
-    throw new TypeError('Arguments must be Buffers');
-  }
-
-  if (a === b) return 0;
-  var x = a.length;
-  var y = b.length;
-
-  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
-    if (a[i] !== b[i]) {
-      x = a[i];
-      y = b[i];
-      break;
-    }
-  }
-
-  if (x < y) return -1;
-  if (y < x) return 1;
-  return 0;
-};
-
-Buffer.isEncoding = function isEncoding(encoding) {
-  switch (String(encoding).toLowerCase()) {
-    case 'hex':
-    case 'utf8':
-    case 'utf-8':
-    case 'ascii':
-    case 'latin1':
-    case 'binary':
-    case 'base64':
-    case 'ucs2':
-    case 'ucs-2':
-    case 'utf16le':
-    case 'utf-16le':
-      return true;
-
-    default:
-      return false;
-  }
-};
-
-Buffer.concat = function concat(list, length) {
-  if (!isArray(list)) {
-    throw new TypeError('"list" argument must be an Array of Buffers');
-  }
-
-  if (list.length === 0) {
-    return Buffer.alloc(0);
-  }
-
-  var i;
-
-  if (length === undefined) {
-    length = 0;
-
-    for (i = 0; i < list.length; ++i) {
-      length += list[i].length;
-    }
-  }
-
-  var buffer = Buffer.allocUnsafe(length);
-  var pos = 0;
-
-  for (i = 0; i < list.length; ++i) {
-    var buf = list[i];
-
-    if (!Buffer.isBuffer(buf)) {
-      throw new TypeError('"list" argument must be an Array of Buffers');
-    }
-
-    buf.copy(buffer, pos);
-    pos += buf.length;
-  }
-
-  return buffer;
-};
-
-function byteLength(string, encoding) {
-  if (Buffer.isBuffer(string)) {
-    return string.length;
-  }
-
-  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
-    return string.byteLength;
-  }
-
-  if (typeof string !== 'string') {
-    string = '' + string;
-  }
-
-  var len = string.length;
-  if (len === 0) return 0; // Use a for loop to avoid recursion
-
-  var loweredCase = false;
-
-  for (;;) {
-    switch (encoding) {
-      case 'ascii':
-      case 'latin1':
-      case 'binary':
-        return len;
-
-      case 'utf8':
-      case 'utf-8':
-      case undefined:
-        return utf8ToBytes(string).length;
-
-      case 'ucs2':
-      case 'ucs-2':
-      case 'utf16le':
-      case 'utf-16le':
-        return len * 2;
-
-      case 'hex':
-        return len >>> 1;
-
-      case 'base64':
-        return base64ToBytes(string).length;
-
-      default:
-        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
-
-        encoding = ('' + encoding).toLowerCase();
-        loweredCase = true;
-    }
-  }
-}
-
-Buffer.byteLength = byteLength;
-
-function slowToString(encoding, start, end) {
-  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
-  // property of a typed array.
-  // This behaves neither like String nor Uint8Array in that we set start/end
-  // to their upper/lower bounds if the value passed is out of range.
-  // undefined is handled specially as per ECMA-262 6th Edition,
-  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
-
-  if (start === undefined || start < 0) {
-    start = 0;
-  } // Return early if start > this.length. Done here to prevent potential uint32
-  // coercion fail below.
-
-
-  if (start > this.length) {
-    return '';
-  }
-
-  if (end === undefined || end > this.length) {
-    end = this.length;
-  }
-
-  if (end <= 0) {
-    return '';
-  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
-
-
-  end >>>= 0;
-  start >>>= 0;
-
-  if (end <= start) {
-    return '';
-  }
-
-  if (!encoding) encoding = 'utf8';
-
-  while (true) {
-    switch (encoding) {
-      case 'hex':
-        return hexSlice(this, start, end);
-
-      case 'utf8':
-      case 'utf-8':
-        return utf8Slice(this, start, end);
-
-      case 'ascii':
-        return asciiSlice(this, start, end);
-
-      case 'latin1':
-      case 'binary':
-        return latin1Slice(this, start, end);
-
-      case 'base64':
-        return base64Slice(this, start, end);
-
-      case 'ucs2':
-      case 'ucs-2':
-      case 'utf16le':
-      case 'utf-16le':
-        return utf16leSlice(this, start, end);
-
-      default:
-        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
-        encoding = (encoding + '').toLowerCase();
-        loweredCase = true;
-    }
-  }
-} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
-// Buffer instances.
-
-
-Buffer.prototype._isBuffer = true;
-
-function swap(b, n, m) {
-  var i = b[n];
-  b[n] = b[m];
-  b[m] = i;
-}
-
-Buffer.prototype.swap16 = function swap16() {
-  var len = this.length;
-
-  if (len % 2 !== 0) {
-    throw new RangeError('Buffer size must be a multiple of 16-bits');
-  }
-
-  for (var i = 0; i < len; i += 2) {
-    swap(this, i, i + 1);
-  }
-
-  return this;
-};
-
-Buffer.prototype.swap32 = function swap32() {
-  var len = this.length;
-
-  if (len % 4 !== 0) {
-    throw new RangeError('Buffer size must be a multiple of 32-bits');
-  }
-
-  for (var i = 0; i < len; i += 4) {
-    swap(this, i, i + 3);
-    swap(this, i + 1, i + 2);
-  }
-
-  return this;
-};
-
-Buffer.prototype.swap64 = function swap64() {
-  var len = this.length;
-
-  if (len % 8 !== 0) {
-    throw new RangeError('Buffer size must be a multiple of 64-bits');
-  }
-
-  for (var i = 0; i < len; i += 8) {
-    swap(this, i, i + 7);
-    swap(this, i + 1, i + 6);
-    swap(this, i + 2, i + 5);
-    swap(this, i + 3, i + 4);
-  }
-
-  return this;
-};
-
-Buffer.prototype.toString = function toString() {
-  var length = this.length | 0;
-  if (length === 0) return '';
-  if (arguments.length === 0) return utf8Slice(this, 0, length);
-  return slowToString.apply(this, arguments);
-};
-
-Buffer.prototype.equals = function equals(b) {
-  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
-  if (this === b) return true;
-  return Buffer.compare(this, b) === 0;
-};
-
-Buffer.prototype.inspect = function inspect() {
-  var str = '';
-  var max = exports.INSPECT_MAX_BYTES;
-
-  if (this.length > 0) {
-    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
-    if (this.length > max) str += ' ... ';
-  }
-
-  return '<Buffer ' + str + '>';
-};
-
-Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
-  if (!Buffer.isBuffer(target)) {
-    throw new TypeError('Argument must be a Buffer');
-  }
-
-  if (start === undefined) {
-    start = 0;
-  }
-
-  if (end === undefined) {
-    end = target ? target.length : 0;
-  }
-
-  if (thisStart === undefined) {
-    thisStart = 0;
-  }
-
-  if (thisEnd === undefined) {
-    thisEnd = this.length;
-  }
-
-  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
-    throw new RangeError('out of range index');
-  }
-
-  if (thisStart >= thisEnd && start >= end) {
-    return 0;
-  }
-
-  if (thisStart >= thisEnd) {
-    return -1;
-  }
-
-  if (start >= end) {
-    return 1;
-  }
-
-  start >>>= 0;
-  end >>>= 0;
-  thisStart >>>= 0;
-  thisEnd >>>= 0;
-  if (this === target) return 0;
-  var x = thisEnd - thisStart;
-  var y = end - start;
-  var len = Math.min(x, y);
-  var thisCopy = this.slice(thisStart, thisEnd);
-  var targetCopy = target.slice(start, end);
-
-  for (var i = 0; i < len; ++i) {
-    if (thisCopy[i] !== targetCopy[i]) {
-      x = thisCopy[i];
-      y = targetCopy[i];
-      break;
-    }
-  }
-
-  if (x < y) return -1;
-  if (y < x) return 1;
-  return 0;
-}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
-// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
-//
-// Arguments:
-// - buffer - a Buffer to search
-// - val - a string, Buffer, or number
-// - byteOffset - an index into `buffer`; will be clamped to an int32
-// - encoding - an optional encoding, relevant is val is a string
-// - dir - true for indexOf, false for lastIndexOf
-
-
-function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
-  // Empty buffer means no match
-  if (buffer.length === 0) return -1; // Normalize byteOffset
-
-  if (typeof byteOffset === 'string') {
-    encoding = byteOffset;
-    byteOffset = 0;
-  } else if (byteOffset > 0x7fffffff) {
-    byteOffset = 0x7fffffff;
-  } else if (byteOffset < -0x80000000) {
-    byteOffset = -0x80000000;
-  }
-
-  byteOffset = +byteOffset; // Coerce to Number.
-
-  if (isNaN(byteOffset)) {
-    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
-    byteOffset = dir ? 0 : buffer.length - 1;
-  } // Normalize byteOffset: negative offsets start from the end of the buffer
-
-
-  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
-
-  if (byteOffset >= buffer.length) {
-    if (dir) return -1;else byteOffset = buffer.length - 1;
-  } else if (byteOffset < 0) {
-    if (dir) byteOffset = 0;else return -1;
-  } // Normalize val
-
-
-  if (typeof val === 'string') {
-    val = Buffer.from(val, encoding);
-  } // Finally, search either indexOf (if dir is true) or lastIndexOf
-
-
-  if (Buffer.isBuffer(val)) {
-    // Special case: looking for empty string/buffer always fails
-    if (val.length === 0) {
-      return -1;
-    }
-
-    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
-  } else if (typeof val === 'number') {
-    val = val & 0xFF; // Search for a byte value [0-255]
-
-    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
-      if (dir) {
-        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
-      } else {
-        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
-      }
-    }
-
-    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
-  }
-
-  throw new TypeError('val must be string, number or Buffer');
-}
-
-function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
-  var indexSize = 1;
-  var arrLength = arr.length;
-  var valLength = val.length;
-
-  if (encoding !== undefined) {
-    encoding = String(encoding).toLowerCase();
-
-    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
-      if (arr.length < 2 || val.length < 2) {
-        return -1;
-      }
-
-      indexSize = 2;
-      arrLength /= 2;
-      valLength /= 2;
-      byteOffset /= 2;
-    }
-  }
-
-  function read(buf, i) {
-    if (indexSize === 1) {
-      return buf[i];
-    } else {
-      return buf.readUInt16BE(i * indexSize);
-    }
-  }
-
-  var i;
-
-  if (dir) {
-    var foundIndex = -1;
-
-    for (i = byteOffset; i < arrLength; i++) {
-      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
-        if (foundIndex === -1) foundIndex = i;
-        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
-      } else {
-        if (foundIndex !== -1) i -= i - foundIndex;
-        foundIndex = -1;
-      }
-    }
-  } else {
-    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
-
-    for (i = byteOffset; i >= 0; i--) {
-      var found = true;
-
-      for (var j = 0; j < valLength; j++) {
-        if (read(arr, i + j) !== read(val, j)) {
-          found = false;
-          break;
-        }
-      }
-
-      if (found) return i;
-    }
-  }
-
-  return -1;
-}
-
-Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
-  return this.indexOf(val, byteOffset, encoding) !== -1;
-};
-
-Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
-  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
-};
-
-Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
-  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
-};
-
-function hexWrite(buf, string, offset, length) {
-  offset = Number(offset) || 0;
-  var remaining = buf.length - offset;
-
-  if (!length) {
-    length = remaining;
-  } else {
-    length = Number(length);
-
-    if (length > remaining) {
-      length = remaining;
-    }
-  } // must be an even number of digits
-
-
-  var strLen = string.length;
-  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');
-
-  if (length > strLen / 2) {
-    length = strLen / 2;
-  }
-
-  for (var i = 0; i < length; ++i) {
-    var parsed = parseInt(string.substr(i * 2, 2), 16);
-    if (isNaN(parsed)) return i;
-    buf[offset + i] = parsed;
-  }
-
-  return i;
-}
-
-function utf8Write(buf, string, offset, length) {
-  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
-}
-
-function asciiWrite(buf, string, offset, length) {
-  return blitBuffer(asciiToBytes(string), buf, offset, length);
-}
-
-function latin1Write(buf, string, offset, length) {
-  return asciiWrite(buf, string, offset, length);
-}
-
-function base64Write(buf, string, offset, length) {
-  return blitBuffer(base64ToBytes(string), buf, offset, length);
-}
-
-function ucs2Write(buf, string, offset, length) {
-  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
-}
-
-Buffer.prototype.write = function write(string, offset, length, encoding) {
-  // Buffer#write(string)
-  if (offset === undefined) {
-    encoding = 'utf8';
-    length = this.length;
-    offset = 0; // Buffer#write(string, encoding)
-  } else if (length === undefined && typeof offset === 'string') {
-    encoding = offset;
-    length = this.length;
-    offset = 0; // Buffer#write(string, offset[, length][, encoding])
-  } else if (isFinite(offset)) {
-    offset = offset | 0;
-
-    if (isFinite(length)) {
-      length = length | 0;
-      if (encoding === undefined) encoding = 'utf8';
-    } else {
-      encoding = length;
-      length = undefined;
-    } // legacy write(string, encoding, offset, length) - remove in v0.13
-
-  } else {
-    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
-  }
-
-  var remaining = this.length - offset;
-  if (length === undefined || length > remaining) length = remaining;
-
-  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
-    throw new RangeError('Attempt to write outside buffer bounds');
-  }
-
-  if (!encoding) encoding = 'utf8';
-  var loweredCase = false;
-
-  for (;;) {
-    switch (encoding) {
-      case 'hex':
-        return hexWrite(this, string, offset, length);
-
-      case 'utf8':
-      case 'utf-8':
-        return utf8Write(this, string, offset, length);
-
-      case 'ascii':
-        return asciiWrite(this, string, offset, length);
-
-      case 'latin1':
-      case 'binary':
-        return latin1Write(this, string, offset, length);
-
-      case 'base64':
-        // Warning: maxLength not taken into account in base64Write
-        return base64Write(this, string, offset, length);
-
-      case 'ucs2':
-      case 'ucs-2':
-      case 'utf16le':
-      case 'utf-16le':
-        return ucs2Write(this, string, offset, length);
-
-      default:
-        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
-        encoding = ('' + encoding).toLowerCase();
-        loweredCase = true;
-    }
-  }
-};
-
-Buffer.prototype.toJSON = function toJSON() {
-  return {
-    type: 'Buffer',
-    data: Array.prototype.slice.call(this._arr || this, 0)
-  };
-};
-
-function base64Slice(buf, start, end) {
-  if (start === 0 && end === buf.length) {
-    return base64.fromByteArray(buf);
-  } else {
-    return base64.fromByteArray(buf.slice(start, end));
-  }
-}
-
-function utf8Slice(buf, start, end) {
-  end = Math.min(buf.length, end);
-  var res = [];
-  var i = start;
-
-  while (i < end) {
-    var firstByte = buf[i];
-    var codePoint = null;
-    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
-
-    if (i + bytesPerSequence <= end) {
-      var secondByte, thirdByte, fourthByte, tempCodePoint;
-
-      switch (bytesPerSequence) {
-        case 1:
-          if (firstByte < 0x80) {
-            codePoint = firstByte;
-          }
-
-          break;
-
-        case 2:
-          secondByte = buf[i + 1];
-
-          if ((secondByte & 0xC0) === 0x80) {
-            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
-
-            if (tempCodePoint > 0x7F) {
-              codePoint = tempCodePoint;
-            }
-          }
-
-          break;
-
-        case 3:
-          secondByte = buf[i + 1];
-          thirdByte = buf[i + 2];
-
-          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
-            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
-
-            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
-              codePoint = tempCodePoint;
-            }
-          }
-
-          break;
-
-        case 4:
-          secondByte = buf[i + 1];
-          thirdByte = buf[i + 2];
-          fourthByte = buf[i + 3];
-
-          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
-            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
-
-            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
-              codePoint = tempCodePoint;
-            }
-          }
-
-      }
-    }
-
-    if (codePoint === null) {
-      // we did not generate a valid codePoint so insert a
-      // replacement char (U+FFFD) and advance only 1 byte
-      codePoint = 0xFFFD;
-      bytesPerSequence = 1;
-    } else if (codePoint > 0xFFFF) {
-      // encode to utf16 (surrogate pair dance)
-      codePoint -= 0x10000;
-      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
-      codePoint = 0xDC00 | codePoint & 0x3FF;
-    }
-
-    res.push(codePoint);
-    i += bytesPerSequence;
-  }
-
-  return decodeCodePointsArray(res);
-} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
-// the lowest limit is Chrome, with 0x10000 args.
-// We go 1 magnitude less, for safety
-
-
-var MAX_ARGUMENTS_LENGTH = 0x1000;
-
-function decodeCodePointsArray(codePoints) {
-  var len = codePoints.length;
-
-  if (len <= MAX_ARGUMENTS_LENGTH) {
-    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
-  } // Decode in chunks to avoid "call stack size exceeded".
-
-
-  var res = '';
-  var i = 0;
-
-  while (i < len) {
-    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
-  }
-
-  return res;
-}
-
-function asciiSlice(buf, start, end) {
-  var ret = '';
-  end = Math.min(buf.length, end);
-
-  for (var i = start; i < end; ++i) {
-    ret += String.fromCharCode(buf[i] & 0x7F);
-  }
-
-  return ret;
-}
-
-function latin1Slice(buf, start, end) {
-  var ret = '';
-  end = Math.min(buf.length, end);
-
-  for (var i = start; i < end; ++i) {
-    ret += String.fromCharCode(buf[i]);
-  }
-
-  return ret;
-}
-
-function hexSlice(buf, start, end) {
-  var len = buf.length;
-  if (!start || start < 0) start = 0;
-  if (!end || end < 0 || end > len) end = len;
-  var out = '';
-
-  for (var i = start; i < end; ++i) {
-    out += toHex(buf[i]);
-  }
-
-  return out;
-}
-
-function utf16leSlice(buf, start, end) {
-  var bytes = buf.slice(start, end);
-  var res = '';
-
-  for (var i = 0; i < bytes.length; i += 2) {
-    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
-  }
-
-  return res;
-}
-
-Buffer.prototype.slice = function slice(start, end) {
-  var len = this.length;
-  start = ~~start;
-  end = end === undefined ? len : ~~end;
-
-  if (start < 0) {
-    start += len;
-    if (start < 0) start = 0;
-  } else if (start > len) {
-    start = len;
-  }
-
-  if (end < 0) {
-    end += len;
-    if (end < 0) end = 0;
-  } else if (end > len) {
-    end = len;
-  }
-
-  if (end < start) end = start;
-  var newBuf;
-
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
-    newBuf = this.subarray(start, end);
-    newBuf.__proto__ = Buffer.prototype;
-  } else {
-    var sliceLen = end - start;
-    newBuf = new Buffer(sliceLen, undefined);
-
-    for (var i = 0; i < sliceLen; ++i) {
-      newBuf[i] = this[i + start];
-    }
-  }
-
-  return newBuf;
-};
-/*
- * Need to make sure that buffer isn't trying to write out of bounds.
- */
-
-
-function checkOffset(offset, ext, length) {
-  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
-  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
-}
-
-Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
-  offset = offset | 0;
-  byteLength = byteLength | 0;
-  if (!noAssert) checkOffset(offset, byteLength, this.length);
-  var val = this[offset];
-  var mul = 1;
-  var i = 0;
-
-  while (++i < byteLength && (mul *= 0x100)) {
-    val += this[offset + i] * mul;
-  }
-
-  return val;
-};
-
-Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
-  offset = offset | 0;
-  byteLength = byteLength | 0;
-
-  if (!noAssert) {
-    checkOffset(offset, byteLength, this.length);
-  }
-
-  var val = this[offset + --byteLength];
-  var mul = 1;
-
-  while (byteLength > 0 && (mul *= 0x100)) {
-    val += this[offset + --byteLength] * mul;
-  }
-
-  return val;
-};
-
-Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 1, this.length);
-  return this[offset];
-};
-
-Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 2, this.length);
-  return this[offset] | this[offset + 1] << 8;
-};
-
-Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 2, this.length);
-  return this[offset] << 8 | this[offset + 1];
-};
-
-Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 4, this.length);
-  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
-};
-
-Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 4, this.length);
-  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
-};
-
-Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
-  offset = offset | 0;
-  byteLength = byteLength | 0;
-  if (!noAssert) checkOffset(offset, byteLength, this.length);
-  var val = this[offset];
-  var mul = 1;
-  var i = 0;
-
-  while (++i < byteLength && (mul *= 0x100)) {
-    val += this[offset + i] * mul;
-  }
-
-  mul *= 0x80;
-  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
-  return val;
-};
-
-Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
-  offset = offset | 0;
-  byteLength = byteLength | 0;
-  if (!noAssert) checkOffset(offset, byteLength, this.length);
-  var i = byteLength;
-  var mul = 1;
-  var val = this[offset + --i];
-
-  while (i > 0 && (mul *= 0x100)) {
-    val += this[offset + --i] * mul;
-  }
-
-  mul *= 0x80;
-  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
-  return val;
-};
-
-Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 1, this.length);
-  if (!(this[offset] & 0x80)) return this[offset];
-  return (0xff - this[offset] + 1) * -1;
-};
-
-Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 2, this.length);
-  var val = this[offset] | this[offset + 1] << 8;
-  return val & 0x8000 ? val | 0xFFFF0000 : val;
-};
-
-Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 2, this.length);
-  var val = this[offset + 1] | this[offset] << 8;
-  return val & 0x8000 ? val | 0xFFFF0000 : val;
-};
-
-Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 4, this.length);
-  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
-};
-
-Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 4, this.length);
-  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
-};
-
-Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 4, this.length);
-  return ieee754.read(this, offset, true, 23, 4);
-};
-
-Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 4, this.length);
-  return ieee754.read(this, offset, false, 23, 4);
-};
-
-Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 8, this.length);
-  return ieee754.read(this, offset, true, 52, 8);
-};
-
-Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
-  if (!noAssert) checkOffset(offset, 8, this.length);
-  return ieee754.read(this, offset, false, 52, 8);
-};
-
-function checkInt(buf, value, offset, ext, max, min) {
-  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
-  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
-  if (offset + ext > buf.length) throw new RangeError('Index out of range');
-}
-
-Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
-  value = +value;
-  offset = offset | 0;
-  byteLength = byteLength | 0;
-
-  if (!noAssert) {
-    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
-    checkInt(this, value, offset, byteLength, maxBytes, 0);
-  }
-
-  var mul = 1;
-  var i = 0;
-  this[offset] = value & 0xFF;
-
-  while (++i < byteLength && (mul *= 0x100)) {
-    this[offset + i] = value / mul & 0xFF;
-  }
-
-  return offset + byteLength;
-};
-
-Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
-  value = +value;
-  offset = offset | 0;
-  byteLength = byteLength | 0;
-
-  if (!noAssert) {
-    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
-    checkInt(this, value, offset, byteLength, maxBytes, 0);
-  }
-
-  var i = byteLength - 1;
-  var mul = 1;
-  this[offset + i] = value & 0xFF;
-
-  while (--i >= 0 && (mul *= 0x100)) {
-    this[offset + i] = value / mul & 0xFF;
-  }
-
-  return offset + byteLength;
-};
-
-Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
-  value = +value;
-  offset = offset | 0;
-  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
-  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
-  this[offset] = value & 0xff;
-  return offset + 1;
-};
-
-function objectWriteUInt16(buf, value, offset, littleEndian) {
-  if (value < 0) value = 0xffff + value + 1;
-
-  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
-    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
-  }
-}
-
-Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
-  value = +value;
-  offset = offset | 0;
-  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
-
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
-    this[offset] = value & 0xff;
-    this[offset + 1] = value >>> 8;
-  } else {
-    objectWriteUInt16(this, value, offset, true);
-  }
-
-  return offset + 2;
-};
-
-Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
-  value = +value;
-  offset = offset | 0;
-  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
-
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
-    this[offset] = value >>> 8;
-    this[offset + 1] = value & 0xff;
-  } else {
-    objectWriteUInt16(this, value, offset, false);
-  }
-
-  return offset + 2;
-};
-
-function objectWriteUInt32(buf, value, offset, littleEndian) {
-  if (value < 0) value = 0xffffffff + value + 1;
-
-  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
-    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
-  }
-}
-
-Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
-  value = +value;
-  offset = offset | 0;
-  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
-
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
-    this[offset + 3] = value >>> 24;
-    this[offset + 2] = value >>> 16;
-    this[offset + 1] = value >>> 8;
-    this[offset] = value & 0xff;
-  } else {
-    objectWriteUInt32(this, value, offset, true);
-  }
-
-  return offset + 4;
-};
-
-Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
-  value = +value;
-  offset = offset | 0;
-  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
-
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
-    this[offset] = value >>> 24;
-    this[offset + 1] = value >>> 16;
-    this[offset + 2] = value >>> 8;
-    this[offset + 3] = value & 0xff;
-  } else {
-    objectWriteUInt32(this, value, offset, false);
-  }
-
-  return offset + 4;
-};
-
-Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
-  value = +value;
-  offset = offset | 0;
-
-  if (!noAssert) {
-    var limit = Math.pow(2, 8 * byteLength - 1);
-    checkInt(this, value, offset, byteLength, limit - 1, -limit);
-  }
-
-  var i = 0;
-  var mul = 1;
-  var sub = 0;
-  this[offset] = value & 0xFF;
-
-  while (++i < byteLength && (mul *= 0x100)) {
-    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
-      sub = 1;
-    }
-
-    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
-  }
-
-  return offset + byteLength;
-};
-
-Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
-  value = +value;
-  offset = offset | 0;
-
-  if (!noAssert) {
-    var limit = Math.pow(2, 8 * byteLength - 1);
-    checkInt(this, value, offset, byteLength, limit - 1, -limit);
-  }
-
-  var i = byteLength - 1;
-  var mul = 1;
-  var sub = 0;
-  this[offset + i] = value & 0xFF;
-
-  while (--i >= 0 && (mul *= 0x100)) {
-    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
-      sub = 1;
-    }
-
-    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
-  }
-
-  return offset + byteLength;
-};
-
-Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
-  value = +value;
-  offset = offset | 0;
-  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
-  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
-  if (value < 0) value = 0xff + value + 1;
-  this[offset] = value & 0xff;
-  return offset + 1;
-};
-
-Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
-  value = +value;
-  offset = offset | 0;
-  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
-
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
-    this[offset] = value & 0xff;
-    this[offset + 1] = value >>> 8;
-  } else {
-    objectWriteUInt16(this, value, offset, true);
-  }
-
-  return offset + 2;
-};
-
-Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
-  value = +value;
-  offset = offset | 0;
-  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
-
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
-    this[offset] = value >>> 8;
-    this[offset + 1] = value & 0xff;
-  } else {
-    objectWriteUInt16(this, value, offset, false);
-  }
-
-  return offset + 2;
-};
-
-Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
-  value = +value;
-  offset = offset | 0;
-  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
-
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
-    this[offset] = value & 0xff;
-    this[offset + 1] = value >>> 8;
-    this[offset + 2] = value >>> 16;
-    this[offset + 3] = value >>> 24;
-  } else {
-    objectWriteUInt32(this, value, offset, true);
-  }
-
-  return offset + 4;
-};
-
-Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
-  value = +value;
-  offset = offset | 0;
-  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
-  if (value < 0) value = 0xffffffff + value + 1;
-
-  if (Buffer.TYPED_ARRAY_SUPPORT) {
-    this[offset] = value >>> 24;
-    this[offset + 1] = value >>> 16;
-    this[offset + 2] = value >>> 8;
-    this[offset + 3] = value & 0xff;
-  } else {
-    objectWriteUInt32(this, value, offset, false);
-  }
-
-  return offset + 4;
-};
-
-function checkIEEE754(buf, value, offset, ext, max, min) {
-  if (offset + ext > buf.length) throw new RangeError('Index out of range');
-  if (offset < 0) throw new RangeError('Index out of range');
-}
-
-function writeFloat(buf, value, offset, littleEndian, noAssert) {
-  if (!noAssert) {
-    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
-  }
-
-  ieee754.write(buf, value, offset, littleEndian, 23, 4);
-  return offset + 4;
-}
-
-Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
-  return writeFloat(this, value, offset, true, noAssert);
-};
-
-Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
-  return writeFloat(this, value, offset, false, noAssert);
-};
-
-function writeDouble(buf, value, offset, littleEndian, noAssert) {
-  if (!noAssert) {
-    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
-  }
-
-  ieee754.write(buf, value, offset, littleEndian, 52, 8);
-  return offset + 8;
-}
-
-Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
-  return writeDouble(this, value, offset, true, noAssert);
-};
-
-Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
-  return writeDouble(this, value, offset, false, noAssert);
-}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
-
-
-Buffer.prototype.copy = function copy(target, targetStart, start, end) {
-  if (!start) start = 0;
-  if (!end && end !== 0) end = this.length;
-  if (targetStart >= target.length) targetStart = target.length;
-  if (!targetStart) targetStart = 0;
-  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done
-
-  if (end === start) return 0;
-  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions
-
-  if (targetStart < 0) {
-    throw new RangeError('targetStart out of bounds');
-  }
-
-  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
-  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?
-
-  if (end > this.length) end = this.length;
-
-  if (target.length - targetStart < end - start) {
-    end = target.length - targetStart + start;
-  }
-
-  var len = end - start;
-  var i;
-
-  if (this === target && start < targetStart && targetStart < end) {
-    // descending copy from end
-    for (i = len - 1; i >= 0; --i) {
-      target[i + targetStart] = this[i + start];
-    }
-  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
-    // ascending copy from start
-    for (i = 0; i < len; ++i) {
-      target[i + targetStart] = this[i + start];
-    }
-  } else {
-    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
-  }
-
-  return len;
-}; // Usage:
-//    buffer.fill(number[, offset[, end]])
-//    buffer.fill(buffer[, offset[, end]])
-//    buffer.fill(string[, offset[, end]][, encoding])
-
-
-Buffer.prototype.fill = function fill(val, start, end, encoding) {
-  // Handle string cases:
-  if (typeof val === 'string') {
-    if (typeof start === 'string') {
-      encoding = start;
-      start = 0;
-      end = this.length;
-    } else if (typeof end === 'string') {
-      encoding = end;
-      end = this.length;
-    }
-
-    if (val.length === 1) {
-      var code = val.charCodeAt(0);
-
-      if (code < 256) {
-        val = code;
-      }
-    }
-
-    if (encoding !== undefined && typeof encoding !== 'string') {
-      throw new TypeError('encoding must be a string');
-    }
-
-    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
-      throw new TypeError('Unknown encoding: ' + encoding);
-    }
-  } else if (typeof val === 'number') {
-    val = val & 255;
-  } // Invalid ranges are not set to a default, so can range check early.
-
-
-  if (start < 0 || this.length < start || this.length < end) {
-    throw new RangeError('Out of range index');
-  }
-
-  if (end <= start) {
-    return this;
-  }
-
-  start = start >>> 0;
-  end = end === undefined ? this.length : end >>> 0;
-  if (!val) val = 0;
-  var i;
-
-  if (typeof val === 'number') {
-    for (i = start; i < end; ++i) {
-      this[i] = val;
-    }
-  } else {
-    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
-    var len = bytes.length;
-
-    for (i = 0; i < end - start; ++i) {
-      this[i + start] = bytes[i % len];
-    }
-  }
-
-  return this;
-}; // HELPER FUNCTIONS
-// ================
-
-
-var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
-
-function base64clean(str) {
-  // Node strips out invalid characters like \n and \t from the string, base64-js does not
-  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''
-
-  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
-
-  while (str.length % 4 !== 0) {
-    str = str + '=';
-  }
-
-  return str;
-}
-
-function stringtrim(str) {
-  if (str.trim) return str.trim();
-  return str.replace(/^\s+|\s+$/g, '');
-}
-
-function toHex(n) {
-  if (n < 16) return '0' + n.toString(16);
-  return n.toString(16);
-}
-
-function utf8ToBytes(string, units) {
-  units = units || Infinity;
-  var codePoint;
-  var length = string.length;
-  var leadSurrogate = null;
-  var bytes = [];
-
-  for (var i = 0; i < length; ++i) {
-    codePoint = string.charCodeAt(i); // is surrogate component
-
-    if (codePoint > 0xD7FF && codePoint < 0xE000) {
-      // last char was a lead
-      if (!leadSurrogate) {
-        // no lead yet
-        if (codePoint > 0xDBFF) {
-          // unexpected trail
-          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
-          continue;
-        } else if (i + 1 === length) {
-          // unpaired lead
-          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
-          continue;
-        } // valid lead
-
-
-        leadSurrogate = codePoint;
-        continue;
-      } // 2 leads in a row
-
-
-      if (codePoint < 0xDC00) {
-        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
-        leadSurrogate = codePoint;
-        continue;
-      } // valid surrogate pair
-
-
-      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
-    } else if (leadSurrogate) {
-      // valid bmp char, but last char was a lead
-      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
-    }
-
-    leadSurrogate = null; // encode utf8
-
-    if (codePoint < 0x80) {
-      if ((units -= 1) < 0) break;
-      bytes.push(codePoint);
-    } else if (codePoint < 0x800) {
-      if ((units -= 2) < 0) break;
-      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
-    } else if (codePoint < 0x10000) {
-      if ((units -= 3) < 0) break;
-      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
-    } else if (codePoint < 0x110000) {
-      if ((units -= 4) < 0) break;
-      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
-    } else {
-      throw new Error('Invalid code point');
-    }
-  }
-
-  return bytes;
-}
-
-function asciiToBytes(str) {
-  var byteArray = [];
-
-  for (var i = 0; i < str.length; ++i) {
-    // Node's code seems to be doing this and not & 0x7F..
-    byteArray.push(str.charCodeAt(i) & 0xFF);
-  }
-
-  return byteArray;
-}
-
-function utf16leToBytes(str, units) {
-  var c, hi, lo;
-  var byteArray = [];
-
-  for (var i = 0; i < str.length; ++i) {
-    if ((units -= 2) < 0) break;
-    c = str.charCodeAt(i);
-    hi = c >> 8;
-    lo = c % 256;
-    byteArray.push(lo);
-    byteArray.push(hi);
-  }
-
-  return byteArray;
-}
-
-function base64ToBytes(str) {
-  return base64.toByteArray(base64clean(str));
-}
-
-function blitBuffer(src, dst, offset, length) {
-  for (var i = 0; i < length; ++i) {
-    if (i + offset >= dst.length || i >= src.length) break;
-    dst[i + offset] = src[i];
-  }
-
-  return i;
-}
-
-function isnan(val) {
-  return val !== val; // eslint-disable-line no-self-compare
-}
-/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)))
-
-/***/ }),
-/* 1 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-var __WEBPACK_AMD_DEFINE_RESULT__;
-
-;
-
-(function (globalObject) {
-  'use strict';
-  /*
-   *      bignumber.js v9.0.0
-   *      A JavaScript library for arbitrary-precision arithmetic.
-   *      https://github.com/MikeMcl/bignumber.js
-   *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
-   *      MIT Licensed.
-   *
-   *      BigNumber.prototype methods     |  BigNumber methods
-   *                                      |
-   *      absoluteValue            abs    |  clone
-   *      comparedTo                      |  config               set
-   *      decimalPlaces            dp     |      DECIMAL_PLACES
-   *      dividedBy                div    |      ROUNDING_MODE
-   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
-   *      exponentiatedBy          pow    |      RANGE
-   *      integerValue                    |      CRYPTO
-   *      isEqualTo                eq     |      MODULO_MODE
-   *      isFinite                        |      POW_PRECISION
-   *      isGreaterThan            gt     |      FORMAT
-   *      isGreaterThanOrEqualTo   gte    |      ALPHABET
-   *      isInteger                       |  isBigNumber
-   *      isLessThan               lt     |  maximum              max
-   *      isLessThanOrEqualTo      lte    |  minimum              min
-   *      isNaN                           |  random
-   *      isNegative                      |  sum
-   *      isPositive                      |
-   *      isZero                          |
-   *      minus                           |
-   *      modulo                   mod    |
-   *      multipliedBy             times  |
-   *      negated                         |
-   *      plus                            |
-   *      precision                sd     |
-   *      shiftedBy                       |
-   *      squareRoot               sqrt   |
-   *      toExponential                   |
-   *      toFixed                         |
-   *      toFormat                        |
-   *      toFraction                      |
-   *      toJSON                          |
-   *      toNumber                        |
-   *      toPrecision                     |
-   *      toString                        |
-   *      valueOf                         |
-   *
-   */
-
-  var BigNumber,
-      isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
-      mathceil = Math.ceil,
-      mathfloor = Math.floor,
-      bignumberError = '[BigNumber Error] ',
-      tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',
-      BASE = 1e14,
-      LOG_BASE = 14,
-      MAX_SAFE_INTEGER = 0x1fffffffffffff,
-      // 2^53 - 1
-  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
-  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
-      SQRT_BASE = 1e7,
-      // EDITABLE
-  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
-  // the arguments to toExponential, toFixed, toFormat, and toPrecision.
-  MAX = 1E9; // 0 to MAX_INT32
-
-  /*
-   * Create and return a BigNumber constructor.
-   */
-
-  function clone(configObject) {
-    var div,
-        convertBase,
-        parseNumeric,
-        P = BigNumber.prototype = {
-      constructor: BigNumber,
-      toString: null,
-      valueOf: null
-    },
-        ONE = new BigNumber(1),
-        //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------
-    // The default values below must be integers within the inclusive ranges stated.
-    // The values can also be changed at run-time using BigNumber.set.
-    // The maximum number of decimal places for operations involving division.
-    DECIMAL_PLACES = 20,
-        // 0 to MAX
-    // The rounding mode used when rounding to the above decimal places, and when using
-    // toExponential, toFixed, toFormat and toPrecision, and round (default value).
-    // UP         0 Away from zero.
-    // DOWN       1 Towards zero.
-    // CEIL       2 Towards +Infinity.
-    // FLOOR      3 Towards -Infinity.
-    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
-    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
-    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
-    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
-    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
-    ROUNDING_MODE = 4,
-        // 0 to 8
-    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]
-    // The exponent value at and beneath which toString returns exponential notation.
-    // Number type: -7
-    TO_EXP_NEG = -7,
-        // 0 to -MAX
-    // The exponent value at and above which toString returns exponential notation.
-    // Number type: 21
-    TO_EXP_POS = 21,
-        // 0 to MAX
-    // RANGE : [MIN_EXP, MAX_EXP]
-    // The minimum exponent value, beneath which underflow to zero occurs.
-    // Number type: -324  (5e-324)
-    MIN_EXP = -1e7,
-        // -1 to -MAX
-    // The maximum exponent value, above which overflow to Infinity occurs.
-    // Number type:  308  (1.7976931348623157e+308)
-    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
-    MAX_EXP = 1e7,
-        // 1 to MAX
-    // Whether to use cryptographically-secure random number generation, if available.
-    CRYPTO = false,
-        // true or false
-    // The modulo mode used when calculating the modulus: a mod n.
-    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
-    // The remainder (r) is calculated as: r = a - n * q.
-    //
-    // UP        0 The remainder is positive if the dividend is negative, else is negative.
-    // DOWN      1 The remainder has the same sign as the dividend.
-    //             This modulo mode is commonly known as 'truncated division' and is
-    //             equivalent to (a % n) in JavaScript.
-    // FLOOR     3 The remainder has the same sign as the divisor (Python %).
-    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
-    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
-    //             The remainder is always positive.
-    //
-    // The truncated division, floored division, Euclidian division and IEEE 754 remainder
-    // modes are commonly used for the modulus operation.
-    // Although the other rounding modes can also be used, they may not give useful results.
-    MODULO_MODE = 1,
-        // 0 to 9
-    // The maximum number of significant digits of the result of the exponentiatedBy operation.
-    // If POW_PRECISION is 0, there will be unlimited significant digits.
-    POW_PRECISION = 0,
-        // 0 to MAX
-    // The format specification used by the BigNumber.prototype.toFormat method.
-    FORMAT = {
-      prefix: '',
-      groupSize: 3,
-      secondaryGroupSize: 0,
-      groupSeparator: ',',
-      decimalSeparator: '.',
-      fractionGroupSize: 0,
-      fractionGroupSeparator: '\xA0',
-      // non-breaking space
-      suffix: ''
-    },
-        // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
-    // '-', '.', whitespace, or repeated character.
-    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
-    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; //------------------------------------------------------------------------------------------
-    // CONSTRUCTOR
-
-    /*
-     * The BigNumber constructor and exported function.
-     * Create and return a new instance of a BigNumber object.
-     *
-     * v {number|string|BigNumber} A numeric value.
-     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
-     */
-
-    function BigNumber(v, b) {
-      var alphabet,
-          c,
-          caseChanged,
-          e,
-          i,
-          isNum,
-          len,
-          str,
-          x = this; // Enable constructor call without `new`.
-
-      if (!(x instanceof BigNumber)) return new BigNumber(v, b);
-
-      if (b == null) {
-        if (v && v._isBigNumber === true) {
-          x.s = v.s;
-
-          if (!v.c || v.e > MAX_EXP) {
-            x.c = x.e = null;
-          } else if (v.e < MIN_EXP) {
-            x.c = [x.e = 0];
-          } else {
-            x.e = v.e;
-            x.c = v.c.slice();
-          }
-
-          return;
-        }
-
-        if ((isNum = typeof v == 'number') && v * 0 == 0) {
-          // Use `1 / n` to handle minus zero also.
-          x.s = 1 / v < 0 ? (v = -v, -1) : 1; // Fast path for integers, where n < 2147483648 (2**31).
-
-          if (v === ~~v) {
-            for (e = 0, i = v; i >= 10; i /= 10, e++);
-
-            if (e > MAX_EXP) {
-              x.c = x.e = null;
-            } else {
-              x.e = e;
-              x.c = [v];
-            }
-
-            return;
-          }
-
-          str = String(v);
-        } else {
-          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
-          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
-        } // Decimal point?
-
-
-        if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?
-
-        if ((i = str.search(/e/i)) > 0) {
-          // Determine exponent.
-          if (e < 0) e = i;
-          e += +str.slice(i + 1);
-          str = str.substring(0, i);
-        } else if (e < 0) {
-          // Integer.
-          e = str.length;
-        }
-      } else {
-        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
-        intCheck(b, 2, ALPHABET.length, 'Base'); // Allow exponential notation to be used with base 10 argument, while
-        // also rounding to DECIMAL_PLACES as with other bases.
-
-        if (b == 10) {
-          x = new BigNumber(v);
-          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
-        }
-
-        str = String(v);
-
-        if (isNum = typeof v == 'number') {
-          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
-          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
-          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
-
-          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
-            throw Error(tooManyDigits + v);
-          }
-        } else {
-          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
-        }
-
-        alphabet = ALPHABET.slice(0, b);
-        e = i = 0; // Check that str is a valid base b number.
-        // Don't use RegExp, so alphabet can contain special characters.
-
-        for (len = str.length; i < len; i++) {
-          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
-            if (c == '.') {
-              // If '.' is not the first character and it has not be found before.
-              if (i > e) {
-                e = len;
-                continue;
-              }
-            } else if (!caseChanged) {
-              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
-              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
-                caseChanged = true;
-                i = -1;
-                e = 0;
-                continue;
-              }
-            }
-
-            return parseNumeric(x, String(v), isNum, b);
-          }
-        } // Prevent later check for length on converted number.
-
-
-        isNum = false;
-        str = convertBase(str, b, 10, x.s); // Decimal point?
-
-        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;
-      } // Determine leading zeros.
-
-
-      for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.
-
-
-      for (len = str.length; str.charCodeAt(--len) === 48;);
-
-      if (str = str.slice(i, ++len)) {
-        len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
-
-        if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
-          throw Error(tooManyDigits + x.s * v);
-        } // Overflow?
-
-
-        if ((e = e - i - 1) > MAX_EXP) {
-          // Infinity.
-          x.c = x.e = null; // Underflow?
-        } else if (e < MIN_EXP) {
-          // Zero.
-          x.c = [x.e = 0];
-        } else {
-          x.e = e;
-          x.c = []; // Transform base
-          // e is the base 10 exponent.
-          // i is where to slice str to get the first element of the coefficient array.
-
-          i = (e + 1) % LOG_BASE;
-          if (e < 0) i += LOG_BASE; // i < 1
-
-          if (i < len) {
-            if (i) x.c.push(+str.slice(0, i));
-
-            for (len -= LOG_BASE; i < len;) {
-              x.c.push(+str.slice(i, i += LOG_BASE));
-            }
-
-            i = LOG_BASE - (str = str.slice(i)).length;
-          } else {
-            i -= len;
-          }
-
-          for (; i--; str += '0');
-
-          x.c.push(+str);
-        }
-      } else {
-        // Zero.
-        x.c = [x.e = 0];
-      }
-    } // CONSTRUCTOR PROPERTIES
-
-
-    BigNumber.clone = clone;
-    BigNumber.ROUND_UP = 0;
-    BigNumber.ROUND_DOWN = 1;
-    BigNumber.ROUND_CEIL = 2;
-    BigNumber.ROUND_FLOOR = 3;
-    BigNumber.ROUND_HALF_UP = 4;
-    BigNumber.ROUND_HALF_DOWN = 5;
-    BigNumber.ROUND_HALF_EVEN = 6;
-    BigNumber.ROUND_HALF_CEIL = 7;
-    BigNumber.ROUND_HALF_FLOOR = 8;
-    BigNumber.EUCLID = 9;
-    /*
-     * Configure infrequently-changing library-wide settings.
-     *
-     * Accept an object with the following optional properties (if the value of a property is
-     * a number, it must be an integer within the inclusive range stated):
-     *
-     *   DECIMAL_PLACES   {number}           0 to MAX
-     *   ROUNDING_MODE    {number}           0 to 8
-     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
-     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
-     *   CRYPTO           {boolean}          true or false
-     *   MODULO_MODE      {number}           0 to 9
-     *   POW_PRECISION       {number}           0 to MAX
-     *   ALPHABET         {string}           A string of two or more unique characters which does
-     *                                       not contain '.'.
-     *   FORMAT           {object}           An object with some of the following properties:
-     *     prefix                 {string}
-     *     groupSize              {number}
-     *     secondaryGroupSize     {number}
-     *     groupSeparator         {string}
-     *     decimalSeparator       {string}
-     *     fractionGroupSize      {number}
-     *     fractionGroupSeparator {string}
-     *     suffix                 {string}
-     *
-     * (The values assigned to the above FORMAT object properties are not checked for validity.)
-     *
-     * E.g.
-     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
-     *
-     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
-     *
-     * Return an object with the properties current values.
-     */
-
-    BigNumber.config = BigNumber.set = function (obj) {
-      var p, v;
-
-      if (obj != null) {
-        if (typeof obj == 'object') {
-          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
-          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
-          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
-            v = obj[p];
-            intCheck(v, 0, MAX, p);
-            DECIMAL_PLACES = v;
-          } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
-          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
-
-
-          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
-            v = obj[p];
-            intCheck(v, 0, 8, p);
-            ROUNDING_MODE = v;
-          } // EXPONENTIAL_AT {number|number[]}
-          // Integer, -MAX to MAX inclusive or
-          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
-          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
-
-
-          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
-            v = obj[p];
-
-            if (v && v.pop) {
-              intCheck(v[0], -MAX, 0, p);
-              intCheck(v[1], 0, MAX, p);
-              TO_EXP_NEG = v[0];
-              TO_EXP_POS = v[1];
-            } else {
-              intCheck(v, -MAX, MAX, p);
-              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
-            }
-          } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
-          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
-          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
-
-
-          if (obj.hasOwnProperty(p = 'RANGE')) {
-            v = obj[p];
-
-            if (v && v.pop) {
-              intCheck(v[0], -MAX, -1, p);
-              intCheck(v[1], 1, MAX, p);
-              MIN_EXP = v[0];
-              MAX_EXP = v[1];
-            } else {
-              intCheck(v, -MAX, MAX, p);
-
-              if (v) {
-                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
-              } else {
-                throw Error(bignumberError + p + ' cannot be zero: ' + v);
-              }
-            }
-          } // CRYPTO {boolean} true or false.
-          // '[BigNumber Error] CRYPTO not true or false: {v}'
-          // '[BigNumber Error] crypto unavailable'
-
-
-          if (obj.hasOwnProperty(p = 'CRYPTO')) {
-            v = obj[p];
-
-            if (v === !!v) {
-              if (v) {
-                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
-                  CRYPTO = v;
-                } else {
-                  CRYPTO = !v;
-                  throw Error(bignumberError + 'crypto unavailable');
-                }
-              } else {
-                CRYPTO = v;
-              }
-            } else {
-              throw Error(bignumberError + p + ' not true or false: ' + v);
-            }
-          } // MODULO_MODE {number} Integer, 0 to 9 inclusive.
-          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
-
-
-          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
-            v = obj[p];
-            intCheck(v, 0, 9, p);
-            MODULO_MODE = v;
-          } // POW_PRECISION {number} Integer, 0 to MAX inclusive.
-          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
-
-
-          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
-            v = obj[p];
-            intCheck(v, 0, MAX, p);
-            POW_PRECISION = v;
-          } // FORMAT {object}
-          // '[BigNumber Error] FORMAT not an object: {v}'
-
-
-          if (obj.hasOwnProperty(p = 'FORMAT')) {
-            v = obj[p];
-            if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);
-          } // ALPHABET {string}
-          // '[BigNumber Error] ALPHABET invalid: {v}'
-
-
-          if (obj.hasOwnProperty(p = 'ALPHABET')) {
-            v = obj[p]; // Disallow if only one character,
-            // or if it contains '+', '-', '.', whitespace, or a repeated character.
-
-            if (typeof v == 'string' && !/^.$|[+-.\s]|(.).*\1/.test(v)) {
-              ALPHABET = v;
-            } else {
-              throw Error(bignumberError + p + ' invalid: ' + v);
-            }
-          }
-        } else {
-          // '[BigNumber Error] Object expected: {v}'
-          throw Error(bignumberError + 'Object expected: ' + obj);
-        }
-      }
-
-      return {
-        DECIMAL_PLACES: DECIMAL_PLACES,
-        ROUNDING_MODE: ROUNDING_MODE,
-        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
-        RANGE: [MIN_EXP, MAX_EXP],
-        CRYPTO: CRYPTO,
-        MODULO_MODE: MODULO_MODE,
-        POW_PRECISION: POW_PRECISION,
-        FORMAT: FORMAT,
-        ALPHABET: ALPHABET
-      };
-    };
-    /*
-     * Return true if v is a BigNumber instance, otherwise return false.
-     *
-     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
-     *
-     * v {any}
-     *
-     * '[BigNumber Error] Invalid BigNumber: {v}'
-     */
-
-
-    BigNumber.isBigNumber = function (v) {
-      if (!v || v._isBigNumber !== true) return false;
-      if (!BigNumber.DEBUG) return true;
-      var i,
-          n,
-          c = v.c,
-          e = v.e,
-          s = v.s;
-
-      out: if ({}.toString.call(c) == '[object Array]') {
-        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
-          // If the first element is zero, the BigNumber value must be zero.
-          if (c[0] === 0) {
-            if (e === 0 && c.length === 1) return true;
-            break out;
-          } // Calculate number of digits that c[0] should have, based on the exponent.
-
-
-          i = (e + 1) % LOG_BASE;
-          if (i < 1) i += LOG_BASE; // Calculate number of digits of c[0].
-          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
-
-          if (String(c[0]).length == i) {
-            for (i = 0; i < c.length; i++) {
-              n = c[i];
-              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
-            } // Last element cannot be zero, unless it is the only element.
-
-
-            if (n !== 0) return true;
-          }
-        } // Infinity/NaN
-
-      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
-        return true;
-      }
-
-      throw Error(bignumberError + 'Invalid BigNumber: ' + v);
-    };
-    /*
-     * Return a new BigNumber whose value is the maximum of the arguments.
-     *
-     * arguments {number|string|BigNumber}
-     */
-
-
-    BigNumber.maximum = BigNumber.max = function () {
-      return maxOrMin(arguments, P.lt);
-    };
-    /*
-     * Return a new BigNumber whose value is the minimum of the arguments.
-     *
-     * arguments {number|string|BigNumber}
-     */
-
-
-    BigNumber.minimum = BigNumber.min = function () {
-      return maxOrMin(arguments, P.gt);
-    };
-    /*
-     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
-     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
-     * zeros are produced).
-     *
-     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
-     *
-     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
-     * '[BigNumber Error] crypto unavailable'
-     */
-
-
-    BigNumber.random = function () {
-      var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
-      // Check if Math.random() produces more than 32 bits of randomness.
-      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
-      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
-
-      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {
-        return mathfloor(Math.random() * pow2_53);
-      } : function () {
-        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
-      };
-      return function (dp) {
-        var a,
-            b,
-            e,
-            k,
-            v,
-            i = 0,
-            c = [],
-            rand = new BigNumber(ONE);
-        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);
-        k = mathceil(dp / LOG_BASE);
-
-        if (CRYPTO) {
-          // Browsers supporting crypto.getRandomValues.
-          if (crypto.getRandomValues) {
-            a = crypto.getRandomValues(new Uint32Array(k *= 2));
-
-            for (; i < k;) {
-              // 53 bits:
-              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
-              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
-              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
-              //                                     11111 11111111 11111111
-              // 0x20000 is 2^21.
-              v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:
-              // 0 <= v < 9007199254740992
-              // Probability that v >= 9e15, is
-              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
-
-              if (v >= 9e15) {
-                b = crypto.getRandomValues(new Uint32Array(2));
-                a[i] = b[0];
-                a[i + 1] = b[1];
-              } else {
-                // 0 <= v <= 8999999999999999
-                // 0 <= (v % 1e14) <= 99999999999999
-                c.push(v % 1e14);
-                i += 2;
-              }
-            }
-
-            i = k / 2; // Node.js supporting crypto.randomBytes.
-          } else if (crypto.randomBytes) {
-            // buffer
-            a = crypto.randomBytes(k *= 7);
-
-            for (; i < k;) {
-              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
-              // 0x100000000 is 2^32, 0x1000000 is 2^24
-              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
-              // 0 <= v < 9007199254740992
-              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
-
-              if (v >= 9e15) {
-                crypto.randomBytes(7).copy(a, i);
-              } else {
-                // 0 <= (v % 1e14) <= 99999999999999
-                c.push(v % 1e14);
-                i += 7;
-              }
-            }
-
-            i = k / 7;
-          } else {
-            CRYPTO = false;
-            throw Error(bignumberError + 'crypto unavailable');
-          }
-        } // Use Math.random.
-
-
-        if (!CRYPTO) {
-          for (; i < k;) {
-            v = random53bitInt();
-            if (v < 9e15) c[i++] = v % 1e14;
-          }
-        }
-
-        k = c[--i];
-        dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.
-
-        if (k && dp) {
-          v = POWS_TEN[LOG_BASE - dp];
-          c[i] = mathfloor(k / v) * v;
-        } // Remove trailing elements which are zero.
-
-
-        for (; c[i] === 0; c.pop(), i--); // Zero?
-
-
-        if (i < 0) {
-          c = [e = 0];
-        } else {
-          // Remove leading elements which are zero and adjust exponent accordingly.
-          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE); // Count the digits of the first element of c to determine leading zeros, and...
-
-
-          for (i = 1, v = c[0]; v >= 10; v /= 10, i++); // adjust the exponent accordingly.
-
-
-          if (i < LOG_BASE) e -= LOG_BASE - i;
-        }
-
-        rand.e = e;
-        rand.c = c;
-        return rand;
-      };
-    }();
-    /*
-     * Return a BigNumber whose value is the sum of the arguments.
-     *
-     * arguments {number|string|BigNumber}
-     */
-
-
-    BigNumber.sum = function () {
-      var i = 1,
-          args = arguments,
-          sum = new BigNumber(args[0]);
-
-      for (; i < args.length;) sum = sum.plus(args[i++]);
-
-      return sum;
-    }; // PRIVATE FUNCTIONS
-    // Called by BigNumber and BigNumber.prototype.toString.
-
-
-    convertBase = function () {
-      var decimal = '0123456789';
-      /*
-       * Convert string of baseIn to an array of numbers of baseOut.
-       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
-       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
-       */
-
-      function toBaseOut(str, baseIn, baseOut, alphabet) {
-        var j,
-            arr = [0],
-            arrL,
-            i = 0,
-            len = str.length;
-
-        for (; i < len;) {
-          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);
-
-          arr[0] += alphabet.indexOf(str.charAt(i++));
-
-          for (j = 0; j < arr.length; j++) {
-            if (arr[j] > baseOut - 1) {
-              if (arr[j + 1] == null) arr[j + 1] = 0;
-              arr[j + 1] += arr[j] / baseOut | 0;
-              arr[j] %= baseOut;
-            }
-          }
-        }
-
-        return arr.reverse();
-      } // Convert a numeric string of baseIn to a numeric string of baseOut.
-      // If the caller is toString, we are converting from base 10 to baseOut.
-      // If the caller is BigNumber, we are converting from baseIn to base 10.
-
-
-      return function (str, baseIn, baseOut, sign, callerIsToString) {
-        var alphabet,
-            d,
-            e,
-            k,
-            r,
-            x,
-            xc,
-            y,
-            i = str.indexOf('.'),
-            dp = DECIMAL_PLACES,
-            rm = ROUNDING_MODE; // Non-integer.
-
-        if (i >= 0) {
-          k = POW_PRECISION; // Unlimited precision.
-
-          POW_PRECISION = 0;
-          str = str.replace('.', '');
-          y = new BigNumber(baseIn);
-          x = y.pow(str.length - i);
-          POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the
-          // result by its base raised to a power.
-
-          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);
-          y.e = y.c.length;
-        } // Convert the number as integer.
-
-
-        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.
-
-        e = k = xc.length; // Remove trailing zeros.
-
-        for (; xc[--k] == 0; xc.pop()); // Zero?
-
-
-        if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.
-
-        if (i < 0) {
-          --e;
-        } else {
-          x.c = xc;
-          x.e = e; // The sign is needed for correct rounding.
-
-          x.s = sign;
-          x = div(x, y, dp, rm, baseOut);
-          xc = x.c;
-          r = x.r;
-          e = x.e;
-        } // xc now represents str converted to baseOut.
-        // THe index of the rounding digit.
-
-
-        d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.
-
-        i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.
-
-        k = baseOut / 2;
-        r = r || d < 0 || xc[d + 1] != null;
-        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents
-        // zero, then the result of the base conversion is zero or, if rounding up, a value
-        // such as 0.00001.
-
-        if (d < 1 || !xc[0]) {
-          // 1^-dp or 0
-          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
-        } else {
-          // Truncate xc to the required number of decimal places.
-          xc.length = d; // Round up?
-
-          if (r) {
-            // Rounding up may mean the previous digit has to be rounded up and so on.
-            for (--baseOut; ++xc[--d] > baseOut;) {
-              xc[d] = 0;
-
-              if (!d) {
-                ++e;
-                xc = [1].concat(xc);
-              }
-            }
-          } // Determine trailing zeros.
-
-
-          for (k = xc.length; !xc[--k];); // E.g. [4, 11, 15] becomes 4bf.
-
-
-          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])); // Add leading zeros, decimal point and trailing zeros as required.
-
-
-          str = toFixedPoint(str, e, alphabet.charAt(0));
-        } // The caller will add the sign.
-
-
-        return str;
-      };
-    }(); // Perform division in the specified base. Called by div and convertBase.
-
-
-    div = function () {
-      // Assume non-zero x and k.
-      function multiply(x, k, base) {
-        var m,
-            temp,
-            xlo,
-            xhi,
-            carry = 0,
-            i = x.length,
-            klo = k % SQRT_BASE,
-            khi = k / SQRT_BASE | 0;
-
-        for (x = x.slice(); i--;) {
-          xlo = x[i] % SQRT_BASE;
-          xhi = x[i] / SQRT_BASE | 0;
-          m = khi * xlo + xhi * klo;
-          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
-          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
-          x[i] = temp % base;
-        }
-
-        if (carry) x = [carry].concat(x);
-        return x;
-      }
-
-      function compare(a, b, aL, bL) {
-        var i, cmp;
-
-        if (aL != bL) {
-          cmp = aL > bL ? 1 : -1;
-        } else {
-          for (i = cmp = 0; i < aL; i++) {
-            if (a[i] != b[i]) {
-              cmp = a[i] > b[i] ? 1 : -1;
-              break;
-            }
-          }
-        }
-
-        return cmp;
-      }
-
-      function subtract(a, b, aL, base) {
-        var i = 0; // Subtract b from a.
-
-        for (; aL--;) {
-          a[aL] -= i;
-          i = a[aL] < b[aL] ? 1 : 0;
-          a[aL] = i * base + a[aL] - b[aL];
-        } // Remove leading zeros.
-
-
-        for (; !a[0] && a.length > 1; a.splice(0, 1));
-      } // x: dividend, y: divisor.
-
-
-      return function (x, y, dp, rm, base) {
-        var cmp,
-            e,
-            i,
-            more,
-            n,
-            prod,
-            prodL,
-            q,
-            qc,
-            rem,
-            remL,
-            rem0,
-            xi,
-            xL,
-            yc0,
-            yL,
-            yz,
-            s = x.s == y.s ? 1 : -1,
-            xc = x.c,
-            yc = y.c; // Either NaN, Infinity or 0?
-
-        if (!xc || !xc[0] || !yc || !yc[0]) {
-          return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.
-          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
-          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
-        }
-
-        q = new BigNumber(s);
-        qc = q.c = [];
-        e = x.e - y.e;
-        s = dp + e + 1;
-
-        if (!base) {
-          base = BASE;
-          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
-          s = s / LOG_BASE | 0;
-        } // Result exponent may be one less then the current value of e.
-        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
-
-
-        for (i = 0; yc[i] == (xc[i] || 0); i++);
-
-        if (yc[i] > (xc[i] || 0)) e--;
-
-        if (s < 0) {
-          qc.push(1);
-          more = true;
-        } else {
-          xL = xc.length;
-          yL = yc.length;
-          i = 0;
-          s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.
-
-          n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
-          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
-
-          if (n > 1) {
-            yc = multiply(yc, n, base);
-            xc = multiply(xc, n, base);
-            yL = yc.length;
-            xL = xc.length;
-          }
-
-          xi = yL;
-          rem = xc.slice(0, yL);
-          remL = rem.length; // Add zeros to make remainder as long as divisor.
-
-          for (; remL < yL; rem[remL++] = 0);
-
-          yz = yc.slice();
-          yz = [0].concat(yz);
-          yc0 = yc[0];
-          if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.
-          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;
-
-          do {
-            n = 0; // Compare divisor and remainder.
-
-            cmp = compare(yc, rem, yL, remL); // If divisor < remainder.
-
-            if (cmp < 0) {
-              // Calculate trial digit, n.
-              rem0 = rem[0];
-              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.
-
-              n = mathfloor(rem0 / yc0); //  Algorithm:
-              //  product = divisor multiplied by trial digit (n).
-              //  Compare product and remainder.
-              //  If product is greater than remainder:
-              //    Subtract divisor from product, decrement trial digit.
-              //  Subtract product from remainder.
-              //  If product was less than remainder at the last compare:
-              //    Compare new remainder and divisor.
-              //    If remainder is greater than divisor:
-              //      Subtract divisor from remainder, increment trial digit.
-
-              if (n > 1) {
-                // n may be > base only when base is 3.
-                if (n >= base) n = base - 1; // product = divisor * trial digit.
-
-                prod = multiply(yc, n, base);
-                prodL = prod.length;
-                remL = rem.length; // Compare product and remainder.
-                // If product > remainder then trial digit n too high.
-                // n is 1 too high about 5% of the time, and is not known to have
-                // ever been more than 1 too high.
-
-                while (compare(prod, rem, prodL, remL) == 1) {
-                  n--; // Subtract divisor from product.
-
-                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
-                  prodL = prod.length;
-                  cmp = 1;
-                }
-              } else {
-                // n is 0 or 1, cmp is -1.
-                // If n is 0, there is no need to compare yc and rem again below,
-                // so change cmp to 1 to avoid it.
-                // If n is 1, leave cmp as -1, so yc and rem are compared again.
-                if (n == 0) {
-                  // divisor < remainder, so n must be at least 1.
-                  cmp = n = 1;
-                } // product = divisor
-
-
-                prod = yc.slice();
-                prodL = prod.length;
-              }
-
-              if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.
-
-              subtract(rem, prod, remL, base);
-              remL = rem.length; // If product was < remainder.
-
-              if (cmp == -1) {
-                // Compare divisor and new remainder.
-                // If divisor < new remainder, subtract divisor from remainder.
-                // Trial digit n too low.
-                // n is 1 too low about 5% of the time, and very rarely 2 too low.
-                while (compare(yc, rem, yL, remL) < 1) {
-                  n++; // Subtract divisor from remainder.
-
-                  subtract(rem, yL < remL ? yz : yc, remL, base);
-                  remL = rem.length;
-                }
-              }
-            } else if (cmp === 0) {
-              n++;
-              rem = [0];
-            } // else cmp === 1 and n will be 0
-            // Add the next digit, n, to the result array.
-
-
-            qc[i++] = n; // Update the remainder.
-
-            if (rem[0]) {
-              rem[remL++] = xc[xi] || 0;
-            } else {
-              rem = [xc[xi]];
-              remL = 1;
-            }
-          } while ((xi++ < xL || rem[0] != null) && s--);
-
-          more = rem[0] != null; // Leading zero?
-
-          if (!qc[0]) qc.splice(0, 1);
-        }
-
-        if (base == BASE) {
-          // To calculate q.e, first get the number of digits of qc[0].
-          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);
-
-          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.
-        } else {
-          q.e = e;
-          q.r = +more;
-        }
-
-        return q;
-      };
-    }();
-    /*
-     * Return a string representing the value of BigNumber n in fixed-point or exponential
-     * notation rounded to the specified decimal places or significant digits.
-     *
-     * n: a BigNumber.
-     * i: the index of the last digit required (i.e. the digit that may be rounded up).
-     * rm: the rounding mode.
-     * id: 1 (toExponential) or 2 (toPrecision).
-     */
-
-
-    function format(n, i, rm, id) {
-      var c0, e, ne, len, str;
-      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
-      if (!n.c) return n.toString();
-      c0 = n.c[0];
-      ne = n.e;
-
-      if (i == null) {
-        str = coeffToString(n.c);
-        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');
-      } else {
-        n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.
-
-        e = n.e;
-        str = coeffToString(n.c);
-        len = str.length; // toPrecision returns exponential notation if the number of significant digits
-        // specified is less than the number of digits necessary to represent the integer
-        // part of the value in fixed-point notation.
-        // Exponential notation.
-
-        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
-          // Append zeros?
-          for (; len < i; str += '0', len++);
-
-          str = toExponential(str, e); // Fixed-point notation.
-        } else {
-          i -= ne;
-          str = toFixedPoint(str, e, '0'); // Append zeros?
-
-          if (e + 1 > len) {
-            if (--i > 0) for (str += '.'; i--; str += '0');
-          } else {
-            i += e - len;
-
-            if (i > 0) {
-              if (e + 1 == len) str += '.';
-
-              for (; i--; str += '0');
-            }
-          }
-        }
-      }
-
-      return n.s < 0 && c0 ? '-' + str : str;
-    } // Handle BigNumber.max and BigNumber.min.
-
-
-    function maxOrMin(args, method) {
-      var n,
-          i = 1,
-          m = new BigNumber(args[0]);
-
-      for (; i < args.length; i++) {
-        n = new BigNumber(args[i]); // If any number is NaN, return NaN.
-
-        if (!n.s) {
-          m = n;
-          break;
-        } else if (method.call(m, n)) {
-          m = n;
-        }
-      }
-
-      return m;
-    }
-    /*
-     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
-     * Called by minus, plus and times.
-     */
-
-
-    function normalise(n, c, e) {
-      var i = 1,
-          j = c.length; // Remove trailing zeros.
-
-      for (; !c[--j]; c.pop()); // Calculate the base 10 exponent. First get the number of digits of c[0].
-
-
-      for (j = c[0]; j >= 10; j /= 10, i++); // Overflow?
-
-
-      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
-        // Infinity.
-        n.c = n.e = null; // Underflow?
-      } else if (e < MIN_EXP) {
-        // Zero.
-        n.c = [n.e = 0];
-      } else {
-        n.e = e;
-        n.c = c;
-      }
-
-      return n;
-    } // Handle values that fail the validity test in BigNumber.
-
-
-    parseNumeric = function () {
-      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
-          dotAfter = /^([^.]+)\.$/,
-          dotBefore = /^\.([^.]+)$/,
-          isInfinityOrNaN = /^-?(Infinity|NaN)$/,
-          whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
-      return function (x, str, isNum, b) {
-        var base,
-            s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.
-
-        if (isInfinityOrNaN.test(s)) {
-          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
-        } else {
-          if (!isNum) {
-            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
-            s = s.replace(basePrefix, function (m, p1, p2) {
-              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
-              return !b || b == base ? p1 : m;
-            });
-
-            if (b) {
-              base = b; // E.g. '1.' to '1', '.1' to '0.1'
-
-              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
-            }
-
-            if (str != s) return new BigNumber(s, base);
-          } // '[BigNumber Error] Not a number: {n}'
-          // '[BigNumber Error] Not a base {b} number: {n}'
-
-
-          if (BigNumber.DEBUG) {
-            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
-          } // NaN
-
-
-          x.s = null;
-        }
-
-        x.c = x.e = null;
-      };
-    }();
-    /*
-     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
-     * If r is truthy, it is known that there are more digits after the rounding digit.
-     */
-
-
-    function round(x, sd, rm, r) {
-      var d,
-          i,
-          j,
-          k,
-          n,
-          ni,
-          rd,
-          xc = x.c,
-          pows10 = POWS_TEN; // if x is not Infinity or NaN...
-
-      if (xc) {
-        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
-        // n is a base 1e14 number, the value of the element of array x.c containing rd.
-        // ni is the index of n within x.c.
-        // d is the number of digits of n.
-        // i is the index of rd within n including leading zeros.
-        // j is the actual index of rd within n (if < 0, rd is a leading zero).
-        out: {
-          // Get the number of digits of the first element of xc.
-          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
-
-          i = sd - d; // If the rounding digit is in the first element of xc...
-
-          if (i < 0) {
-            i += LOG_BASE;
-            j = sd;
-            n = xc[ni = 0]; // Get the rounding digit at index j of n.
-
-            rd = n / pows10[d - j - 1] % 10 | 0;
-          } else {
-            ni = mathceil((i + 1) / LOG_BASE);
-
-            if (ni >= xc.length) {
-              if (r) {
-                // Needed by sqrt.
-                for (; xc.length <= ni; xc.push(0));
-
-                n = rd = 0;
-                d = 1;
-                i %= LOG_BASE;
-                j = i - LOG_BASE + 1;
-              } else {
-                break out;
-              }
-            } else {
-              n = k = xc[ni]; // Get the number of digits of n.
-
-              for (d = 1; k >= 10; k /= 10, d++); // Get the index of rd within n.
-
-
-              i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.
-              // The number of leading zeros of n is given by LOG_BASE - d.
-
-              j = i - LOG_BASE + d; // Get the rounding digit at index j of n.
-
-              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
-            }
-          }
-
-          r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
-          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
-          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
-          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
-          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
-          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
-
-          if (sd < 1 || !xc[0]) {
-            xc.length = 0;
-
-            if (r) {
-              // Convert sd to decimal places.
-              sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.
-
-              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
-              x.e = -sd || 0;
-            } else {
-              // Zero.
-              xc[0] = x.e = 0;
-            }
-
-            return x;
-          } // Remove excess digits.
-
-
-          if (i == 0) {
-            xc.length = ni;
-            k = 1;
-            ni--;
-          } else {
-            xc.length = ni + 1;
-            k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.
-            // j > 0 means i > number of leading zeros of n.
-
-            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
-          } // Round up?
-
-
-          if (r) {
-            for (;;) {
-              // If the digit to be rounded up is in the first element of xc...
-              if (ni == 0) {
-                // i will be the length of xc[0] before k is added.
-                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
-
-                j = xc[0] += k;
-
-                for (k = 1; j >= 10; j /= 10, k++); // if i != k the length has increased.
-
-
-                if (i != k) {
-                  x.e++;
-                  if (xc[0] == BASE) xc[0] = 1;
-                }
-
-                break;
-              } else {
-                xc[ni] += k;
-                if (xc[ni] != BASE) break;
-                xc[ni--] = 0;
-                k = 1;
-              }
-            }
-          } // Remove trailing zeros.
-
-
-          for (i = xc.length; xc[--i] === 0; xc.pop());
-        } // Overflow? Infinity.
-
-
-        if (x.e > MAX_EXP) {
-          x.c = x.e = null; // Underflow? Zero.
-        } else if (x.e < MIN_EXP) {
-          x.c = [x.e = 0];
-        }
-      }
-
-      return x;
-    }
-
-    function valueOf(n) {
-      var str,
-          e = n.e;
-      if (e === null) return n.toString();
-      str = coeffToString(n.c);
-      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');
-      return n.s < 0 ? '-' + str : str;
-    } // PROTOTYPE/INSTANCE METHODS
-
-    /*
-     * Return a new BigNumber whose value is the absolute value of this BigNumber.
-     */
-
-
-    P.absoluteValue = P.abs = function () {
-      var x = new BigNumber(this);
-      if (x.s < 0) x.s = 1;
-      return x;
-    };
-    /*
-     * Return
-     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
-     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
-     *   0 if they have the same value,
-     *   or null if the value of either is NaN.
-     */
-
-
-    P.comparedTo = function (y, b) {
-      return compare(this, new BigNumber(y, b));
-    };
-    /*
-     * If dp is undefined or null or true or false, return the number of decimal places of the
-     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
-     *
-     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
-     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
-     * ROUNDING_MODE if rm is omitted.
-     *
-     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
-     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
-     *
-     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
-     */
-
-
-    P.decimalPlaces = P.dp = function (dp, rm) {
-      var c,
-          n,
-          v,
-          x = this;
-
-      if (dp != null) {
-        intCheck(dp, 0, MAX);
-        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
-        return round(new BigNumber(x), dp + x.e + 1, rm);
-      }
-
-      if (!(c = x.c)) return null;
-      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.
-
-      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
-      if (n < 0) n = 0;
-      return n;
-    };
-    /*
-     *  n / 0 = I
-     *  n / N = N
-     *  n / I = 0
-     *  0 / n = 0
-     *  0 / 0 = N
-     *  0 / N = N
-     *  0 / I = 0
-     *  N / n = N
-     *  N / 0 = N
-     *  N / N = N
-     *  N / I = N
-     *  I / n = I
-     *  I / 0 = I
-     *  I / N = N
-     *  I / I = N
-     *
-     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
-     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
-     */
-
-
-    P.dividedBy = P.div = function (y, b) {
-      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
-    };
-    /*
-     * Return a new BigNumber whose value is the integer part of dividing the value of this
-     * BigNumber by the value of BigNumber(y, b).
-     */
-
-
-    P.dividedToIntegerBy = P.idiv = function (y, b) {
-      return div(this, new BigNumber(y, b), 0, 1);
-    };
-    /*
-     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
-     *
-     * If m is present, return the result modulo m.
-     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
-     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
-     *
-     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
-     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
-     *
-     * n {number|string|BigNumber} The exponent. An integer.
-     * [m] {number|string|BigNumber} The modulus.
-     *
-     * '[BigNumber Error] Exponent not an integer: {n}'
-     */
-
-
-    P.exponentiatedBy = P.pow = function (n, m) {
-      var half,
-          isModExp,
-          i,
-          k,
-          more,
-          nIsBig,
-          nIsNeg,
-          nIsOdd,
-          y,
-          x = this;
-      n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.
-
-      if (n.c && !n.isInteger()) {
-        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));
-      }
-
-      if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.
-
-      nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
-
-      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
-        // The sign of the result of pow when x is negative depends on the evenness of n.
-        // If +n overflows to ±Infinity, the evenness of n would be not be known.
-        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
-        return m ? y.mod(m) : y;
-      }
-
-      nIsNeg = n.s < 0;
-
-      if (m) {
-        // x % m returns NaN if abs(m) is zero, or m is NaN.
-        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);
-        isModExp = !nIsNeg && x.isInteger() && m.isInteger();
-        if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
-        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
-      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]
-      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]
-      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
-        // If x is negative and n is odd, k = -0, else k = 0.
-        k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.
-
-        if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.
-
-        return new BigNumber(nIsNeg ? 1 / k : k);
-      } else if (POW_PRECISION) {
-        // Truncating each coefficient array to a length of k after each multiplication
-        // equates to truncating significant digits to POW_PRECISION + [28, 41],
-        // i.e. there will be a minimum of 28 guard digits retained.
-        k = mathceil(POW_PRECISION / LOG_BASE + 2);
-      }
-
-      if (nIsBig) {
-        half = new BigNumber(0.5);
-        if (nIsNeg) n.s = 1;
-        nIsOdd = isOdd(n);
-      } else {
-        i = Math.abs(+valueOf(n));
-        nIsOdd = i % 2;
-      }
-
-      y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.
-
-      for (;;) {
-        if (nIsOdd) {
-          y = y.times(x);
-          if (!y.c) break;
-
-          if (k) {
-            if (y.c.length > k) y.c.length = k;
-          } else if (isModExp) {
-            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
-          }
-        }
-
-        if (i) {
-          i = mathfloor(i / 2);
-          if (i === 0) break;
-          nIsOdd = i % 2;
-        } else {
-          n = n.times(half);
-          round(n, n.e + 1, 1);
-
-          if (n.e > 14) {
-            nIsOdd = isOdd(n);
-          } else {
-            i = +valueOf(n);
-            if (i === 0) break;
-            nIsOdd = i % 2;
-          }
-        }
-
-        x = x.times(x);
-
-        if (k) {
-          if (x.c && x.c.length > k) x.c.length = k;
-        } else if (isModExp) {
-          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
-        }
-      }
-
-      if (isModExp) return y;
-      if (nIsNeg) y = ONE.div(y);
-      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
-    };
-    /*
-     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
-     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
-     *
-     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
-     *
-     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
-     */
-
-
-    P.integerValue = function (rm) {
-      var n = new BigNumber(this);
-      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
-      return round(n, n.e + 1, rm);
-    };
-    /*
-     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
-     * otherwise return false.
-     */
-
-
-    P.isEqualTo = P.eq = function (y, b) {
-      return compare(this, new BigNumber(y, b)) === 0;
-    };
-    /*
-     * Return true if the value of this BigNumber is a finite number, otherwise return false.
-     */
-
-
-    P.isFinite = function () {
-      return !!this.c;
-    };
-    /*
-     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
-     * otherwise return false.
-     */
-
-
-    P.isGreaterThan = P.gt = function (y, b) {
-      return compare(this, new BigNumber(y, b)) > 0;
-    };
-    /*
-     * Return true if the value of this BigNumber is greater than or equal to the value of
-     * BigNumber(y, b), otherwise return false.
-     */
-
-
-    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
-      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
-    };
-    /*
-     * Return true if the value of this BigNumber is an integer, otherwise return false.
-     */
-
-
-    P.isInteger = function () {
-      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
-    };
-    /*
-     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
-     * otherwise return false.
-     */
-
-
-    P.isLessThan = P.lt = function (y, b) {
-      return compare(this, new BigNumber(y, b)) < 0;
-    };
-    /*
-     * Return true if the value of this BigNumber is less than or equal to the value of
-     * BigNumber(y, b), otherwise return false.
-     */
-
-
-    P.isLessThanOrEqualTo = P.lte = function (y, b) {
-      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
-    };
-    /*
-     * Return true if the value of this BigNumber is NaN, otherwise return false.
-     */
-
-
-    P.isNaN = function () {
-      return !this.s;
-    };
-    /*
-     * Return true if the value of this BigNumber is negative, otherwise return false.
-     */
-
-
-    P.isNegative = function () {
-      return this.s < 0;
-    };
-    /*
-     * Return true if the value of this BigNumber is positive, otherwise return false.
-     */
-
-
-    P.isPositive = function () {
-      return this.s > 0;
-    };
-    /*
-     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
-     */
-
-
-    P.isZero = function () {
-      return !!this.c && this.c[0] == 0;
-    };
-    /*
-     *  n - 0 = n
-     *  n - N = N
-     *  n - I = -I
-     *  0 - n = -n
-     *  0 - 0 = 0
-     *  0 - N = N
-     *  0 - I = -I
-     *  N - n = N
-     *  N - 0 = N
-     *  N - N = N
-     *  N - I = N
-     *  I - n = I
-     *  I - 0 = I
-     *  I - N = N
-     *  I - I = N
-     *
-     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
-     * BigNumber(y, b).
-     */
-
-
-    P.minus = function (y, b) {
-      var i,
-          j,
-          t,
-          xLTy,
-          x = this,
-          a = x.s;
-      y = new BigNumber(y, b);
-      b = y.s; // Either NaN?
-
-      if (!a || !b) return new BigNumber(NaN); // Signs differ?
-
-      if (a != b) {
-        y.s = -b;
-        return x.plus(y);
-      }
-
-      var xe = x.e / LOG_BASE,
-          ye = y.e / LOG_BASE,
-          xc = x.c,
-          yc = y.c;
-
-      if (!xe || !ye) {
-        // Either Infinity?
-        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?
-
-        if (!xc[0] || !yc[0]) {
-          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
-          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
-          ROUNDING_MODE == 3 ? -0 : 0);
-        }
-      }
-
-      xe = bitFloor(xe);
-      ye = bitFloor(ye);
-      xc = xc.slice(); // Determine which is the bigger number.
-
-      if (a = xe - ye) {
-        if (xLTy = a < 0) {
-          a = -a;
-          t = xc;
-        } else {
-          ye = xe;
-          t = yc;
-        }
-
-        t.reverse(); // Prepend zeros to equalise exponents.
-
-        for (b = a; b--; t.push(0));
-
-        t.reverse();
-      } else {
-        // Exponents equal. Check digit by digit.
-        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
-
-        for (a = b = 0; b < j; b++) {
-          if (xc[b] != yc[b]) {
-            xLTy = xc[b] < yc[b];
-            break;
-          }
-        }
-      } // x < y? Point xc to the array of the bigger number.
-
-
-      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;
-      b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.
-      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
-
-      if (b > 0) for (; b--; xc[i++] = 0);
-      b = BASE - 1; // Subtract yc from xc.
-
-      for (; j > a;) {
-        if (xc[--j] < yc[j]) {
-          for (i = j; i && !xc[--i]; xc[i] = b);
-
-          --xc[i];
-          xc[j] += BASE;
-        }
-
-        xc[j] -= yc[j];
-      } // Remove leading zeros and adjust exponent accordingly.
-
-
-      for (; xc[0] == 0; xc.splice(0, 1), --ye); // Zero?
-
-
-      if (!xc[0]) {
-        // Following IEEE 754 (2008) 6.3,
-        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
-        y.s = ROUNDING_MODE == 3 ? -1 : 1;
-        y.c = [y.e = 0];
-        return y;
-      } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
-      // for finite x and y.
-
-
-      return normalise(y, xc, ye);
-    };
-    /*
-     *   n % 0 =  N
-     *   n % N =  N
-     *   n % I =  n
-     *   0 % n =  0
-     *  -0 % n = -0
-     *   0 % 0 =  N
-     *   0 % N =  N
-     *   0 % I =  0
-     *   N % n =  N
-     *   N % 0 =  N
-     *   N % N =  N
-     *   N % I =  N
-     *   I % n =  N
-     *   I % 0 =  N
-     *   I % N =  N
-     *   I % I =  N
-     *
-     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
-     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
-     */
-
-
-    P.modulo = P.mod = function (y, b) {
-      var q,
-          s,
-          x = this;
-      y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.
-
-      if (!x.c || !y.s || y.c && !y.c[0]) {
-        return new BigNumber(NaN); // Return x if y is Infinity or x is zero.
-      } else if (!y.c || x.c && !x.c[0]) {
-        return new BigNumber(x);
-      }
-
-      if (MODULO_MODE == 9) {
-        // Euclidian division: q = sign(y) * floor(x / abs(y))
-        // r = x - qy    where  0 <= r < abs(y)
-        s = y.s;
-        y.s = 1;
-        q = div(x, y, 0, 3);
-        y.s = s;
-        q.s *= s;
-      } else {
-        q = div(x, y, 0, MODULO_MODE);
-      }
-
-      y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.
-
-      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
-      return y;
-    };
-    /*
-     *  n * 0 = 0
-     *  n * N = N
-     *  n * I = I
-     *  0 * n = 0
-     *  0 * 0 = 0
-     *  0 * N = N
-     *  0 * I = N
-     *  N * n = N
-     *  N * 0 = N
-     *  N * N = N
-     *  N * I = N
-     *  I * n = I
-     *  I * 0 = N
-     *  I * N = N
-     *  I * I = I
-     *
-     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
-     * of BigNumber(y, b).
-     */
-
-
-    P.multipliedBy = P.times = function (y, b) {
-      var c,
-          e,
-          i,
-          j,
-          k,
-          m,
-          xcL,
-          xlo,
-          xhi,
-          ycL,
-          ylo,
-          yhi,
-          zc,
-          base,
-          sqrtBase,
-          x = this,
-          xc = x.c,
-          yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?
-
-      if (!xc || !yc || !xc[0] || !yc[0]) {
-        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
-        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
-          y.c = y.e = y.s = null;
-        } else {
-          y.s *= x.s; // Return ±Infinity if either is ±Infinity.
-
-          if (!xc || !yc) {
-            y.c = y.e = null; // Return ±0 if either is ±0.
-          } else {
-            y.c = [0];
-            y.e = 0;
-          }
-        }
-
-        return y;
-      }
-
-      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
-      y.s *= x.s;
-      xcL = xc.length;
-      ycL = yc.length; // Ensure xc points to longer array and xcL to its length.
-
-      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.
-
-      for (i = xcL + ycL, zc = []; i--; zc.push(0));
-
-      base = BASE;
-      sqrtBase = SQRT_BASE;
-
-      for (i = ycL; --i >= 0;) {
-        c = 0;
-        ylo = yc[i] % sqrtBase;
-        yhi = yc[i] / sqrtBase | 0;
-
-        for (k = xcL, j = i + k; j > i;) {
-          xlo = xc[--k] % sqrtBase;
-          xhi = xc[k] / sqrtBase | 0;
-          m = yhi * xlo + xhi * ylo;
-          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
-          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
-          zc[j--] = xlo % base;
-        }
-
-        zc[j] = c;
-      }
-
-      if (c) {
-        ++e;
-      } else {
-        zc.splice(0, 1);
-      }
-
-      return normalise(y, zc, e);
-    };
-    /*
-     * Return a new BigNumber whose value is the value of this BigNumber negated,
-     * i.e. multiplied by -1.
-     */
-
-
-    P.negated = function () {
-      var x = new BigNumber(this);
-      x.s = -x.s || null;
-      return x;
-    };
-    /*
-     *  n + 0 = n
-     *  n + N = N
-     *  n + I = I
-     *  0 + n = n
-     *  0 + 0 = 0
-     *  0 + N = N
-     *  0 + I = I
-     *  N + n = N
-     *  N + 0 = N
-     *  N + N = N
-     *  N + I = N
-     *  I + n = I
-     *  I + 0 = I
-     *  I + N = N
-     *  I + I = I
-     *
-     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
-     * BigNumber(y, b).
-     */
-
-
-    P.plus = function (y, b) {
-      var t,
-          x = this,
-          a = x.s;
-      y = new BigNumber(y, b);
-      b = y.s; // Either NaN?
-
-      if (!a || !b) return new BigNumber(NaN); // Signs differ?
-
-      if (a != b) {
-        y.s = -b;
-        return x.minus(y);
-      }
-
-      var xe = x.e / LOG_BASE,
-          ye = y.e / LOG_BASE,
-          xc = x.c,
-          yc = y.c;
-
-      if (!xe || !ye) {
-        // Return ±Infinity if either ±Infinity.
-        if (!xc || !yc) return new BigNumber(a / 0); // Either zero?
-        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
-
-        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
-      }
-
-      xe = bitFloor(xe);
-      ye = bitFloor(ye);
-      xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
-
-      if (a = xe - ye) {
-        if (a > 0) {
-          ye = xe;
-          t = yc;
-        } else {
-          a = -a;
-          t = xc;
-        }
-
-        t.reverse();
-
-        for (; a--; t.push(0));
-
-        t.reverse();
-      }
-
-      a = xc.length;
-      b = yc.length; // Point xc to the longer array, and b to the shorter length.
-
-      if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
-
-      for (a = 0; b;) {
-        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
-        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
-      }
-
-      if (a) {
-        xc = [a].concat(xc);
-        ++ye;
-      } // No need to check for zero, as +x + +y != 0 && -x + -y != 0
-      // ye = MAX_EXP + 1 possible
-
-
-      return normalise(y, xc, ye);
-    };
-    /*
-     * If sd is undefined or null or true or false, return the number of significant digits of
-     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
-     * If sd is true include integer-part trailing zeros in the count.
-     *
-     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
-     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
-     * ROUNDING_MODE if rm is omitted.
-     *
-     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
-     *                     boolean: whether to count integer-part trailing zeros: true or false.
-     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
-     *
-     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
-     */
-
-
-    P.precision = P.sd = function (sd, rm) {
-      var c,
-          n,
-          v,
-          x = this;
-
-      if (sd != null && sd !== !!sd) {
-        intCheck(sd, 1, MAX);
-        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
-        return round(new BigNumber(x), sd, rm);
-      }
-
-      if (!(c = x.c)) return null;
-      v = c.length - 1;
-      n = v * LOG_BASE + 1;
-
-      if (v = c[v]) {
-        // Subtract the number of trailing zeros of the last element.
-        for (; v % 10 == 0; v /= 10, n--); // Add the number of digits of the first element.
-
-
-        for (v = c[0]; v >= 10; v /= 10, n++);
-      }
-
-      if (sd && x.e + 1 > n) n = x.e + 1;
-      return n;
-    };
-    /*
-     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
-     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
-     *
-     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
-     *
-     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
-     */
-
-
-    P.shiftedBy = function (k) {
-      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
-      return this.times('1e' + k);
-    };
-    /*
-     *  sqrt(-n) =  N
-     *  sqrt(N) =  N
-     *  sqrt(-I) =  N
-     *  sqrt(I) =  I
-     *  sqrt(0) =  0
-     *  sqrt(-0) = -0
-     *
-     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
-     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
-     */
-
-
-    P.squareRoot = P.sqrt = function () {
-      var m,
-          n,
-          r,
-          rep,
-          t,
-          x = this,
-          c = x.c,
-          s = x.s,
-          e = x.e,
-          dp = DECIMAL_PLACES + 4,
-          half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?
-
-      if (s !== 1 || !c || !c[0]) {
-        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
-      } // Initial estimate.
-
-
-      s = Math.sqrt(+valueOf(x)); // Math.sqrt underflow/overflow?
-      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
-
-      if (s == 0 || s == 1 / 0) {
-        n = coeffToString(c);
-        if ((n.length + e) % 2 == 0) n += '0';
-        s = Math.sqrt(+n);
-        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
-
-        if (s == 1 / 0) {
-          n = '1e' + e;
-        } else {
-          n = s.toExponential();
-          n = n.slice(0, n.indexOf('e') + 1) + e;
-        }
-
-        r = new BigNumber(n);
-      } else {
-        r = new BigNumber(s + '');
-      } // Check for zero.
-      // r could be zero if MIN_EXP is changed after the this value was created.
-      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
-      // coeffToString to throw.
-
-
-      if (r.c[0]) {
-        e = r.e;
-        s = e + dp;
-        if (s < 3) s = 0; // Newton-Raphson iteration.
-
-        for (;;) {
-          t = r;
-          r = half.times(t.plus(div(x, t, dp, 1)));
-
-          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
-            // The exponent of r may here be one less than the final result exponent,
-            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
-            // are indexed correctly.
-            if (r.e < e) --s;
-            n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
-            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
-            // iteration.
-
-            if (n == '9999' || !rep && n == '4999') {
-              // On the first iteration only, check to see if rounding up gives the
-              // exact result as the nines may infinitely repeat.
-              if (!rep) {
-                round(t, t.e + DECIMAL_PLACES + 2, 0);
-
-                if (t.times(t).eq(x)) {
-                  r = t;
-                  break;
-                }
-              }
-
-              dp += 4;
-              s += 4;
-              rep = 1;
-            } else {
-              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
-              // result. If not, then there are further digits and m will be truthy.
-              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
-                // Truncate to the first rounding digit.
-                round(r, r.e + DECIMAL_PLACES + 2, 1);
-                m = !r.times(r).eq(x);
-              }
-
-              break;
-            }
-          }
-        }
-      }
-
-      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
-    };
-    /*
-     * Return a string representing the value of this BigNumber in exponential notation and
-     * rounded using ROUNDING_MODE to dp fixed decimal places.
-     *
-     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
-     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
-     *
-     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
-     */
-
-
-    P.toExponential = function (dp, rm) {
-      if (dp != null) {
-        intCheck(dp, 0, MAX);
-        dp++;
-      }
-
-      return format(this, dp, rm, 1);
-    };
-    /*
-     * Return a string representing the value of this BigNumber in fixed-point notation rounding
-     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
-     *
-     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
-     * but e.g. (-0.00001).toFixed(0) is '-0'.
-     *
-     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
-     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
-     *
-     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
-     */
-
-
-    P.toFixed = function (dp, rm) {
-      if (dp != null) {
-        intCheck(dp, 0, MAX);
-        dp = dp + this.e + 1;
-      }
-
-      return format(this, dp, rm);
-    };
-    /*
-     * Return a string representing the value of this BigNumber in fixed-point notation rounded
-     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
-     * of the format or FORMAT object (see BigNumber.set).
-     *
-     * The formatting object may contain some or all of the properties shown below.
-     *
-     * FORMAT = {
-     *   prefix: '',
-     *   groupSize: 3,
-     *   secondaryGroupSize: 0,
-     *   groupSeparator: ',',
-     *   decimalSeparator: '.',
-     *   fractionGroupSize: 0,
-     *   fractionGroupSeparator: '\xA0',      // non-breaking space
-     *   suffix: ''
-     * };
-     *
-     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
-     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
-     * [format] {object} Formatting options. See FORMAT pbject above.
-     *
-     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
-     * '[BigNumber Error] Argument not an object: {format}'
-     */
-
-
-    P.toFormat = function (dp, rm, format) {
-      var str,
-          x = this;
-
-      if (format == null) {
-        if (dp != null && rm && typeof rm == 'object') {
-          format = rm;
-          rm = null;
-        } else if (dp && typeof dp == 'object') {
-          format = dp;
-          dp = rm = null;
-        } else {
-          format = FORMAT;
-        }
-      } else if (typeof format != 'object') {
-        throw Error(bignumberError + 'Argument not an object: ' + format);
-      }
-
-      str = x.toFixed(dp, rm);
-
-      if (x.c) {
-        var i,
-            arr = str.split('.'),
-            g1 = +format.groupSize,
-            g2 = +format.secondaryGroupSize,
-            groupSeparator = format.groupSeparator || '',
-            intPart = arr[0],
-            fractionPart = arr[1],
-            isNeg = x.s < 0,
-            intDigits = isNeg ? intPart.slice(1) : intPart,
-            len = intDigits.length;
-        if (g2) i = g1, g1 = g2, g2 = i, len -= i;
-
-        if (g1 > 0 && len > 0) {
-          i = len % g1 || g1;
-          intPart = intDigits.substr(0, i);
-
-          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
-
-          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
-          if (isNeg) intPart = '-' + intPart;
-        }
-
-        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;
-      }
-
-      return (format.prefix || '') + str + (format.suffix || '');
-    };
-    /*
-     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
-     * fraction with an integer numerator and an integer denominator.
-     * The denominator will be a positive non-zero value less than or equal to the specified
-     * maximum denominator. If a maximum denominator is not specified, the denominator will be
-     * the lowest value necessary to represent the number exactly.
-     *
-     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
-     *
-     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
-     */
-
-
-    P.toFraction = function (md) {
-      var d,
-          d0,
-          d1,
-          d2,
-          e,
-          exp,
-          n,
-          n0,
-          n1,
-          q,
-          r,
-          s,
-          x = this,
-          xc = x.c;
-
-      if (md != null) {
-        n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.
-
-        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
-          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
-        }
-      }
-
-      if (!xc) return new BigNumber(x);
-      d = new BigNumber(ONE);
-      n1 = d0 = new BigNumber(ONE);
-      d1 = n0 = new BigNumber(ONE);
-      s = coeffToString(xc); // Determine initial denominator.
-      // d is a power of 10 and the minimum max denominator that specifies the value exactly.
-
-      e = d.e = s.length - x.e - 1;
-      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
-      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
-      exp = MAX_EXP;
-      MAX_EXP = 1 / 0;
-      n = new BigNumber(s); // n0 = d1 = 0
-
-      n0.c[0] = 0;
-
-      for (;;) {
-        q = div(n, d, 0, 1);
-        d2 = d0.plus(q.times(d1));
-        if (d2.comparedTo(md) == 1) break;
-        d0 = d1;
-        d1 = d2;
-        n1 = n0.plus(q.times(d2 = n1));
-        n0 = d2;
-        d = n.minus(q.times(d2 = d));
-        n = d2;
-      }
-
-      d2 = div(md.minus(d0), d1, 0, 1);
-      n0 = n0.plus(d2.times(n1));
-      d0 = d0.plus(d2.times(d1));
-      n0.s = n1.s = x.s;
-      e = e * 2; // Determine which fraction is closer to x, n0/d0 or n1/d1
-
-      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
-      MAX_EXP = exp;
-      return r;
-    };
-    /*
-     * Return the value of this BigNumber converted to a number primitive.
-     */
-
-
-    P.toNumber = function () {
-      return +valueOf(this);
-    };
-    /*
-     * Return a string representing the value of this BigNumber rounded to sd significant digits
-     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
-     * necessary to represent the integer part of the value in fixed-point notation, then use
-     * exponential notation.
-     *
-     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
-     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
-     *
-     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
-     */
-
-
-    P.toPrecision = function (sd, rm) {
-      if (sd != null) intCheck(sd, 1, MAX);
-      return format(this, sd, rm, 2);
-    };
-    /*
-     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
-     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
-     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
-     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
-     * TO_EXP_NEG, return exponential notation.
-     *
-     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
-     *
-     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
-     */
-
-
-    P.toString = function (b) {
-      var str,
-          n = this,
-          s = n.s,
-          e = n.e; // Infinity or NaN?
-
-      if (e === null) {
-        if (s) {
-          str = 'Infinity';
-          if (s < 0) str = '-' + str;
-        } else {
-          str = 'NaN';
-        }
-      } else {
-        if (b == null) {
-          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');
-        } else if (b === 10) {
-          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
-          str = toFixedPoint(coeffToString(n.c), n.e, '0');
-        } else {
-          intCheck(b, 2, ALPHABET.length, 'Base');
-          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
-        }
-
-        if (s < 0 && n.c[0]) str = '-' + str;
-      }
-
-      return str;
-    };
-    /*
-     * Return as toString, but do not accept a base argument, and include the minus sign for
-     * negative zero.
-     */
-
-
-    P.valueOf = P.toJSON = function () {
-      return valueOf(this);
-    };
-
-    P._isBigNumber = true;
-    if (configObject != null) BigNumber.set(configObject);
-    return BigNumber;
-  } // PRIVATE HELPER FUNCTIONS
-  // These functions don't need access to variables,
-  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.
-
-
-  function bitFloor(n) {
-    var i = n | 0;
-    return n > 0 || n === i ? i : i - 1;
-  } // Return a coefficient array as a string of base 10 digits.
-
-
-  function coeffToString(a) {
-    var s,
-        z,
-        i = 1,
-        j = a.length,
-        r = a[0] + '';
-
-    for (; i < j;) {
-      s = a[i++] + '';
-      z = LOG_BASE - s.length;
-
-      for (; z--; s = '0' + s);
-
-      r += s;
-    } // Determine trailing zeros.
-
-
-    for (j = r.length; r.charCodeAt(--j) === 48;);
-
-    return r.slice(0, j + 1 || 1);
-  } // Compare the value of BigNumbers x and y.
-
-
-  function compare(x, y) {
-    var a,
-        b,
-        xc = x.c,
-        yc = y.c,
-        i = x.s,
-        j = y.s,
-        k = x.e,
-        l = y.e; // Either NaN?
-
-    if (!i || !j) return null;
-    a = xc && !xc[0];
-    b = yc && !yc[0]; // Either zero?
-
-    if (a || b) return a ? b ? 0 : -j : i; // Signs differ?
-
-    if (i != j) return i;
-    a = i < 0;
-    b = k == l; // Either Infinity?
-
-    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.
-
-    if (!b) return k > l ^ a ? 1 : -1;
-    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.
-
-    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1; // Compare lengths.
-
-
-    return k == l ? 0 : k > l ^ a ? 1 : -1;
-  }
-  /*
-   * Check that n is a primitive number, an integer, and in range, otherwise throw.
-   */
-
-
-  function intCheck(n, min, max, name) {
-    if (n < min || n > max || n !== mathfloor(n)) {
-      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));
-    }
-  } // Assumes finite n.
-
-
-  function isOdd(n) {
-    var k = n.c.length - 1;
-    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
-  }
-
-  function toExponential(str, e) {
-    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
-  }
-
-  function toFixedPoint(str, e, z) {
-    var len, zs; // Negative exponent?
-
-    if (e < 0) {
-      // Prepend zeros.
-      for (zs = z + '.'; ++e; zs += z);
-
-      str = zs + str; // Positive exponent
-    } else {
-      len = str.length; // Append zeros.
-
-      if (++e > len) {
-        for (zs = z, e -= len; --e; zs += z);
-
-        str += zs;
-      } else if (e < len) {
-        str = str.slice(0, e) + '.' + str.slice(e);
-      }
-    }
-
-    return str;
-  } // EXPORT
-
-
-  BigNumber = clone();
-  BigNumber['default'] = BigNumber.BigNumber = BigNumber; // AMD.
-
-  if (true) {
-    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
-      return BigNumber;
-    }).call(exports, __webpack_require__, exports, module),
-				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // Node.js and other environments that support module.exports.
-  } else {}
-})(void 0);
-
-/***/ }),
-/* 2 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-const Bignumber = __webpack_require__(1).BigNumber;
-
-exports.MT = {
-  POS_INT: 0,
-  NEG_INT: 1,
-  BYTE_STRING: 2,
-  UTF8_STRING: 3,
-  ARRAY: 4,
-  MAP: 5,
-  TAG: 6,
-  SIMPLE_FLOAT: 7
-};
-exports.TAG = {
-  DATE_STRING: 0,
-  DATE_EPOCH: 1,
-  POS_BIGINT: 2,
-  NEG_BIGINT: 3,
-  DECIMAL_FRAC: 4,
-  BIGFLOAT: 5,
-  BASE64URL_EXPECTED: 21,
-  BASE64_EXPECTED: 22,
-  BASE16_EXPECTED: 23,
-  CBOR: 24,
-  URI: 32,
-  BASE64URL: 33,
-  BASE64: 34,
-  REGEXP: 35,
-  MIME: 36
-};
-exports.NUMBYTES = {
-  ZERO: 0,
-  ONE: 24,
-  TWO: 25,
-  FOUR: 26,
-  EIGHT: 27,
-  INDEFINITE: 31
-};
-exports.SIMPLE = {
-  FALSE: 20,
-  TRUE: 21,
-  NULL: 22,
-  UNDEFINED: 23
-};
-exports.SYMS = {
-  NULL: Symbol('null'),
-  UNDEFINED: Symbol('undef'),
-  PARENT: Symbol('parent'),
-  BREAK: Symbol('break'),
-  STREAM: Symbol('stream')
-};
-exports.SHIFT32 = Math.pow(2, 32);
-exports.SHIFT16 = Math.pow(2, 16);
-exports.MAX_SAFE_HIGH = 0x1fffff;
-exports.NEG_ONE = new Bignumber(-1);
-exports.TEN = new Bignumber(10);
-exports.TWO = new Bignumber(2);
-exports.PARENT = {
-  ARRAY: 0,
-  OBJECT: 1,
-  MAP: 2,
-  TAG: 3,
-  BYTE_STRING: 4,
-  UTF8_STRING: 5
-};
-
-/***/ }),
-/* 3 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-const {
-  Buffer
-} = __webpack_require__(0);
-
-const Bignumber = __webpack_require__(1).BigNumber;
-
-const constants = __webpack_require__(2);
-
-const SHIFT32 = constants.SHIFT32;
-const SHIFT16 = constants.SHIFT16;
-const MAX_SAFE_HIGH = 0x1fffff;
-
-exports.parseHalf = function parseHalf(buf) {
-  var exp, mant, sign;
-  sign = buf[0] & 0x80 ? -1 : 1;
-  exp = (buf[0] & 0x7C) >> 2;
-  mant = (buf[0] & 0x03) << 8 | buf[1];
-
-  if (!exp) {
-    return sign * 5.9604644775390625e-8 * mant;
-  } else if (exp === 0x1f) {
-    return sign * (mant ? 0 / 0 : 2e308);
-  } else {
-    return sign * Math.pow(2, exp - 25) * (1024 + mant);
-  }
-};
-
-function toHex(n) {
-  if (n < 16) {
-    return '0' + n.toString(16);
-  }
-
-  return n.toString(16);
-}
-
-exports.arrayBufferToBignumber = function (buf) {
-  const len = buf.byteLength;
-  let res = '';
-
-  for (let i = 0; i < len; i++) {
-    res += toHex(buf[i]);
-  }
-
-  return new Bignumber(res, 16);
-}; // convert an Object into a Map
-
-
-exports.buildMap = obj => {
-  const res = new Map();
-  const keys = Object.keys(obj);
-  const length = keys.length;
-
-  for (let i = 0; i < length; i++) {
-    res.set(keys[i], obj[keys[i]]);
-  }
-
-  return res;
-};
-
-exports.buildInt32 = (f, g) => {
-  return f * SHIFT16 + g;
-};
-
-exports.buildInt64 = (f1, f2, g1, g2) => {
-  const f = exports.buildInt32(f1, f2);
-  const g = exports.buildInt32(g1, g2);
-
-  if (f > MAX_SAFE_HIGH) {
-    return new Bignumber(f).times(SHIFT32).plus(g);
-  } else {
-    return f * SHIFT32 + g;
-  }
-};
-
-exports.writeHalf = function writeHalf(buf, half) {
-  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught
-  // HACK: everyone settle in.  This isn't going to be pretty.
-  // Translate cn-cbor's C code (from Carsten Borman):
-  // uint32_t be32;
-  // uint16_t be16, u16;
-  // union {
-  //   float f;
-  //   uint32_t u;
-  // } u32;
-  // u32.f = float_val;
-  const u32 = Buffer.allocUnsafe(4);
-  u32.writeFloatBE(half, 0);
-  const u = u32.readUInt32BE(0); // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */
-  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion
-
-  if ((u & 0x1FFF) !== 0) {
-    return false;
-  } //   int s16 = (u32.u >> 16) & 0x8000;
-  //   int exp = (u32.u >> 23) & 0xff;
-  //   int mant = u32.u & 0x7fffff;
-
-
-  var s16 = u >> 16 & 0x8000; // top bit is sign
-
-  const exp = u >> 23 & 0xff; // then 5 bits of exponent
-
-  const mant = u & 0x7fffff; //   if (exp == 0 && mant == 0)
-  //     ;              /* 0.0, -0.0 */
-  // hildjj: zeros already handled.  Assert if you don't believe me.
-  //   else if (exp >= 113 && exp <= 142) /* normalized */
-  //     s16 += ((exp - 112) << 10) + (mant >> 13);
-
-  if (exp >= 113 && exp <= 142) {
-    s16 += (exp - 112 << 10) + (mant >> 13); //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */
-    //     if (mant & ((1 << (126 - exp)) - 1))
-    //       goto float32;         /* loss of precision */
-    //     s16 += ((mant + 0x800000) >> (126 - exp));
-  } else if (exp >= 103 && exp < 113) {
-    if (mant & (1 << 126 - exp) - 1) {
-      return false;
-    }
-
-    s16 += mant + 0x800000 >> 126 - exp; //   } else if (exp == 255 && mant == 0) { /* Inf */
-    //     s16 += 0x7c00;
-    // hildjj: Infinity already handled
-    //   } else
-    //     goto float32;           /* loss of range */
-  } else {
-    return false;
-  } //   ensure_writable(3);
-  //   u16 = s16;
-  //   be16 = hton16p((const uint8_t*)&u16);
-
-
-  buf.writeUInt16BE(s16, 0);
-  return true;
-};
-
-exports.keySorter = function (a, b) {
-  var lenA = a[0].byteLength;
-  var lenB = b[0].byteLength;
-
-  if (lenA > lenB) {
-    return 1;
-  }
-
-  if (lenB > lenA) {
-    return -1;
-  }
-
-  return a[0].compare(b[0]);
-}; // Adapted from http://www.2ality.com/2012/03/signedzero.html
-
-
-exports.isNegativeZero = x => {
-  return x === 0 && 1 / x < 0;
-};
-
-exports.nextPowerOf2 = n => {
-  let count = 0; // First n in the below condition is for
-  // the case where n is 0
-
-  if (n && !(n & n - 1)) {
-    return n;
-  }
-
-  while (n !== 0) {
-    n >>= 1;
-    count += 1;
-  }
-
-  return 1 << count;
-};
-
-/***/ }),
-/* 4 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-var g; // This works in non-strict mode
-
-g = function () {
-  return this;
-}();
-
-try {
-  // This works if eval is allowed (see CSP)
-  g = g || new Function("return this")();
-} catch (e) {
-  // This works if the window reference is available
-  if (typeof window === "object") g = window;
-} // g can still be undefined, but nothing to do about it...
-// We return undefined, instead of nothing here, so it's
-// easier to handle this case. if(!global) { ...}
-
-
-module.exports = g;
-
-/***/ }),
-/* 5 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-exports.read = function (buffer, offset, isLE, mLen, nBytes) {
-  var e, m;
-  var eLen = nBytes * 8 - mLen - 1;
-  var eMax = (1 << eLen) - 1;
-  var eBias = eMax >> 1;
-  var nBits = -7;
-  var i = isLE ? nBytes - 1 : 0;
-  var d = isLE ? -1 : 1;
-  var s = buffer[offset + i];
-  i += d;
-  e = s & (1 << -nBits) - 1;
-  s >>= -nBits;
-  nBits += eLen;
-
-  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
-
-  m = e & (1 << -nBits) - 1;
-  e >>= -nBits;
-  nBits += mLen;
-
-  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
-
-  if (e === 0) {
-    e = 1 - eBias;
-  } else if (e === eMax) {
-    return m ? NaN : (s ? -1 : 1) * Infinity;
-  } else {
-    m = m + Math.pow(2, mLen);
-    e = e - eBias;
-  }
-
-  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
-};
-
-exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
-  var e, m, c;
-  var eLen = nBytes * 8 - mLen - 1;
-  var eMax = (1 << eLen) - 1;
-  var eBias = eMax >> 1;
-  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
-  var i = isLE ? 0 : nBytes - 1;
-  var d = isLE ? 1 : -1;
-  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
-  value = Math.abs(value);
-
-  if (isNaN(value) || value === Infinity) {
-    m = isNaN(value) ? 1 : 0;
-    e = eMax;
-  } else {
-    e = Math.floor(Math.log(value) / Math.LN2);
-
-    if (value * (c = Math.pow(2, -e)) < 1) {
-      e--;
-      c *= 2;
-    }
-
-    if (e + eBias >= 1) {
-      value += rt / c;
-    } else {
-      value += rt * Math.pow(2, 1 - eBias);
-    }
-
-    if (value * c >= 2) {
-      e++;
-      c /= 2;
-    }
-
-    if (e + eBias >= eMax) {
-      m = 0;
-      e = eMax;
-    } else if (e + eBias >= 1) {
-      m = (value * c - 1) * Math.pow(2, mLen);
-      e = e + eBias;
-    } else {
-      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
-      e = 0;
-    }
-  }
-
-  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
-
-  e = e << mLen | m;
-  eLen += mLen;
-
-  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
-
-  buffer[offset + i - d] |= s * 128;
-};
-
-/***/ }),
-/* 6 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-/* WEBPACK VAR INJECTION */(function(global) {
-
-const {
-  Buffer
-} = __webpack_require__(0);
-
-const ieee754 = __webpack_require__(5);
-
-const Bignumber = __webpack_require__(1).BigNumber;
-
-const parser = __webpack_require__(16);
-
-const utils = __webpack_require__(3);
-
-const c = __webpack_require__(2);
-
-const Simple = __webpack_require__(7);
-
-const Tagged = __webpack_require__(8);
-
-const {
-  URL
-} = __webpack_require__(9);
-/**
- * Transform binary cbor data into JavaScript objects.
- */
-
-
-class Decoder {
-  /**
-   * @param {Object} [opts={}]
-   * @param {number} [opts.size=65536] - Size of the allocated heap.
-   */
-  constructor(opts) {
-    opts = opts || {};
-
-    if (!opts.size || opts.size < 0x10000) {
-      opts.size = 0x10000;
-    } else {
-      // Ensure the size is a power of 2
-      opts.size = utils.nextPowerOf2(opts.size);
-    } // Heap use to share the input with the parser
-
-
-    this._heap = new ArrayBuffer(opts.size);
-    this._heap8 = new Uint8Array(this._heap);
-    this._buffer = Buffer.from(this._heap);
-
-    this._reset(); // Known tags
-
-
-    this._knownTags = Object.assign({
-      0: val => new Date(val),
-      1: val => new Date(val * 1000),
-      2: val => utils.arrayBufferToBignumber(val),
-      3: val => c.NEG_ONE.minus(utils.arrayBufferToBignumber(val)),
-      4: v => {
-        // const v = new Uint8Array(val)
-        return c.TEN.pow(v[0]).times(v[1]);
-      },
-      5: v => {
-        // const v = new Uint8Array(val)
-        return c.TWO.pow(v[0]).times(v[1]);
-      },
-      32: val => new URL(val),
-      35: val => new RegExp(val)
-    }, opts.tags); // Initialize asm based parser
-
-    this.parser = parser(global, {
-      // eslint-disable-next-line no-console
-      log: console.log.bind(console),
-      pushInt: this.pushInt.bind(this),
-      pushInt32: this.pushInt32.bind(this),
-      pushInt32Neg: this.pushInt32Neg.bind(this),
-      pushInt64: this.pushInt64.bind(this),
-      pushInt64Neg: this.pushInt64Neg.bind(this),
-      pushFloat: this.pushFloat.bind(this),
-      pushFloatSingle: this.pushFloatSingle.bind(this),
-      pushFloatDouble: this.pushFloatDouble.bind(this),
-      pushTrue: this.pushTrue.bind(this),
-      pushFalse: this.pushFalse.bind(this),
-      pushUndefined: this.pushUndefined.bind(this),
-      pushNull: this.pushNull.bind(this),
-      pushInfinity: this.pushInfinity.bind(this),
-      pushInfinityNeg: this.pushInfinityNeg.bind(this),
-      pushNaN: this.pushNaN.bind(this),
-      pushNaNNeg: this.pushNaNNeg.bind(this),
-      pushArrayStart: this.pushArrayStart.bind(this),
-      pushArrayStartFixed: this.pushArrayStartFixed.bind(this),
-      pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),
-      pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),
-      pushObjectStart: this.pushObjectStart.bind(this),
-      pushObjectStartFixed: this.pushObjectStartFixed.bind(this),
-      pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),
-      pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),
-      pushByteString: this.pushByteString.bind(this),
-      pushByteStringStart: this.pushByteStringStart.bind(this),
-      pushUtf8String: this.pushUtf8String.bind(this),
-      pushUtf8StringStart: this.pushUtf8StringStart.bind(this),
-      pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),
-      pushTagUnassigned: this.pushTagUnassigned.bind(this),
-      pushTagStart: this.pushTagStart.bind(this),
-      pushTagStart4: this.pushTagStart4.bind(this),
-      pushTagStart8: this.pushTagStart8.bind(this),
-      pushBreak: this.pushBreak.bind(this)
-    }, this._heap);
-  }
-
-  get _depth() {
-    return this._parents.length;
-  }
-
-  get _currentParent() {
-    return this._parents[this._depth - 1];
-  }
-
-  get _ref() {
-    return this._currentParent.ref;
-  } // Finish the current parent
-
-
-  _closeParent() {
-    var p = this._parents.pop();
-
-    if (p.length > 0) {
-      throw new Error("Missing ".concat(p.length, " elements"));
-    }
-
-    switch (p.type) {
-      case c.PARENT.TAG:
-        this._push(this.createTag(p.ref[0], p.ref[1]));
-
-        break;
-
-      case c.PARENT.BYTE_STRING:
-        this._push(this.createByteString(p.ref, p.length));
-
-        break;
-
-      case c.PARENT.UTF8_STRING:
-        this._push(this.createUtf8String(p.ref, p.length));
-
-        break;
-
-      case c.PARENT.MAP:
-        if (p.values % 2 > 0) {
-          throw new Error('Odd number of elements in the map');
-        }
-
-        this._push(this.createMap(p.ref, p.length));
-
-        break;
-
-      case c.PARENT.OBJECT:
-        if (p.values % 2 > 0) {
-          throw new Error('Odd number of elements in the map');
-        }
-
-        this._push(this.createObject(p.ref, p.length));
-
-        break;
-
-      case c.PARENT.ARRAY:
-        this._push(this.createArray(p.ref, p.length));
-
-        break;
-
-      default:
-        break;
-    }
-
-    if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {
-      this._dec();
-    }
-  } // Reduce the expected length of the current parent by one
-
-
-  _dec() {
-    const p = this._currentParent; // The current parent does not know the epxected child length
-
-    if (p.length < 0) {
-      return;
-    }
-
-    p.length--; // All children were seen, we can close the current parent
-
-    if (p.length === 0) {
-      this._closeParent();
-    }
-  } // Push any value to the current parent
-
-
-  _push(val, hasChildren) {
-    const p = this._currentParent;
-    p.values++;
-
-    switch (p.type) {
-      case c.PARENT.ARRAY:
-      case c.PARENT.BYTE_STRING:
-      case c.PARENT.UTF8_STRING:
-        if (p.length > -1) {
-          this._ref[this._ref.length - p.length] = val;
-        } else {
-          this._ref.push(val);
-        }
-
-        this._dec();
-
-        break;
-
-      case c.PARENT.OBJECT:
-        if (p.tmpKey != null) {
-          this._ref[p.tmpKey] = val;
-          p.tmpKey = null;
-
-          this._dec();
-        } else {
-          p.tmpKey = val;
-
-          if (typeof p.tmpKey !== 'string') {
-            // too bad, convert to a Map
-            p.type = c.PARENT.MAP;
-            p.ref = utils.buildMap(p.ref);
-          }
-        }
-
-        break;
-
-      case c.PARENT.MAP:
-        if (p.tmpKey != null) {
-          this._ref.set(p.tmpKey, val);
-
-          p.tmpKey = null;
-
-          this._dec();
-        } else {
-          p.tmpKey = val;
-        }
-
-        break;
-
-      case c.PARENT.TAG:
-        this._ref.push(val);
-
-        if (!hasChildren) {
-          this._dec();
-        }
-
-        break;
-
-      default:
-        throw new Error('Unknown parent type');
-    }
-  } // Create a new parent in the parents list
-
-
-  _createParent(obj, type, len) {
-    this._parents[this._depth] = {
-      type: type,
-      length: len,
-      ref: obj,
-      values: 0,
-      tmpKey: null
-    };
-  } // Reset all state back to the beginning, also used for initiatlization
-
-
-  _reset() {
-    this._res = [];
-    this._parents = [{
-      type: c.PARENT.ARRAY,
-      length: -1,
-      ref: this._res,
-      values: 0,
-      tmpKey: null
-    }];
-  } // -- Interface to customize deoding behaviour
-
-
-  createTag(tagNumber, value) {
-    const typ = this._knownTags[tagNumber];
-
-    if (!typ) {
-      return new Tagged(tagNumber, value);
-    }
-
-    return typ(value);
-  }
-
-  createMap(obj, len) {
-    return obj;
-  }
-
-  createObject(obj, len) {
-    return obj;
-  }
-
-  createArray(arr, len) {
-    return arr;
-  }
-
-  createByteString(raw, len) {
-    return Buffer.concat(raw);
-  }
-
-  createByteStringFromHeap(start, end) {
-    if (start === end) {
-      return Buffer.alloc(0);
-    }
-
-    return Buffer.from(this._heap.slice(start, end));
-  }
-
-  createInt(val) {
-    return val;
-  }
-
-  createInt32(f, g) {
-    return utils.buildInt32(f, g);
-  }
-
-  createInt64(f1, f2, g1, g2) {
-    return utils.buildInt64(f1, f2, g1, g2);
-  }
-
-  createFloat(val) {
-    return val;
-  }
-
-  createFloatSingle(a, b, c, d) {
-    return ieee754.read([a, b, c, d], 0, false, 23, 4);
-  }
-
-  createFloatDouble(a, b, c, d, e, f, g, h) {
-    return ieee754.read([a, b, c, d, e, f, g, h], 0, false, 52, 8);
-  }
-
-  createInt32Neg(f, g) {
-    return -1 - utils.buildInt32(f, g);
-  }
-
-  createInt64Neg(f1, f2, g1, g2) {
-    const f = utils.buildInt32(f1, f2);
-    const g = utils.buildInt32(g1, g2);
-
-    if (f > c.MAX_SAFE_HIGH) {
-      return c.NEG_ONE.minus(new Bignumber(f).times(c.SHIFT32).plus(g));
-    }
-
-    return -1 - (f * c.SHIFT32 + g);
-  }
-
-  createTrue() {
-    return true;
-  }
-
-  createFalse() {
-    return false;
-  }
-
-  createNull() {
-    return null;
-  }
-
-  createUndefined() {
-    return undefined;
-  }
-
-  createInfinity() {
-    return Infinity;
-  }
-
-  createInfinityNeg() {
-    return -Infinity;
-  }
-
-  createNaN() {
-    return NaN;
-  }
-
-  createNaNNeg() {
-    return -NaN;
-  }
-
-  createUtf8String(raw, len) {
-    return raw.join('');
-  }
-
-  createUtf8StringFromHeap(start, end) {
-    if (start === end) {
-      return '';
-    }
-
-    return this._buffer.toString('utf8', start, end);
-  }
-
-  createSimpleUnassigned(val) {
-    return new Simple(val);
-  } // -- Interface for decoder.asm.js
-
-
-  pushInt(val) {
-    this._push(this.createInt(val));
-  }
-
-  pushInt32(f, g) {
-    this._push(this.createInt32(f, g));
-  }
-
-  pushInt64(f1, f2, g1, g2) {
-    this._push(this.createInt64(f1, f2, g1, g2));
-  }
-
-  pushFloat(val) {
-    this._push(this.createFloat(val));
-  }
-
-  pushFloatSingle(a, b, c, d) {
-    this._push(this.createFloatSingle(a, b, c, d));
-  }
-
-  pushFloatDouble(a, b, c, d, e, f, g, h) {
-    this._push(this.createFloatDouble(a, b, c, d, e, f, g, h));
-  }
-
-  pushInt32Neg(f, g) {
-    this._push(this.createInt32Neg(f, g));
-  }
-
-  pushInt64Neg(f1, f2, g1, g2) {
-    this._push(this.createInt64Neg(f1, f2, g1, g2));
-  }
-
-  pushTrue() {
-    this._push(this.createTrue());
-  }
-
-  pushFalse() {
-    this._push(this.createFalse());
-  }
-
-  pushNull() {
-    this._push(this.createNull());
-  }
-
-  pushUndefined() {
-    this._push(this.createUndefined());
-  }
-
-  pushInfinity() {
-    this._push(this.createInfinity());
-  }
-
-  pushInfinityNeg() {
-    this._push(this.createInfinityNeg());
-  }
-
-  pushNaN() {
-    this._push(this.createNaN());
-  }
-
-  pushNaNNeg() {
-    this._push(this.createNaNNeg());
-  }
-
-  pushArrayStart() {
-    this._createParent([], c.PARENT.ARRAY, -1);
-  }
-
-  pushArrayStartFixed(len) {
-    this._createArrayStartFixed(len);
-  }
-
-  pushArrayStartFixed32(len1, len2) {
-    const len = utils.buildInt32(len1, len2);
-
-    this._createArrayStartFixed(len);
-  }
-
-  pushArrayStartFixed64(len1, len2, len3, len4) {
-    const len = utils.buildInt64(len1, len2, len3, len4);
-
-    this._createArrayStartFixed(len);
-  }
-
-  pushObjectStart() {
-    this._createObjectStartFixed(-1);
-  }
-
-  pushObjectStartFixed(len) {
-    this._createObjectStartFixed(len);
-  }
-
-  pushObjectStartFixed32(len1, len2) {
-    const len = utils.buildInt32(len1, len2);
-
-    this._createObjectStartFixed(len);
-  }
-
-  pushObjectStartFixed64(len1, len2, len3, len4) {
-    const len = utils.buildInt64(len1, len2, len3, len4);
-
-    this._createObjectStartFixed(len);
-  }
-
-  pushByteStringStart() {
-    this._parents[this._depth] = {
-      type: c.PARENT.BYTE_STRING,
-      length: -1,
-      ref: [],
-      values: 0,
-      tmpKey: null
-    };
-  }
-
-  pushByteString(start, end) {
-    this._push(this.createByteStringFromHeap(start, end));
-  }
-
-  pushUtf8StringStart() {
-    this._parents[this._depth] = {
-      type: c.PARENT.UTF8_STRING,
-      length: -1,
-      ref: [],
-      values: 0,
-      tmpKey: null
-    };
-  }
-
-  pushUtf8String(start, end) {
-    this._push(this.createUtf8StringFromHeap(start, end));
-  }
-
-  pushSimpleUnassigned(val) {
-    this._push(this.createSimpleUnassigned(val));
-  }
-
-  pushTagStart(tag) {
-    this._parents[this._depth] = {
-      type: c.PARENT.TAG,
-      length: 1,
-      ref: [tag]
-    };
-  }
-
-  pushTagStart4(f, g) {
-    this.pushTagStart(utils.buildInt32(f, g));
-  }
-
-  pushTagStart8(f1, f2, g1, g2) {
-    this.pushTagStart(utils.buildInt64(f1, f2, g1, g2));
-  }
-
-  pushTagUnassigned(tagNumber) {
-    this._push(this.createTag(tagNumber));
-  }
-
-  pushBreak() {
-    if (this._currentParent.length > -1) {
-      throw new Error('Unexpected break');
-    }
-
-    this._closeParent();
-  }
-
-  _createObjectStartFixed(len) {
-    if (len === 0) {
-      this._push(this.createObject({}));
-
-      return;
-    }
-
-    this._createParent({}, c.PARENT.OBJECT, len);
-  }
-
-  _createArrayStartFixed(len) {
-    if (len === 0) {
-      this._push(this.createArray([]));
-
-      return;
-    }
-
-    this._createParent(new Array(len), c.PARENT.ARRAY, len);
-  }
-
-  _decode(input) {
-    if (input.byteLength === 0) {
-      throw new Error('Input too short');
-    }
-
-    this._reset();
-
-    this._heap8.set(input);
-
-    const code = this.parser.parse(input.byteLength);
-
-    if (this._depth > 1) {
-      while (this._currentParent.length === 0) {
-        this._closeParent();
-      }
-
-      if (this._depth > 1) {
-        throw new Error('Undeterminated nesting');
-      }
-    }
-
-    if (code > 0) {
-      throw new Error('Failed to parse');
-    }
-
-    if (this._res.length === 0) {
-      throw new Error('No valid result');
-    }
-  } // -- Public Interface
-
-
-  decodeFirst(input) {
-    this._decode(input);
-
-    return this._res[0];
-  }
-
-  decodeAll(input) {
-    this._decode(input);
-
-    return this._res;
-  }
-  /**
-   * Decode the first cbor object.
-   *
-   * @param {Buffer|string} input
-   * @param {string} [enc='hex'] - Encoding used if a string is passed.
-   * @returns {*}
-   */
-
-
-  static decode(input, enc) {
-    if (typeof input === 'string') {
-      input = Buffer.from(input, enc || 'hex');
-    }
-
-    const dec = new Decoder({
-      size: input.length
-    });
-    return dec.decodeFirst(input);
-  }
-  /**
-   * Decode all cbor objects.
-   *
-   * @param {Buffer|string} input
-   * @param {string} [enc='hex'] - Encoding used if a string is passed.
-   * @returns {Array<*>}
-   */
-
-
-  static decodeAll(input, enc) {
-    if (typeof input === 'string') {
-      input = Buffer.from(input, enc || 'hex');
-    }
-
-    const dec = new Decoder({
-      size: input.length
-    });
-    return dec.decodeAll(input);
-  }
-
-}
-
-Decoder.decodeFirst = Decoder.decode;
-module.exports = Decoder;
-/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)))
-
-/***/ }),
-/* 7 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-const constants = __webpack_require__(2);
-
-const MT = constants.MT;
-const SIMPLE = constants.SIMPLE;
-const SYMS = constants.SYMS;
-/**
- * A CBOR Simple Value that does not map onto a known constant.
- */
-
-class Simple {
-  /**
-   * Creates an instance of Simple.
-   *
-   * @param {integer} value - the simple value's integer value
-   */
-  constructor(value) {
-    if (typeof value !== 'number') {
-      throw new Error('Invalid Simple type: ' + typeof value);
-    }
-
-    if (value < 0 || value > 255 || (value | 0) !== value) {
-      throw new Error('value must be a small positive integer: ' + value);
-    }
-
-    this.value = value;
-  }
-  /**
-   * Debug string for simple value
-   *
-   * @returns {string} simple(value)
-   */
-
-
-  toString() {
-    return 'simple(' + this.value + ')';
-  }
-  /**
-   * Debug string for simple value
-   *
-   * @returns {string} simple(value)
-   */
-
-
-  inspect() {
-    return 'simple(' + this.value + ')';
-  }
-  /**
-   * Push the simple value onto the CBOR stream
-   *
-   * @param {cbor.Encoder} gen The generator to push onto
-   * @returns {number}
-   */
-
-
-  encodeCBOR(gen) {
-    return gen._pushInt(this.value, MT.SIMPLE_FLOAT);
-  }
-  /**
-   * Is the given object a Simple?
-   *
-   * @param {any} obj - object to test
-   * @returns {bool} - is it Simple?
-   */
-
-
-  static isSimple(obj) {
-    return obj instanceof Simple;
-  }
-  /**
-   * Decode from the CBOR additional information into a JavaScript value.
-   * If the CBOR item has no parent, return a "safe" symbol instead of
-   * `null` or `undefined`, so that the value can be passed through a
-   * stream in object mode.
-   *
-   * @param {Number} val - the CBOR additional info to convert
-   * @param {bool} hasParent - Does the CBOR item have a parent?
-   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value
-   */
-
-
-  static decode(val, hasParent) {
-    if (hasParent == null) {
-      hasParent = true;
-    }
-
-    switch (val) {
-      case SIMPLE.FALSE:
-        return false;
-
-      case SIMPLE.TRUE:
-        return true;
-
-      case SIMPLE.NULL:
-        if (hasParent) {
-          return null;
-        } else {
-          return SYMS.NULL;
-        }
-
-      case SIMPLE.UNDEFINED:
-        if (hasParent) {
-          return undefined;
-        } else {
-          return SYMS.UNDEFINED;
-        }
-
-      case -1:
-        if (!hasParent) {
-          throw new Error('Invalid BREAK');
-        }
-
-        return SYMS.BREAK;
-
-      default:
-        return new Simple(val);
-    }
-  }
-
-}
-
-module.exports = Simple;
-
-/***/ }),
-/* 8 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-/**
- * A CBOR tagged item, where the tag does not have semantics specified at the
- * moment, or those semantics threw an error during parsing. Typically this will
- * be an extension point you're not yet expecting.
- */
-
-class Tagged {
-  /**
-   * Creates an instance of Tagged.
-   *
-   * @param {Number} tag - the number of the tag
-   * @param {any} value - the value inside the tag
-   * @param {Error} err - the error that was thrown parsing the tag, or null
-   */
-  constructor(tag, value, err) {
-    this.tag = tag;
-    this.value = value;
-    this.err = err;
-
-    if (typeof this.tag !== 'number') {
-      throw new Error('Invalid tag type (' + typeof this.tag + ')');
-    }
-
-    if (this.tag < 0 || (this.tag | 0) !== this.tag) {
-      throw new Error('Tag must be a positive integer: ' + this.tag);
-    }
-  }
-  /**
-   * Convert to a String
-   *
-   * @returns {String} string of the form '1(2)'
-   */
-
-
-  toString() {
-    return "".concat(this.tag, "(").concat(JSON.stringify(this.value), ")");
-  }
-  /**
-   * Push the simple value onto the CBOR stream
-   *
-   * @param {cbor.Encoder} gen The generator to push onto
-   * @returns {number}
-   */
-
-
-  encodeCBOR(gen) {
-    gen._pushTag(this.tag);
-
-    return gen.pushAny(this.value);
-  }
-  /**
-   * If we have a converter for this type, do the conversion.  Some converters
-   * are built-in.  Additional ones can be passed in.  If you want to remove
-   * a built-in converter, pass a converter in whose value is 'null' instead
-   * of a function.
-   *
-   * @param {Object} converters - keys in the object are a tag number, the value
-   *   is a function that takes the decoded CBOR and returns a JavaScript value
-   *   of the appropriate type.  Throw an exception in the function on errors.
-   * @returns {any} - the converted item
-   */
-
-
-  convert(converters) {
-    var er, f;
-    f = converters != null ? converters[this.tag] : undefined;
-
-    if (typeof f !== 'function') {
-      f = Tagged['_tag' + this.tag];
-
-      if (typeof f !== 'function') {
-        return this;
-      }
-    }
-
-    try {
-      return f.call(Tagged, this.value);
-    } catch (error) {
-      er = error;
-      this.err = er;
-      return this;
-    }
-  }
-
-}
-
-module.exports = Tagged;
-
-/***/ }),
-/* 9 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-const {
-  URLWithLegacySupport,
-  format,
-  URLSearchParams,
-  defaultBase
-} = __webpack_require__(10);
-
-const relative = __webpack_require__(17);
-
-module.exports = {
-  URL: URLWithLegacySupport,
-  URLSearchParams,
-  format,
-  relative,
-  defaultBase
-};
-
-/***/ }),
-/* 10 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-const defaultBase = self.location ? self.location.protocol + '//' + self.location.host : '';
-const URL = self.URL;
-
-class URLWithLegacySupport {
-  constructor(url = '', base = defaultBase) {
-    this.super = new URL(url, base);
-    this.path = this.pathname + this.search;
-    this.auth = this.username && this.password ? this.username + ':' + this.password : null;
-    this.query = this.search && this.search.startsWith('?') ? this.search.slice(1) : null;
-  }
-
-  get hash() {
-    return this.super.hash;
-  }
-
-  get host() {
-    return this.super.host;
-  }
-
-  get hostname() {
-    return this.super.hostname;
-  }
-
-  get href() {
-    return this.super.href;
-  }
-
-  get origin() {
-    return this.super.origin;
-  }
-
-  get password() {
-    return this.super.password;
-  }
-
-  get pathname() {
-    return this.super.pathname;
-  }
-
-  get port() {
-    return this.super.port;
-  }
-
-  get protocol() {
-    return this.super.protocol;
-  }
-
-  get search() {
-    return this.super.search;
-  }
-
-  get searchParams() {
-    return this.super.searchParams;
-  }
-
-  get username() {
-    return this.super.username;
-  }
-
-  set hash(hash) {
-    this.super.hash = hash;
-  }
-
-  set host(host) {
-    this.super.host = host;
-  }
-
-  set hostname(hostname) {
-    this.super.hostname = hostname;
-  }
-
-  set href(href) {
-    this.super.href = href;
-  }
-
-  set origin(origin) {
-    this.super.origin = origin;
-  }
-
-  set password(password) {
-    this.super.password = password;
-  }
-
-  set pathname(pathname) {
-    this.super.pathname = pathname;
-  }
-
-  set port(port) {
-    this.super.port = port;
-  }
-
-  set protocol(protocol) {
-    this.super.protocol = protocol;
-  }
-
-  set search(search) {
-    this.super.search = search;
-  }
-
-  set searchParams(searchParams) {
-    this.super.searchParams = searchParams;
-  }
-
-  set username(username) {
-    this.super.username = username;
-  }
-
-  createObjectURL(o) {
-    return this.super.createObjectURL(o);
-  }
-
-  revokeObjectURL(o) {
-    this.super.revokeObjectURL(o);
-  }
-
-  toJSON() {
-    return this.super.toJSON();
-  }
-
-  toString() {
-    return this.super.toString();
-  }
-
-  format() {
-    return this.toString();
-  }
-
-}
-
-function format(obj) {
-  if (typeof obj === 'string') {
-    const url = new URL(obj);
-    return url.toString();
-  }
-
-  if (!(obj instanceof URL)) {
-    const userPass = obj.username && obj.password ? "".concat(obj.username, ":").concat(obj.password, "@") : '';
-    const auth = obj.auth ? obj.auth + '@' : '';
-    const port = obj.port ? ':' + obj.port : '';
-    const protocol = obj.protocol ? obj.protocol + '//' : '';
-    const host = obj.host || '';
-    const hostname = obj.hostname || '';
-    const search = obj.search || (obj.query ? '?' + obj.query : '');
-    const hash = obj.hash || '';
-    const pathname = obj.pathname || '';
-    const path = obj.path || pathname + search;
-    return "".concat(protocol).concat(userPass || auth).concat(host || hostname + port).concat(path).concat(hash);
-  }
-}
-
-module.exports = {
-  URLWithLegacySupport,
-  URLSearchParams: self.URLSearchParams,
-  defaultBase,
-  format
-};
-
-/***/ }),
-/* 11 */
-/***/ (function(module, exports, __webpack_require__) {
-
-module.exports = __webpack_require__(12);
-
-
-/***/ }),
-/* 12 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
- // exports.Commented = require('./commented')
-
-exports.Diagnose = __webpack_require__(13);
-exports.Decoder = __webpack_require__(6);
-exports.Encoder = __webpack_require__(18);
-exports.Simple = __webpack_require__(7);
-exports.Tagged = __webpack_require__(8); // exports.comment = exports.Commented.comment
-
-exports.decodeAll = exports.Decoder.decodeAll;
-exports.decodeFirst = exports.Decoder.decodeFirst;
-exports.diagnose = exports.Diagnose.diagnose;
-exports.encode = exports.Encoder.encode;
-exports.decode = exports.Decoder.decode;
-exports.leveldb = {
-  decode: exports.Decoder.decodeAll,
-  encode: exports.Encoder.encode,
-  buffer: true,
-  name: 'cbor'
-};
-
-/***/ }),
-/* 13 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-const {
-  Buffer
-} = __webpack_require__(0);
-
-const Decoder = __webpack_require__(6);
-
-const utils = __webpack_require__(3);
-/**
- * Output the diagnostic format from a stream of CBOR bytes.
- *
- */
-
-
-class Diagnose extends Decoder {
-  createTag(tagNumber, value) {
-    return "".concat(tagNumber, "(").concat(value, ")");
-  }
-
-  createInt(val) {
-    return super.createInt(val).toString();
-  }
-
-  createInt32(f, g) {
-    return super.createInt32(f, g).toString();
-  }
-
-  createInt64(f1, f2, g1, g2) {
-    return super.createInt64(f1, f2, g1, g2).toString();
-  }
-
-  createInt32Neg(f, g) {
-    return super.createInt32Neg(f, g).toString();
-  }
-
-  createInt64Neg(f1, f2, g1, g2) {
-    return super.createInt64Neg(f1, f2, g1, g2).toString();
-  }
-
-  createTrue() {
-    return 'true';
-  }
-
-  createFalse() {
-    return 'false';
-  }
-
-  createFloat(val) {
-    const fl = super.createFloat(val);
-
-    if (utils.isNegativeZero(val)) {
-      return '-0_1';
-    }
-
-    return "".concat(fl, "_1");
-  }
-
-  createFloatSingle(a, b, c, d) {
-    const fl = super.createFloatSingle(a, b, c, d);
-    return "".concat(fl, "_2");
-  }
-
-  createFloatDouble(a, b, c, d, e, f, g, h) {
-    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h);
-    return "".concat(fl, "_3");
-  }
-
-  createByteString(raw, len) {
-    const val = raw.join(', ');
-
-    if (len === -1) {
-      return "(_ ".concat(val, ")");
-    }
-
-    return "h'".concat(val);
-  }
-
-  createByteStringFromHeap(start, end) {
-    const val = Buffer.from(super.createByteStringFromHeap(start, end)).toString('hex');
-    return "h'".concat(val, "'");
-  }
-
-  createInfinity() {
-    return 'Infinity_1';
-  }
-
-  createInfinityNeg() {
-    return '-Infinity_1';
-  }
-
-  createNaN() {
-    return 'NaN_1';
-  }
-
-  createNaNNeg() {
-    return '-NaN_1';
-  }
-
-  createNull() {
-    return 'null';
-  }
-
-  createUndefined() {
-    return 'undefined';
-  }
-
-  createSimpleUnassigned(val) {
-    return "simple(".concat(val, ")");
-  }
-
-  createArray(arr, len) {
-    const val = super.createArray(arr, len);
-
-    if (len === -1) {
-      // indefinite
-      return "[_ ".concat(val.join(', '), "]");
-    }
-
-    return "[".concat(val.join(', '), "]");
-  }
-
-  createMap(map, len) {
-    const val = super.createMap(map);
-    const list = Array.from(val.keys()).reduce(collectObject(val), '');
-
-    if (len === -1) {
-      return "{_ ".concat(list, "}");
-    }
-
-    return "{".concat(list, "}");
-  }
-
-  createObject(obj, len) {
-    const val = super.createObject(obj);
-    const map = Object.keys(val).reduce(collectObject(val), '');
-
-    if (len === -1) {
-      return "{_ ".concat(map, "}");
-    }
-
-    return "{".concat(map, "}");
-  }
-
-  createUtf8String(raw, len) {
-    const val = raw.join(', ');
-
-    if (len === -1) {
-      return "(_ ".concat(val, ")");
-    }
-
-    return "\"".concat(val, "\"");
-  }
-
-  createUtf8StringFromHeap(start, end) {
-    const val = Buffer.from(super.createUtf8StringFromHeap(start, end)).toString('utf8');
-    return "\"".concat(val, "\"");
-  }
-
-  static diagnose(input, enc) {
-    if (typeof input === 'string') {
-      input = Buffer.from(input, enc || 'hex');
-    }
-
-    const dec = new Diagnose();
-    return dec.decodeFirst(input);
-  }
-
-}
-
-module.exports = Diagnose;
-
-function collectObject(val) {
-  return (acc, key) => {
-    if (acc) {
-      return "".concat(acc, ", ").concat(key, ": ").concat(val[key]);
-    }
-
-    return "".concat(key, ": ").concat(val[key]);
-  };
-}
-
-/***/ }),
-/* 14 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-exports.byteLength = byteLength;
-exports.toByteArray = toByteArray;
-exports.fromByteArray = fromByteArray;
-var lookup = [];
-var revLookup = [];
-var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
-var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
-
-for (var i = 0, len = code.length; i < len; ++i) {
-  lookup[i] = code[i];
-  revLookup[code.charCodeAt(i)] = i;
-} // Support decoding URL-safe base64 strings, as Node.js does.
-// See: https://en.wikipedia.org/wiki/Base64#URL_applications
-
-
-revLookup['-'.charCodeAt(0)] = 62;
-revLookup['_'.charCodeAt(0)] = 63;
-
-function getLens(b64) {
-  var len = b64.length;
-
-  if (len % 4 > 0) {
-    throw new Error('Invalid string. Length must be a multiple of 4');
-  } // Trim off extra bytes after placeholder bytes are found
-  // See: https://github.com/beatgammit/base64-js/issues/42
-
-
-  var validLen = b64.indexOf('=');
-  if (validLen === -1) validLen = len;
-  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
-  return [validLen, placeHoldersLen];
-} // base64 is 4/3 + up to two characters of the original data
-
-
-function byteLength(b64) {
-  var lens = getLens(b64);
-  var validLen = lens[0];
-  var placeHoldersLen = lens[1];
-  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
-}
-
-function _byteLength(b64, validLen, placeHoldersLen) {
-  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
-}
-
-function toByteArray(b64) {
-  var tmp;
-  var lens = getLens(b64);
-  var validLen = lens[0];
-  var placeHoldersLen = lens[1];
-  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
-  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars
-
-  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
-  var i;
-
-  for (i = 0; i < len; i += 4) {
-    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
-    arr[curByte++] = tmp >> 16 & 0xFF;
-    arr[curByte++] = tmp >> 8 & 0xFF;
-    arr[curByte++] = tmp & 0xFF;
-  }
-
-  if (placeHoldersLen === 2) {
-    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
-    arr[curByte++] = tmp & 0xFF;
-  }
-
-  if (placeHoldersLen === 1) {
-    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
-    arr[curByte++] = tmp >> 8 & 0xFF;
-    arr[curByte++] = tmp & 0xFF;
-  }
-
-  return arr;
-}
-
-function tripletToBase64(num) {
-  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
-}
-
-function encodeChunk(uint8, start, end) {
-  var tmp;
-  var output = [];
-
-  for (var i = start; i < end; i += 3) {
-    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
-    output.push(tripletToBase64(tmp));
-  }
-
-  return output.join('');
-}
-
-function fromByteArray(uint8) {
-  var tmp;
-  var len = uint8.length;
-  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
-
-  var parts = [];
-  var maxChunkLength = 16383; // must be multiple of 3
-  // go through the array every three bytes, we'll deal with trailing stuff later
-
-  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
-    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
-  } // pad the end with zeros, but make sure to not forget the extra bytes
-
-
-  if (extraBytes === 1) {
-    tmp = uint8[len - 1];
-    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
-  } else if (extraBytes === 2) {
-    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
-    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
-  }
-
-  return parts.join('');
-}
-
-/***/ }),
-/* 15 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-var toString = {}.toString;
-
-module.exports = Array.isArray || function (arr) {
-  return toString.call(arr) == '[object Array]';
-};
-
-/***/ }),
-/* 16 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-/* eslint-disable */
-module.exports = function decodeAsm(stdlib, foreign, buffer) {
-  'use asm'; // -- Imports
-
-  var heap = new stdlib.Uint8Array(buffer); // var log = foreign.log
-
-  var pushInt = foreign.pushInt;
-  var pushInt32 = foreign.pushInt32;
-  var pushInt32Neg = foreign.pushInt32Neg;
-  var pushInt64 = foreign.pushInt64;
-  var pushInt64Neg = foreign.pushInt64Neg;
-  var pushFloat = foreign.pushFloat;
-  var pushFloatSingle = foreign.pushFloatSingle;
-  var pushFloatDouble = foreign.pushFloatDouble;
-  var pushTrue = foreign.pushTrue;
-  var pushFalse = foreign.pushFalse;
-  var pushUndefined = foreign.pushUndefined;
-  var pushNull = foreign.pushNull;
-  var pushInfinity = foreign.pushInfinity;
-  var pushInfinityNeg = foreign.pushInfinityNeg;
-  var pushNaN = foreign.pushNaN;
-  var pushNaNNeg = foreign.pushNaNNeg;
-  var pushArrayStart = foreign.pushArrayStart;
-  var pushArrayStartFixed = foreign.pushArrayStartFixed;
-  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32;
-  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64;
-  var pushObjectStart = foreign.pushObjectStart;
-  var pushObjectStartFixed = foreign.pushObjectStartFixed;
-  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32;
-  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64;
-  var pushByteString = foreign.pushByteString;
-  var pushByteStringStart = foreign.pushByteStringStart;
-  var pushUtf8String = foreign.pushUtf8String;
-  var pushUtf8StringStart = foreign.pushUtf8StringStart;
-  var pushSimpleUnassigned = foreign.pushSimpleUnassigned;
-  var pushTagStart = foreign.pushTagStart;
-  var pushTagStart4 = foreign.pushTagStart4;
-  var pushTagStart8 = foreign.pushTagStart8;
-  var pushTagUnassigned = foreign.pushTagUnassigned;
-  var pushBreak = foreign.pushBreak;
-  var pow = stdlib.Math.pow; // -- Constants
-  // -- Mutable Variables
-
-  var offset = 0;
-  var inputLength = 0;
-  var code = 0; // Decode a cbor string represented as Uint8Array
-  // which is allocated on the heap from 0 to inputLength
-  //
-  // input - Int
-  //
-  // Returns Code - Int,
-  // Success = 0
-  // Error > 0
-
-  function parse(input) {
-    input = input | 0;
-    offset = 0;
-    inputLength = input;
-
-    while ((offset | 0) < (inputLength | 0)) {
-      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0;
-
-      if ((code | 0) > 0) {
-        break;
-      }
-    }
-
-    return code | 0;
-  } // -- Helper Function
-
-
-  function checkOffset(n) {
-    n = n | 0;
-
-    if (((offset | 0) + (n | 0) | 0) < (inputLength | 0)) {
-      return 0;
-    }
-
-    return 1;
-  }
-
-  function readUInt16(n) {
-    n = n | 0;
-    return heap[n | 0] << 8 | heap[n + 1 | 0] | 0;
-  }
-
-  function readUInt32(n) {
-    n = n | 0;
-    return heap[n | 0] << 24 | heap[n + 1 | 0] << 16 | heap[n + 2 | 0] << 8 | heap[n + 3 | 0] | 0;
-  } // -- Initial Byte Handlers
-
-
-  function INT_P(octet) {
-    octet = octet | 0;
-    pushInt(octet | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function UINT_P_8(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(1) | 0) {
-      return 1;
-    }
-
-    pushInt(heap[offset + 1 | 0] | 0);
-    offset = offset + 2 | 0;
-    return 0;
-  }
-
-  function UINT_P_16(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(2) | 0) {
-      return 1;
-    }
-
-    pushInt(readUInt16(offset + 1 | 0) | 0);
-    offset = offset + 3 | 0;
-    return 0;
-  }
-
-  function UINT_P_32(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(4) | 0) {
-      return 1;
-    }
-
-    pushInt32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
-    offset = offset + 5 | 0;
-    return 0;
-  }
-
-  function UINT_P_64(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(8) | 0) {
-      return 1;
-    }
-
-    pushInt64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
-    offset = offset + 9 | 0;
-    return 0;
-  }
-
-  function INT_N(octet) {
-    octet = octet | 0;
-    pushInt(-1 - (octet - 32 | 0) | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function UINT_N_8(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(1) | 0) {
-      return 1;
-    }
-
-    pushInt(-1 - (heap[offset + 1 | 0] | 0) | 0);
-    offset = offset + 2 | 0;
-    return 0;
-  }
-
-  function UINT_N_16(octet) {
-    octet = octet | 0;
-    var val = 0;
-
-    if (checkOffset(2) | 0) {
-      return 1;
-    }
-
-    val = readUInt16(offset + 1 | 0) | 0;
-    pushInt(-1 - (val | 0) | 0);
-    offset = offset + 3 | 0;
-    return 0;
-  }
-
-  function UINT_N_32(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(4) | 0) {
-      return 1;
-    }
-
-    pushInt32Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
-    offset = offset + 5 | 0;
-    return 0;
-  }
-
-  function UINT_N_64(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(8) | 0) {
-      return 1;
-    }
-
-    pushInt64Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
-    offset = offset + 9 | 0;
-    return 0;
-  }
-
-  function BYTE_STRING(octet) {
-    octet = octet | 0;
-    var start = 0;
-    var end = 0;
-    var step = 0;
-    step = octet - 64 | 0;
-
-    if (checkOffset(step | 0) | 0) {
-      return 1;
-    }
-
-    start = offset + 1 | 0;
-    end = (offset + 1 | 0) + (step | 0) | 0;
-    pushByteString(start | 0, end | 0);
-    offset = end | 0;
-    return 0;
-  }
-
-  function BYTE_STRING_8(octet) {
-    octet = octet | 0;
-    var start = 0;
-    var end = 0;
-    var length = 0;
-
-    if (checkOffset(1) | 0) {
-      return 1;
-    }
-
-    length = heap[offset + 1 | 0] | 0;
-    start = offset + 2 | 0;
-    end = (offset + 2 | 0) + (length | 0) | 0;
-
-    if (checkOffset(length + 1 | 0) | 0) {
-      return 1;
-    }
-
-    pushByteString(start | 0, end | 0);
-    offset = end | 0;
-    return 0;
-  }
-
-  function BYTE_STRING_16(octet) {
-    octet = octet | 0;
-    var start = 0;
-    var end = 0;
-    var length = 0;
-
-    if (checkOffset(2) | 0) {
-      return 1;
-    }
-
-    length = readUInt16(offset + 1 | 0) | 0;
-    start = offset + 3 | 0;
-    end = (offset + 3 | 0) + (length | 0) | 0;
-
-    if (checkOffset(length + 2 | 0) | 0) {
-      return 1;
-    }
-
-    pushByteString(start | 0, end | 0);
-    offset = end | 0;
-    return 0;
-  }
-
-  function BYTE_STRING_32(octet) {
-    octet = octet | 0;
-    var start = 0;
-    var end = 0;
-    var length = 0;
-
-    if (checkOffset(4) | 0) {
-      return 1;
-    }
-
-    length = readUInt32(offset + 1 | 0) | 0;
-    start = offset + 5 | 0;
-    end = (offset + 5 | 0) + (length | 0) | 0;
-
-    if (checkOffset(length + 4 | 0) | 0) {
-      return 1;
-    }
-
-    pushByteString(start | 0, end | 0);
-    offset = end | 0;
-    return 0;
-  }
-
-  function BYTE_STRING_64(octet) {
-    // NOT IMPLEMENTED
-    octet = octet | 0;
-    return 1;
-  }
-
-  function BYTE_STRING_BREAK(octet) {
-    octet = octet | 0;
-    pushByteStringStart();
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function UTF8_STRING(octet) {
-    octet = octet | 0;
-    var start = 0;
-    var end = 0;
-    var step = 0;
-    step = octet - 96 | 0;
-
-    if (checkOffset(step | 0) | 0) {
-      return 1;
-    }
-
-    start = offset + 1 | 0;
-    end = (offset + 1 | 0) + (step | 0) | 0;
-    pushUtf8String(start | 0, end | 0);
-    offset = end | 0;
-    return 0;
-  }
-
-  function UTF8_STRING_8(octet) {
-    octet = octet | 0;
-    var start = 0;
-    var end = 0;
-    var length = 0;
-
-    if (checkOffset(1) | 0) {
-      return 1;
-    }
-
-    length = heap[offset + 1 | 0] | 0;
-    start = offset + 2 | 0;
-    end = (offset + 2 | 0) + (length | 0) | 0;
-
-    if (checkOffset(length + 1 | 0) | 0) {
-      return 1;
-    }
-
-    pushUtf8String(start | 0, end | 0);
-    offset = end | 0;
-    return 0;
-  }
-
-  function UTF8_STRING_16(octet) {
-    octet = octet | 0;
-    var start = 0;
-    var end = 0;
-    var length = 0;
-
-    if (checkOffset(2) | 0) {
-      return 1;
-    }
-
-    length = readUInt16(offset + 1 | 0) | 0;
-    start = offset + 3 | 0;
-    end = (offset + 3 | 0) + (length | 0) | 0;
-
-    if (checkOffset(length + 2 | 0) | 0) {
-      return 1;
-    }
-
-    pushUtf8String(start | 0, end | 0);
-    offset = end | 0;
-    return 0;
-  }
-
-  function UTF8_STRING_32(octet) {
-    octet = octet | 0;
-    var start = 0;
-    var end = 0;
-    var length = 0;
-
-    if (checkOffset(4) | 0) {
-      return 1;
-    }
-
-    length = readUInt32(offset + 1 | 0) | 0;
-    start = offset + 5 | 0;
-    end = (offset + 5 | 0) + (length | 0) | 0;
-
-    if (checkOffset(length + 4 | 0) | 0) {
-      return 1;
-    }
-
-    pushUtf8String(start | 0, end | 0);
-    offset = end | 0;
-    return 0;
-  }
-
-  function UTF8_STRING_64(octet) {
-    // NOT IMPLEMENTED
-    octet = octet | 0;
-    return 1;
-  }
-
-  function UTF8_STRING_BREAK(octet) {
-    octet = octet | 0;
-    pushUtf8StringStart();
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function ARRAY(octet) {
-    octet = octet | 0;
-    pushArrayStartFixed(octet - 128 | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function ARRAY_8(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(1) | 0) {
-      return 1;
-    }
-
-    pushArrayStartFixed(heap[offset + 1 | 0] | 0);
-    offset = offset + 2 | 0;
-    return 0;
-  }
-
-  function ARRAY_16(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(2) | 0) {
-      return 1;
-    }
-
-    pushArrayStartFixed(readUInt16(offset + 1 | 0) | 0);
-    offset = offset + 3 | 0;
-    return 0;
-  }
-
-  function ARRAY_32(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(4) | 0) {
-      return 1;
-    }
-
-    pushArrayStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
-    offset = offset + 5 | 0;
-    return 0;
-  }
-
-  function ARRAY_64(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(8) | 0) {
-      return 1;
-    }
-
-    pushArrayStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
-    offset = offset + 9 | 0;
-    return 0;
-  }
-
-  function ARRAY_BREAK(octet) {
-    octet = octet | 0;
-    pushArrayStart();
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function MAP(octet) {
-    octet = octet | 0;
-    var step = 0;
-    step = octet - 160 | 0;
-
-    if (checkOffset(step | 0) | 0) {
-      return 1;
-    }
-
-    pushObjectStartFixed(step | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function MAP_8(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(1) | 0) {
-      return 1;
-    }
-
-    pushObjectStartFixed(heap[offset + 1 | 0] | 0);
-    offset = offset + 2 | 0;
-    return 0;
-  }
-
-  function MAP_16(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(2) | 0) {
-      return 1;
-    }
-
-    pushObjectStartFixed(readUInt16(offset + 1 | 0) | 0);
-    offset = offset + 3 | 0;
-    return 0;
-  }
-
-  function MAP_32(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(4) | 0) {
-      return 1;
-    }
-
-    pushObjectStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
-    offset = offset + 5 | 0;
-    return 0;
-  }
-
-  function MAP_64(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(8) | 0) {
-      return 1;
-    }
-
-    pushObjectStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
-    offset = offset + 9 | 0;
-    return 0;
-  }
-
-  function MAP_BREAK(octet) {
-    octet = octet | 0;
-    pushObjectStart();
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function TAG_KNOWN(octet) {
-    octet = octet | 0;
-    pushTagStart(octet - 192 | 0 | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function TAG_BIGNUM_POS(octet) {
-    octet = octet | 0;
-    pushTagStart(octet | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function TAG_BIGNUM_NEG(octet) {
-    octet = octet | 0;
-    pushTagStart(octet | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function TAG_FRAC(octet) {
-    octet = octet | 0;
-    pushTagStart(octet | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function TAG_BIGNUM_FLOAT(octet) {
-    octet = octet | 0;
-    pushTagStart(octet | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function TAG_UNASSIGNED(octet) {
-    octet = octet | 0;
-    pushTagStart(octet - 192 | 0 | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function TAG_BASE64_URL(octet) {
-    octet = octet | 0;
-    pushTagStart(octet | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function TAG_BASE64(octet) {
-    octet = octet | 0;
-    pushTagStart(octet | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function TAG_BASE16(octet) {
-    octet = octet | 0;
-    pushTagStart(octet | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function TAG_MORE_1(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(1) | 0) {
-      return 1;
-    }
-
-    pushTagStart(heap[offset + 1 | 0] | 0);
-    offset = offset + 2 | 0;
-    return 0;
-  }
-
-  function TAG_MORE_2(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(2) | 0) {
-      return 1;
-    }
-
-    pushTagStart(readUInt16(offset + 1 | 0) | 0);
-    offset = offset + 3 | 0;
-    return 0;
-  }
-
-  function TAG_MORE_4(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(4) | 0) {
-      return 1;
-    }
-
-    pushTagStart4(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
-    offset = offset + 5 | 0;
-    return 0;
-  }
-
-  function TAG_MORE_8(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(8) | 0) {
-      return 1;
-    }
-
-    pushTagStart8(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
-    offset = offset + 9 | 0;
-    return 0;
-  }
-
-  function SIMPLE_UNASSIGNED(octet) {
-    octet = octet | 0;
-    pushSimpleUnassigned((octet | 0) - 224 | 0);
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function SIMPLE_FALSE(octet) {
-    octet = octet | 0;
-    pushFalse();
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function SIMPLE_TRUE(octet) {
-    octet = octet | 0;
-    pushTrue();
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function SIMPLE_NULL(octet) {
-    octet = octet | 0;
-    pushNull();
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function SIMPLE_UNDEFINED(octet) {
-    octet = octet | 0;
-    pushUndefined();
-    offset = offset + 1 | 0;
-    return 0;
-  }
-
-  function SIMPLE_BYTE(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(1) | 0) {
-      return 1;
-    }
-
-    pushSimpleUnassigned(heap[offset + 1 | 0] | 0);
-    offset = offset + 2 | 0;
-    return 0;
-  }
-
-  function SIMPLE_FLOAT_HALF(octet) {
-    octet = octet | 0;
-    var f = 0;
-    var g = 0;
-    var sign = 1.0;
-    var exp = 0.0;
-    var mant = 0.0;
-    var r = 0.0;
-
-    if (checkOffset(2) | 0) {
-      return 1;
-    }
-
-    f = heap[offset + 1 | 0] | 0;
-    g = heap[offset + 2 | 0] | 0;
-
-    if ((f | 0) & 0x80) {
-      sign = -1.0;
-    }
-
-    exp = +(((f | 0) & 0x7C) >> 2);
-    mant = +(((f | 0) & 0x03) << 8 | g);
-
-    if (+exp == 0.0) {
-      pushFloat(+(+sign * +5.9604644775390625e-8 * +mant));
-    } else if (+exp == 31.0) {
-      if (+sign == 1.0) {
-        if (+mant > 0.0) {
-          pushNaN();
-        } else {
-          pushInfinity();
-        }
-      } else {
-        if (+mant > 0.0) {
-          pushNaNNeg();
-        } else {
-          pushInfinityNeg();
-        }
-      }
-    } else {
-      pushFloat(+(+sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)));
-    }
-
-    offset = offset + 3 | 0;
-    return 0;
-  }
-
-  function SIMPLE_FLOAT_SINGLE(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(4) | 0) {
-      return 1;
-    }
-
-    pushFloatSingle(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0);
-    offset = offset + 5 | 0;
-    return 0;
-  }
-
-  function SIMPLE_FLOAT_DOUBLE(octet) {
-    octet = octet | 0;
-
-    if (checkOffset(8) | 0) {
-      return 1;
-    }
-
-    pushFloatDouble(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0, heap[offset + 5 | 0] | 0, heap[offset + 6 | 0] | 0, heap[offset + 7 | 0] | 0, heap[offset + 8 | 0] | 0);
-    offset = offset + 9 | 0;
-    return 0;
-  }
-
-  function ERROR(octet) {
-    octet = octet | 0;
-    return 1;
-  }
-
-  function BREAK(octet) {
-    octet = octet | 0;
-    pushBreak();
-    offset = offset + 1 | 0;
-    return 0;
-  } // -- Jump Table
-
-
-  var jumpTable = [// Integer 0x00..0x17 (0..23)
-  INT_P, // 0x00
-  INT_P, // 0x01
-  INT_P, // 0x02
-  INT_P, // 0x03
-  INT_P, // 0x04
-  INT_P, // 0x05
-  INT_P, // 0x06
-  INT_P, // 0x07
-  INT_P, // 0x08
-  INT_P, // 0x09
-  INT_P, // 0x0A
-  INT_P, // 0x0B
-  INT_P, // 0x0C
-  INT_P, // 0x0D
-  INT_P, // 0x0E
-  INT_P, // 0x0F
-  INT_P, // 0x10
-  INT_P, // 0x11
-  INT_P, // 0x12
-  INT_P, // 0x13
-  INT_P, // 0x14
-  INT_P, // 0x15
-  INT_P, // 0x16
-  INT_P, // 0x17
-  // Unsigned integer (one-byte uint8_t follows)
-  UINT_P_8, // 0x18
-  // Unsigned integer (two-byte uint16_t follows)
-  UINT_P_16, // 0x19
-  // Unsigned integer (four-byte uint32_t follows)
-  UINT_P_32, // 0x1a
-  // Unsigned integer (eight-byte uint64_t follows)
-  UINT_P_64, // 0x1b
-  ERROR, // 0x1c
-  ERROR, // 0x1d
-  ERROR, // 0x1e
-  ERROR, // 0x1f
-  // Negative integer -1-0x00..-1-0x17 (-1..-24)
-  INT_N, // 0x20
-  INT_N, // 0x21
-  INT_N, // 0x22
-  INT_N, // 0x23
-  INT_N, // 0x24
-  INT_N, // 0x25
-  INT_N, // 0x26
-  INT_N, // 0x27
-  INT_N, // 0x28
-  INT_N, // 0x29
-  INT_N, // 0x2A
-  INT_N, // 0x2B
-  INT_N, // 0x2C
-  INT_N, // 0x2D
-  INT_N, // 0x2E
-  INT_N, // 0x2F
-  INT_N, // 0x30
-  INT_N, // 0x31
-  INT_N, // 0x32
-  INT_N, // 0x33
-  INT_N, // 0x34
-  INT_N, // 0x35
-  INT_N, // 0x36
-  INT_N, // 0x37
-  // Negative integer -1-n (one-byte uint8_t for n follows)
-  UINT_N_8, // 0x38
-  // Negative integer -1-n (two-byte uint16_t for n follows)
-  UINT_N_16, // 0x39
-  // Negative integer -1-n (four-byte uint32_t for nfollows)
-  UINT_N_32, // 0x3a
-  // Negative integer -1-n (eight-byte uint64_t for n follows)
-  UINT_N_64, // 0x3b
-  ERROR, // 0x3c
-  ERROR, // 0x3d
-  ERROR, // 0x3e
-  ERROR, // 0x3f
-  // byte string (0x00..0x17 bytes follow)
-  BYTE_STRING, // 0x40
-  BYTE_STRING, // 0x41
-  BYTE_STRING, // 0x42
-  BYTE_STRING, // 0x43
-  BYTE_STRING, // 0x44
-  BYTE_STRING, // 0x45
-  BYTE_STRING, // 0x46
-  BYTE_STRING, // 0x47
-  BYTE_STRING, // 0x48
-  BYTE_STRING, // 0x49
-  BYTE_STRING, // 0x4A
-  BYTE_STRING, // 0x4B
-  BYTE_STRING, // 0x4C
-  BYTE_STRING, // 0x4D
-  BYTE_STRING, // 0x4E
-  BYTE_STRING, // 0x4F
-  BYTE_STRING, // 0x50
-  BYTE_STRING, // 0x51
-  BYTE_STRING, // 0x52
-  BYTE_STRING, // 0x53
-  BYTE_STRING, // 0x54
-  BYTE_STRING, // 0x55
-  BYTE_STRING, // 0x56
-  BYTE_STRING, // 0x57
-  // byte string (one-byte uint8_t for n, and then n bytes follow)
-  BYTE_STRING_8, // 0x58
-  // byte string (two-byte uint16_t for n, and then n bytes follow)
-  BYTE_STRING_16, // 0x59
-  // byte string (four-byte uint32_t for n, and then n bytes follow)
-  BYTE_STRING_32, // 0x5a
-  // byte string (eight-byte uint64_t for n, and then n bytes follow)
-  BYTE_STRING_64, // 0x5b
-  ERROR, // 0x5c
-  ERROR, // 0x5d
-  ERROR, // 0x5e
-  // byte string, byte strings follow, terminated by "break"
-  BYTE_STRING_BREAK, // 0x5f
-  // UTF-8 string (0x00..0x17 bytes follow)
-  UTF8_STRING, // 0x60
-  UTF8_STRING, // 0x61
-  UTF8_STRING, // 0x62
-  UTF8_STRING, // 0x63
-  UTF8_STRING, // 0x64
-  UTF8_STRING, // 0x65
-  UTF8_STRING, // 0x66
-  UTF8_STRING, // 0x67
-  UTF8_STRING, // 0x68
-  UTF8_STRING, // 0x69
-  UTF8_STRING, // 0x6A
-  UTF8_STRING, // 0x6B
-  UTF8_STRING, // 0x6C
-  UTF8_STRING, // 0x6D
-  UTF8_STRING, // 0x6E
-  UTF8_STRING, // 0x6F
-  UTF8_STRING, // 0x70
-  UTF8_STRING, // 0x71
-  UTF8_STRING, // 0x72
-  UTF8_STRING, // 0x73
-  UTF8_STRING, // 0x74
-  UTF8_STRING, // 0x75
-  UTF8_STRING, // 0x76
-  UTF8_STRING, // 0x77
-  // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)
-  UTF8_STRING_8, // 0x78
-  // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)
-  UTF8_STRING_16, // 0x79
-  // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)
-  UTF8_STRING_32, // 0x7a
-  // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)
-  UTF8_STRING_64, // 0x7b
-  // UTF-8 string, UTF-8 strings follow, terminated by "break"
-  ERROR, // 0x7c
-  ERROR, // 0x7d
-  ERROR, // 0x7e
-  UTF8_STRING_BREAK, // 0x7f
-  // array (0x00..0x17 data items follow)
-  ARRAY, // 0x80
-  ARRAY, // 0x81
-  ARRAY, // 0x82
-  ARRAY, // 0x83
-  ARRAY, // 0x84
-  ARRAY, // 0x85
-  ARRAY, // 0x86
-  ARRAY, // 0x87
-  ARRAY, // 0x88
-  ARRAY, // 0x89
-  ARRAY, // 0x8A
-  ARRAY, // 0x8B
-  ARRAY, // 0x8C
-  ARRAY, // 0x8D
-  ARRAY, // 0x8E
-  ARRAY, // 0x8F
-  ARRAY, // 0x90
-  ARRAY, // 0x91
-  ARRAY, // 0x92
-  ARRAY, // 0x93
-  ARRAY, // 0x94
-  ARRAY, // 0x95
-  ARRAY, // 0x96
-  ARRAY, // 0x97
-  // array (one-byte uint8_t fo, and then n data items follow)
-  ARRAY_8, // 0x98
-  // array (two-byte uint16_t for n, and then n data items follow)
-  ARRAY_16, // 0x99
-  // array (four-byte uint32_t for n, and then n data items follow)
-  ARRAY_32, // 0x9a
-  // array (eight-byte uint64_t for n, and then n data items follow)
-  ARRAY_64, // 0x9b
-  // array, data items follow, terminated by "break"
-  ERROR, // 0x9c
-  ERROR, // 0x9d
-  ERROR, // 0x9e
-  ARRAY_BREAK, // 0x9f
-  // map (0x00..0x17 pairs of data items follow)
-  MAP, // 0xa0
-  MAP, // 0xa1
-  MAP, // 0xa2
-  MAP, // 0xa3
-  MAP, // 0xa4
-  MAP, // 0xa5
-  MAP, // 0xa6
-  MAP, // 0xa7
-  MAP, // 0xa8
-  MAP, // 0xa9
-  MAP, // 0xaA
-  MAP, // 0xaB
-  MAP, // 0xaC
-  MAP, // 0xaD
-  MAP, // 0xaE
-  MAP, // 0xaF
-  MAP, // 0xb0
-  MAP, // 0xb1
-  MAP, // 0xb2
-  MAP, // 0xb3
-  MAP, // 0xb4
-  MAP, // 0xb5
-  MAP, // 0xb6
-  MAP, // 0xb7
-  // map (one-byte uint8_t for n, and then n pairs of data items follow)
-  MAP_8, // 0xb8
-  // map (two-byte uint16_t for n, and then n pairs of data items follow)
-  MAP_16, // 0xb9
-  // map (four-byte uint32_t for n, and then n pairs of data items follow)
-  MAP_32, // 0xba
-  // map (eight-byte uint64_t for n, and then n pairs of data items follow)
-  MAP_64, // 0xbb
-  ERROR, // 0xbc
-  ERROR, // 0xbd
-  ERROR, // 0xbe
-  // map, pairs of data items follow, terminated by "break"
-  MAP_BREAK, // 0xbf
-  // Text-based date/time (data item follows; see Section 2.4.1)
-  TAG_KNOWN, // 0xc0
-  // Epoch-based date/time (data item follows; see Section 2.4.1)
-  TAG_KNOWN, // 0xc1
-  // Positive bignum (data item "byte string" follows)
-  TAG_KNOWN, // 0xc2
-  // Negative bignum (data item "byte string" follows)
-  TAG_KNOWN, // 0xc3
-  // Decimal Fraction (data item "array" follows; see Section 2.4.3)
-  TAG_KNOWN, // 0xc4
-  // Bigfloat (data item "array" follows; see Section 2.4.3)
-  TAG_KNOWN, // 0xc5
-  // (tagged item)
-  TAG_UNASSIGNED, // 0xc6
-  TAG_UNASSIGNED, // 0xc7
-  TAG_UNASSIGNED, // 0xc8
-  TAG_UNASSIGNED, // 0xc9
-  TAG_UNASSIGNED, // 0xca
-  TAG_UNASSIGNED, // 0xcb
-  TAG_UNASSIGNED, // 0xcc
-  TAG_UNASSIGNED, // 0xcd
-  TAG_UNASSIGNED, // 0xce
-  TAG_UNASSIGNED, // 0xcf
-  TAG_UNASSIGNED, // 0xd0
-  TAG_UNASSIGNED, // 0xd1
-  TAG_UNASSIGNED, // 0xd2
-  TAG_UNASSIGNED, // 0xd3
-  TAG_UNASSIGNED, // 0xd4
-  // Expected Conversion (data item follows; see Section 2.4.4.2)
-  TAG_UNASSIGNED, // 0xd5
-  TAG_UNASSIGNED, // 0xd6
-  TAG_UNASSIGNED, // 0xd7
-  // (more tagged items, 1/2/4/8 bytes and then a data item follow)
-  TAG_MORE_1, // 0xd8
-  TAG_MORE_2, // 0xd9
-  TAG_MORE_4, // 0xda
-  TAG_MORE_8, // 0xdb
-  ERROR, // 0xdc
-  ERROR, // 0xdd
-  ERROR, // 0xde
-  ERROR, // 0xdf
-  // (simple value)
-  SIMPLE_UNASSIGNED, // 0xe0
-  SIMPLE_UNASSIGNED, // 0xe1
-  SIMPLE_UNASSIGNED, // 0xe2
-  SIMPLE_UNASSIGNED, // 0xe3
-  SIMPLE_UNASSIGNED, // 0xe4
-  SIMPLE_UNASSIGNED, // 0xe5
-  SIMPLE_UNASSIGNED, // 0xe6
-  SIMPLE_UNASSIGNED, // 0xe7
-  SIMPLE_UNASSIGNED, // 0xe8
-  SIMPLE_UNASSIGNED, // 0xe9
-  SIMPLE_UNASSIGNED, // 0xea
-  SIMPLE_UNASSIGNED, // 0xeb
-  SIMPLE_UNASSIGNED, // 0xec
-  SIMPLE_UNASSIGNED, // 0xed
-  SIMPLE_UNASSIGNED, // 0xee
-  SIMPLE_UNASSIGNED, // 0xef
-  SIMPLE_UNASSIGNED, // 0xf0
-  SIMPLE_UNASSIGNED, // 0xf1
-  SIMPLE_UNASSIGNED, // 0xf2
-  SIMPLE_UNASSIGNED, // 0xf3
-  // False
-  SIMPLE_FALSE, // 0xf4
-  // True
-  SIMPLE_TRUE, // 0xf5
-  // Null
-  SIMPLE_NULL, // 0xf6
-  // Undefined
-  SIMPLE_UNDEFINED, // 0xf7
-  // (simple value, one byte follows)
-  SIMPLE_BYTE, // 0xf8
-  // Half-Precision Float (two-byte IEEE 754)
-  SIMPLE_FLOAT_HALF, // 0xf9
-  // Single-Precision Float (four-byte IEEE 754)
-  SIMPLE_FLOAT_SINGLE, // 0xfa
-  // Double-Precision Float (eight-byte IEEE 754)
-  SIMPLE_FLOAT_DOUBLE, // 0xfb
-  ERROR, // 0xfc
-  ERROR, // 0xfd
-  ERROR, // 0xfe
-  // "break" stop code
-  BREAK // 0xff
-  ]; // --
-
-  return {
-    parse: parse
-  };
-};
-
-/***/ }),
-/* 17 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-const {
-  URLWithLegacySupport,
-  format
-} = __webpack_require__(10);
-
-module.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {
-  let protocol = location.protocol ? location.protocol.replace(':', '') : 'http'; // Check protocol map
-
-  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';
-  let urlParsed;
-
-  try {
-    urlParsed = new URLWithLegacySupport(url);
-  } catch (err) {
-    urlParsed = {};
-  }
-
-  const base = Object.assign({}, location, {
-    protocol: protocol || urlParsed.protocol,
-    host: location.host || urlParsed.host
-  });
-  return new URLWithLegacySupport(url, format(base)).toString();
-};
-
-/***/ }),
-/* 18 */
-/***/ (function(module, exports, __webpack_require__) {
-
-"use strict";
-
-
-const {
-  Buffer
-} = __webpack_require__(0);
-
-const {
-  URL
-} = __webpack_require__(9);
-
-const Bignumber = __webpack_require__(1).BigNumber;
-
-const utils = __webpack_require__(3);
-
-const constants = __webpack_require__(2);
-
-const MT = constants.MT;
-const NUMBYTES = constants.NUMBYTES;
-const SHIFT32 = constants.SHIFT32;
-const SYMS = constants.SYMS;
-const TAG = constants.TAG;
-const HALF = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.TWO;
-const FLOAT = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.FOUR;
-const DOUBLE = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.EIGHT;
-const TRUE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.TRUE;
-const FALSE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.FALSE;
-const UNDEFINED = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.UNDEFINED;
-const NULL = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.NULL;
-const MAXINT_BN = new Bignumber('0x20000000000000');
-const BUF_NAN = Buffer.from('f97e00', 'hex');
-const BUF_INF_NEG = Buffer.from('f9fc00', 'hex');
-const BUF_INF_POS = Buffer.from('f97c00', 'hex');
-
-function toType(obj) {
-  // [object Type]
-  // --------8---1
-  return {}.toString.call(obj).slice(8, -1);
-}
-/**
- * Transform JavaScript values into CBOR bytes
- *
- */
-
-
-class Encoder {
-  /**
-   * @param {Object} [options={}]
-   * @param {function(Buffer)} options.stream
-   */
-  constructor(options) {
-    options = options || {};
-    this.streaming = typeof options.stream === 'function';
-    this.onData = options.stream;
-    this.semanticTypes = [[URL, this._pushUrl], [Bignumber, this._pushBigNumber]];
-    const addTypes = options.genTypes || [];
-    const len = addTypes.length;
-
-    for (let i = 0; i < len; i++) {
-      this.addSemanticType(addTypes[i][0], addTypes[i][1]);
-    }
-
-    this._reset();
-  }
-
-  addSemanticType(type, fun) {
-    const len = this.semanticTypes.length;
-
-    for (let i = 0; i < len; i++) {
-      const typ = this.semanticTypes[i][0];
-
-      if (typ === type) {
-        const old = this.semanticTypes[i][1];
-        this.semanticTypes[i][1] = fun;
-        return old;
-      }
-    }
-
-    this.semanticTypes.push([type, fun]);
-    return null;
-  }
-
-  push(val) {
-    if (!val) {
-      return true;
-    }
-
-    this.result[this.offset] = val;
-    this.resultMethod[this.offset] = 0;
-    this.resultLength[this.offset] = val.length;
-    this.offset++;
-
-    if (this.streaming) {
-      this.onData(this.finalize());
-    }
-
-    return true;
-  }
-
-  pushWrite(val, method, len) {
-    this.result[this.offset] = val;
-    this.resultMethod[this.offset] = method;
-    this.resultLength[this.offset] = len;
-    this.offset++;
-
-    if (this.streaming) {
-      this.onData(this.finalize());
-    }
-
-    return true;
-  }
-
-  _pushUInt8(val) {
-    return this.pushWrite(val, 1, 1);
-  }
-
-  _pushUInt16BE(val) {
-    return this.pushWrite(val, 2, 2);
-  }
-
-  _pushUInt32BE(val) {
-    return this.pushWrite(val, 3, 4);
-  }
-
-  _pushDoubleBE(val) {
-    return this.pushWrite(val, 4, 8);
-  }
-
-  _pushNaN() {
-    return this.push(BUF_NAN);
-  }
-
-  _pushInfinity(obj) {
-    const half = obj < 0 ? BUF_INF_NEG : BUF_INF_POS;
-    return this.push(half);
-  }
-
-  _pushFloat(obj) {
-    const b2 = Buffer.allocUnsafe(2);
-
-    if (utils.writeHalf(b2, obj)) {
-      if (utils.parseHalf(b2) === obj) {
-        return this._pushUInt8(HALF) && this.push(b2);
-      }
-    }
-
-    const b4 = Buffer.allocUnsafe(4);
-    b4.writeFloatBE(obj, 0);
-
-    if (b4.readFloatBE(0) === obj) {
-      return this._pushUInt8(FLOAT) && this.push(b4);
-    }
-
-    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj);
-  }
-
-  _pushInt(obj, mt, orig) {
-    const m = mt << 5;
-
-    if (obj < 24) {
-      return this._pushUInt8(m | obj);
-    }
-
-    if (obj <= 0xff) {
-      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj);
-    }
-
-    if (obj <= 0xffff) {
-      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj);
-    }
-
-    if (obj <= 0xffffffff) {
-      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj);
-    }
-
-    if (obj <= Number.MAX_SAFE_INTEGER) {
-      return this._pushUInt8(m | NUMBYTES.EIGHT) && this._pushUInt32BE(Math.floor(obj / SHIFT32)) && this._pushUInt32BE(obj % SHIFT32);
-    }
-
-    if (mt === MT.NEG_INT) {
-      return this._pushFloat(orig);
-    }
-
-    return this._pushFloat(obj);
-  }
-
-  _pushIntNum(obj) {
-    if (obj < 0) {
-      return this._pushInt(-obj - 1, MT.NEG_INT, obj);
-    } else {
-      return this._pushInt(obj, MT.POS_INT);
-    }
-  }
-
-  _pushNumber(obj) {
-    switch (false) {
-      case obj === obj:
-        // eslint-disable-line
-        return this._pushNaN(obj);
-
-      case isFinite(obj):
-        return this._pushInfinity(obj);
-
-      case obj % 1 !== 0:
-        return this._pushIntNum(obj);
-
-      default:
-        return this._pushFloat(obj);
-    }
-  }
-
-  _pushString(obj) {
-    const len = Buffer.byteLength(obj, 'utf8');
-    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len);
-  }
-
-  _pushBoolean(obj) {
-    return this._pushUInt8(obj ? TRUE : FALSE);
-  }
-
-  _pushUndefined(obj) {
-    return this._pushUInt8(UNDEFINED);
-  }
-
-  _pushArray(gen, obj) {
-    const len = obj.length;
-
-    if (!gen._pushInt(len, MT.ARRAY)) {
-      return false;
-    }
-
-    for (let j = 0; j < len; j++) {
-      if (!gen.pushAny(obj[j])) {
-        return false;
-      }
-    }
-
-    return true;
-  }
-
-  _pushTag(tag) {
-    return this._pushInt(tag, MT.TAG);
-  }
-
-  _pushDate(gen, obj) {
-    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in
-    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is
-    // still allowed to encode fractions of seconds which can be achieved by
-    // changing overwriting the encode function for Date objects.
-    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000));
-  }
-
-  _pushBuffer(gen, obj) {
-    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj);
-  }
-
-  _pushNoFilter(gen, obj) {
-    return gen._pushBuffer(gen, obj.slice());
-  }
-
-  _pushRegexp(gen, obj) {
-    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source);
-  }
-
-  _pushSet(gen, obj) {
-    if (!gen._pushInt(obj.size, MT.ARRAY)) {
-      return false;
-    }
-
-    for (const x of obj) {
-      if (!gen.pushAny(x)) {
-        return false;
-      }
-    }
-
-    return true;
-  }
-
-  _pushUrl(gen, obj) {
-    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format());
-  }
-
-  _pushBigint(obj) {
-    let tag = TAG.POS_BIGINT;
-
-    if (obj.isNegative()) {
-      obj = obj.negated().minus(1);
-      tag = TAG.NEG_BIGINT;
-    }
-
-    let str = obj.toString(16);
-
-    if (str.length % 2) {
-      str = '0' + str;
-    }
-
-    const buf = Buffer.from(str, 'hex');
-    return this._pushTag(tag) && this._pushBuffer(this, buf);
-  }
-
-  _pushBigNumber(gen, obj) {
-    if (obj.isNaN()) {
-      return gen._pushNaN();
-    }
-
-    if (!obj.isFinite()) {
-      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity);
-    }
-
-    if (obj.isInteger()) {
-      return gen._pushBigint(obj);
-    }
-
-    if (!(gen._pushTag(TAG.DECIMAL_FRAC) && gen._pushInt(2, MT.ARRAY))) {
-      return false;
-    }
-
-    const dec = obj.decimalPlaces();
-    const slide = obj.multipliedBy(new Bignumber(10).pow(dec));
-
-    if (!gen._pushIntNum(-dec)) {
-      return false;
-    }
-
-    if (slide.abs().isLessThan(MAXINT_BN)) {
-      return gen._pushIntNum(slide.toNumber());
-    } else {
-      return gen._pushBigint(slide);
-    }
-  }
-
-  _pushMap(gen, obj) {
-    if (!gen._pushInt(obj.size, MT.MAP)) {
-      return false;
-    }
-
-    return this._pushRawMap(obj.size, Array.from(obj));
-  }
-
-  _pushObject(obj) {
-    if (!obj) {
-      return this._pushUInt8(NULL);
-    }
-
-    var len = this.semanticTypes.length;
-
-    for (var i = 0; i < len; i++) {
-      if (obj instanceof this.semanticTypes[i][0]) {
-        return this.semanticTypes[i][1].call(obj, this, obj);
-      }
-    }
-
-    var f = obj.encodeCBOR;
-
-    if (typeof f === 'function') {
-      return f.call(obj, this);
-    }
-
-    var keys = Object.keys(obj);
-    var keyLength = keys.length;
-
-    if (!this._pushInt(keyLength, MT.MAP)) {
-      return false;
-    }
-
-    return this._pushRawMap(keyLength, keys.map(k => [k, obj[k]]));
-  }
-
-  _pushRawMap(len, map) {
-    // Sort keys for canoncialization
-    // 1. encode key
-    // 2. shorter key comes before longer key
-    // 3. same length keys are sorted with lower
-    //    byte value before higher
-    map = map.map(function (a) {
-      a[0] = Encoder.encode(a[0]);
-      return a;
-    }).sort(utils.keySorter);
-
-    for (var j = 0; j < len; j++) {
-      if (!this.push(map[j][0])) {
-        return false;
-      }
-
-      if (!this.pushAny(map[j][1])) {
-        return false;
-      }
-    }
-
-    return true;
-  }
-  /**
-   * Alias for `.pushAny`
-   *
-   * @param {*} obj
-   * @returns {boolean} true on success
-   */
-
-
-  write(obj) {
-    return this.pushAny(obj);
-  }
-  /**
-   * Push any supported type onto the encoded stream
-   *
-   * @param {any} obj
-   * @returns {boolean} true on success
-   */
-
-
-  pushAny(obj) {
-    var typ = toType(obj);
-
-    switch (typ) {
-      case 'Number':
-        return this._pushNumber(obj);
-
-      case 'String':
-        return this._pushString(obj);
-
-      case 'Boolean':
-        return this._pushBoolean(obj);
-
-      case 'Object':
-        return this._pushObject(obj);
-
-      case 'Array':
-        return this._pushArray(this, obj);
-
-      case 'Uint8Array':
-        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj));
-
-      case 'Null':
-        return this._pushUInt8(NULL);
-
-      case 'Undefined':
-        return this._pushUndefined(obj);
-
-      case 'Map':
-        return this._pushMap(this, obj);
-
-      case 'Set':
-        return this._pushSet(this, obj);
-
-      case 'URL':
-        return this._pushUrl(this, obj);
-
-      case 'BigNumber':
-        return this._pushBigNumber(this, obj);
-
-      case 'Date':
-        return this._pushDate(this, obj);
-
-      case 'RegExp':
-        return this._pushRegexp(this, obj);
-
-      case 'Symbol':
-        switch (obj) {
-          case SYMS.NULL:
-            return this._pushObject(null);
-
-          case SYMS.UNDEFINED:
-            return this._pushUndefined(undefined);
-          // TODO: Add pluggable support for other symbols
-
-          default:
-            throw new Error('Unknown symbol: ' + obj.toString());
-        }
-
-      default:
-        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''));
-    }
-  }
-
-  finalize() {
-    if (this.offset === 0) {
-      return null;
-    }
-
-    var result = this.result;
-    var resultLength = this.resultLength;
-    var resultMethod = this.resultMethod;
-    var offset = this.offset; // Determine the size of the buffer
-
-    var size = 0;
-    var i = 0;
-
-    for (; i < offset; i++) {
-      size += resultLength[i];
-    }
-
-    var res = Buffer.allocUnsafe(size);
-    var index = 0;
-    var length = 0; // Write the content into the result buffer
-
-    for (i = 0; i < offset; i++) {
-      length = resultLength[i];
-
-      switch (resultMethod[i]) {
-        case 0:
-          result[i].copy(res, index);
-          break;
-
-        case 1:
-          res.writeUInt8(result[i], index, true);
-          break;
-
-        case 2:
-          res.writeUInt16BE(result[i], index, true);
-          break;
-
-        case 3:
-          res.writeUInt32BE(result[i], index, true);
-          break;
-
-        case 4:
-          res.writeDoubleBE(result[i], index, true);
-          break;
-
-        case 5:
-          res.write(result[i], index, length, 'utf8');
-          break;
-
-        default:
-          throw new Error('unkown method');
-      }
-
-      index += length;
-    }
-
-    var tmp = res;
-
-    this._reset();
-
-    return tmp;
-  }
-
-  _reset() {
-    this.result = [];
-    this.resultMethod = [];
-    this.resultLength = [];
-    this.offset = 0;
-  }
-  /**
-   * Encode the given value
-   * @param {*} o
-   * @returns {Buffer}
-   */
-
-
-  static encode(o) {
-    const enc = new Encoder();
-    const ret = enc.pushAny(o);
-
-    if (!ret) {
-      throw new Error('Failed to encode input');
-    }
-
-    return enc.finalize();
-  }
-
-}
-
-module.exports = Encoder;
-
-/***/ })
-/******/ ]);
-});
-//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/borc/dist/index.js.map b/node_modules/borc/dist/index.js.map
deleted file mode 100644
index ce60093..0000000
--- a/node_modules/borc/dist/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["/Users/dignifiedquire/opensource/borc/webpack/universalModuleDefinition","/Users/dignifiedquire/opensource/borc/webpack/bootstrap","/Users/dignifiedquire/opensource/borc/node_modules/node-libs-browser/node_modules/buffer/index.js","/Users/dignifiedquire/opensource/borc/node_modules/bignumber.js/bignumber.js","/Users/dignifiedquire/opensource/borc/src/constants.js","/Users/dignifiedquire/opensource/borc/src/utils.js","/Users/dignifiedquire/opensource/borc/node_modules/webpack/buildin/global.js","/Users/dignifiedquire/opensource/borc/node_modules/ieee754/index.js","/Users/dignifiedquire/opensource/borc/src/decoder.js","/Users/dignifiedquire/opensource/borc/src/simple.js","/Users/dignifiedquire/opensource/borc/src/tagged.js","/Users/dignifiedquire/opensource/borc/node_modules/iso-url/index.js","/Users/dignifiedquire/opensource/borc/node_modules/iso-url/src/url-browser.js","/Users/dignifiedquire/opensource/borc/src/index.js","/Users/dignifiedquire/opensource/borc/src/diagnose.js","/Users/dignifiedquire/opensource/borc/node_modules/base64-js/index.js","/Users/dignifiedquire/opensource/borc/node_modules/isarray/index.js","/Users/dignifiedquire/opensource/borc/src/decoder.asm.js","/Users/dignifiedquire/opensource/borc/node_modules/iso-url/src/relative.js","/Users/dignifiedquire/opensource/borc/src/encoder.js"],"names":["Bignumber","require","BigNumber","exports","MT","POS_INT","NEG_INT","BYTE_STRING","UTF8_STRING","ARRAY","MAP","TAG","SIMPLE_FLOAT","DATE_STRING","DATE_EPOCH","POS_BIGINT","NEG_BIGINT","DECIMAL_FRAC","BIGFLOAT","BASE64URL_EXPECTED","BASE64_EXPECTED","BASE16_EXPECTED","CBOR","URI","BASE64URL","BASE64","REGEXP","MIME","NUMBYTES","ZERO","ONE","TWO","FOUR","EIGHT","INDEFINITE","SIMPLE","FALSE","TRUE","NULL","UNDEFINED","SYMS","Symbol","PARENT","BREAK","STREAM","SHIFT32","Math","pow","SHIFT16","MAX_SAFE_HIGH","NEG_ONE","TEN","OBJECT","Buffer","constants","parseHalf","buf","exp","mant","sign","toHex","n","toString","arrayBufferToBignumber","len","byteLength","res","i","buildMap","obj","Map","keys","Object","length","set","buildInt32","f","g","buildInt64","f1","f2","g1","g2","times","plus","writeHalf","half","u32","allocUnsafe","writeFloatBE","u","readUInt32BE","s16","writeUInt16BE","keySorter","a","b","lenA","lenB","compare","isNegativeZero","x","nextPowerOf2","count","ieee754","parser","utils","c","Simple","Tagged","URL","Decoder","constructor","opts","size","_heap","ArrayBuffer","_heap8","Uint8Array","_buffer","from","_reset","_knownTags","assign","val","Date","minus","v","RegExp","tags","global","log","console","bind","pushInt","pushInt32","pushInt32Neg","pushInt64","pushInt64Neg","pushFloat","pushFloatSingle","pushFloatDouble","pushTrue","pushFalse","pushUndefined","pushNull","pushInfinity","pushInfinityNeg","pushNaN","pushNaNNeg","pushArrayStart","pushArrayStartFixed","pushArrayStartFixed32","pushArrayStartFixed64","pushObjectStart","pushObjectStartFixed","pushObjectStartFixed32","pushObjectStartFixed64","pushByteString","pushByteStringStart","pushUtf8String","pushUtf8StringStart","pushSimpleUnassigned","pushTagUnassigned","pushTagStart","pushTagStart4","pushTagStart8","pushBreak","_depth","_parents","_currentParent","_ref","ref","_closeParent","p","pop","Error","type","_push","createTag","createByteString","createUtf8String","values","createMap","createObject","createArray","_dec","hasChildren","push","tmpKey","_createParent","_res","tagNumber","value","typ","arr","raw","concat","createByteStringFromHeap","start","end","alloc","slice","createInt","createInt32","createInt64","createFloat","createFloatSingle","d","read","createFloatDouble","e","h","createInt32Neg","createInt64Neg","createTrue","createFalse","createNull","createUndefined","undefined","createInfinity","Infinity","createInfinityNeg","createNaN","NaN","createNaNNeg","join","createUtf8StringFromHeap","createSimpleUnassigned","_createArrayStartFixed","len1","len2","len3","len4","_createObjectStartFixed","tag","Array","_decode","input","code","parse","decodeFirst","decodeAll","decode","enc","dec","module","inspect","encodeCBOR","gen","_pushInt","isSimple","hasParent","err","JSON","stringify","_pushTag","pushAny","convert","converters","er","call","error","Diagnose","Encoder","diagnose","encode","leveldb","buffer","name","fl","map","list","reduce","collectObject","acc","key","decodeAsm","stdlib","foreign","heap","offset","inputLength","jumpTable","checkOffset","readUInt16","readUInt32","INT_P","octet","UINT_P_8","UINT_P_16","UINT_P_32","UINT_P_64","INT_N","UINT_N_8","UINT_N_16","UINT_N_32","UINT_N_64","step","BYTE_STRING_8","BYTE_STRING_16","BYTE_STRING_32","BYTE_STRING_64","BYTE_STRING_BREAK","UTF8_STRING_8","UTF8_STRING_16","UTF8_STRING_32","UTF8_STRING_64","UTF8_STRING_BREAK","ARRAY_8","ARRAY_16","ARRAY_32","ARRAY_64","ARRAY_BREAK","MAP_8","MAP_16","MAP_32","MAP_64","MAP_BREAK","TAG_KNOWN","TAG_BIGNUM_POS","TAG_BIGNUM_NEG","TAG_FRAC","TAG_BIGNUM_FLOAT","TAG_UNASSIGNED","TAG_BASE64_URL","TAG_BASE64","TAG_BASE16","TAG_MORE_1","TAG_MORE_2","TAG_MORE_4","TAG_MORE_8","SIMPLE_UNASSIGNED","SIMPLE_FALSE","SIMPLE_TRUE","SIMPLE_NULL","SIMPLE_UNDEFINED","SIMPLE_BYTE","SIMPLE_FLOAT_HALF","r","SIMPLE_FLOAT_SINGLE","SIMPLE_FLOAT_DOUBLE","ERROR","HALF","FLOAT","DOUBLE","MAXINT_BN","BUF_NAN","BUF_INF_NEG","BUF_INF_POS","toType","options","streaming","stream","onData","semanticTypes","_pushUrl","_pushBigNumber","addTypes","genTypes","addSemanticType","fun","old","result","resultMethod","resultLength","finalize","pushWrite","method","_pushUInt8","_pushUInt16BE","_pushUInt32BE","_pushDoubleBE","_pushNaN","_pushInfinity","_pushFloat","b2","b4","readFloatBE","mt","orig","m","Number","MAX_SAFE_INTEGER","floor","_pushIntNum","_pushNumber","isFinite","_pushString","_pushBoolean","_pushUndefined","_pushArray","j","_pushDate","round","_pushBuffer","_pushNoFilter","_pushRegexp","source","_pushSet","format","_pushBigint","isNegative","negated","str","isNaN","isInteger","decimalPlaces","slide","multipliedBy","abs","isLessThan","toNumber","_pushMap","_pushRawMap","_pushObject","keyLength","k","sort","write","isBuffer","index","copy","writeUInt8","writeUInt32BE","writeDoubleBE","tmp","o","ret"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACa;;AAEb,aAAa,mBAAO,CAAC,EAAW;;AAEhC,cAAc,mBAAO,CAAC,CAAS;;AAE/B,cAAc,mBAAO,CAAC,EAAS;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB;;AAEnB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;;AAEA,aAAa,iBAAiB;AAC9B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B;;AAE1B;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,2DAA2D;;AAE3D;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;;AAGH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gDAAgD,EAAE;AAClD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;;;AAGA;AACA;AACA,qCAAqC;;AAErC;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA,2BAA2B;;AAE3B;AACA;AACA;AACA,GAAG;;;AAGH;;AAEA;AACA,uBAAuB;AACvB,GAAG;AACH,4BAA4B;AAC5B,GAAG;;;AAGH;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH,qBAAqB;;AAErB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,wBAAwB,QAAQ;AAChC;;AAEA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,GAAG;AACH;AACA;AACA,eAAe;AACf,GAAG;AACH;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA,yDAAyD;AACzD,GAAG;;;AAGH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,kBAAkB;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,mBAAmB,cAAc;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uDAAuD,OAAO;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uDAAuD,OAAO;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;;AAE3D;AACA,yDAAyD;;AAEzD;AACA;AACA;;AAEA;AACA,+DAA+D;;AAE/D;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,GAAG;AACH;AACA,eAAe,SAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,EAAE;AACF;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;;;AAGH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;;AAEA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA,EAAE;AACF;;;AAGA;;AAEA;AACA;AACA,uDAAuD;;AAEvD,gCAAgC;;AAEhC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B,qCAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA,OAAO;;;AAGP;AACA;AACA;AACA;AACA,OAAO;;;AAGP;AACA,KAAK;AACL;AACA;AACA;;AAEA,yBAAyB;;AAEzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,iBAAiB,gBAAgB;AACjC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB;AACrB,C;;;;;;;;AC5zDA,kCAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sDAAsD;AACtD;;AAEA;AACA;AACA;AACA;AACA,UAAU,wBAAwB;AAClC,YAAY,OAAO;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6CAA6C;;AAE7C;AACA,8BAA8B,SAAS;;AAEvC;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA,SAAS;;;AAGT,oEAAoE;;AAEpE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP,oCAAoC,mDAAmD,GAAG,EAAE;AAC5F,gDAAgD;AAChD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,yDAAyD,8EAA8E,EAAE;;AAEzI;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,kBAAkB;AAClB;;AAEA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;;AAGT;AACA,2CAA2C;;AAE3C,oEAAoE;AACpE,OAAO;;;AAGP,iBAAiB,0BAA0B,MAAM;;;AAGjD,4BAA4B,8BAA8B;;AAE1D;AACA,iBAAiB,8EAA8E,EAAE;;AAEjG;AACA;AACA,SAAS;;;AAGT;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mCAAmC;;AAEnC;AACA;;AAEA,iCAAiC,SAAS;AAC1C;AACA;;AAEA;AACA,WAAW;AACX;AACA;;AAEA,gBAAgB,KAAK;;AAErB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,2BAA2B,OAAO;AAClC,2BAA2B,gBAAgB;AAC3C,2BAA2B,gBAAgB;AAC3C,2BAA2B,QAAQ;AACnC,2BAA2B,OAAO;AAClC,8BAA8B,OAAO;AACrC,2BAA2B,OAAO;AAClC;AACA,2BAA2B,OAAO;AAClC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC;AACA;AACA;AACA;AACA,yBAAyB,yCAAyC;AAClE;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6BAA6B,OAAO;AACpC,gDAAgD,mDAAmD,GAAG,EAAE;AACxG;AACA;AACA;AACA;AACA,WAAW,mBAAmB,OAAO;AACrC,+CAA+C,mDAAmD,GAAG,EAAE;;;AAGvG;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B;AACA;AACA,gDAAgD,mDAAmD,GAAG,EAAE;;;AAGxG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW,WAAW,gBAAgB;AACtC;AACA,uCAAuC,kEAAkE,GAAG,EAAE;;;AAG9G;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,WAAW,YAAY,QAAQ;AAC/B,2DAA2D,EAAE;AAC7D;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW,iBAAiB,OAAO;AACnC,6CAA6C,mDAAmD,GAAG,EAAE;;;AAGrG;AACA;AACA;AACA;AACA,WAAW,mBAAmB,OAAO;AACrC,+CAA+C,mDAAmD,GAAG,EAAE;;;AAGvG;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,uDAAuD,EAAE;;;AAGzD;AACA;AACA,iDAAiD;AACjD,WAAW,cAAc;AACzB,mDAAmD,EAAE;;;AAGrD;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT,kDAAkD,EAAE;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,8CAA8C,EAAE;AAChD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,WAAW;;;AAGX;AACA,mCAAmC;AACnC;;AAEA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA,aAAa;;;AAGb;AACA;AACA,SAAS;;AAET,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,GAAG;AAC7F;AACA;;;AAGA;AACA,qCAAqC;AACrC;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;;AAEA;AACA;AACA;AACA;;AAEA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB;AACtB,WAAW;AACX;AACA;;AAEA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;;;AAGT;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA,SAAS;;;AAGT,cAAc,YAAY,eAAe;;;AAGzC;AACA;AACA,SAAS;AACT;AACA,sBAAsB,YAAY,gCAAgC;;;AAGlE,+BAA+B,SAAS,eAAe;;;AAGvD;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,kBAAkB;AAClB;;;AAGA;AACA;AACA;AACA;;AAEA,YAAY,iBAAiB;;AAE7B;AACA,MAAM;AACN;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,SAAS;AACvB,iCAAiC,QAAQ;;AAEzC;;AAEA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;AAE/B;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA,SAAS;;;AAGT,iIAAiI;;AAEjI,0BAA0B;;AAE1B,cAAc,cAAc,WAAW;;;AAGvC,8CAA8C;;AAE9C;AACA;AACA,SAAS;AACT;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;;AAGA,uBAAuB;;AAEvB,kBAAkB;;AAElB;AACA;AACA,yKAAyK;AACzK;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB;;AAExB;AACA;AACA,2BAA2B,qBAAqB;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;;;AAGX,6BAA6B,UAAU,EAAE;;;AAGzC,+BAA+B,QAAQ,kCAAkC;;;AAGzE;AACA,SAAS;;;AAGT;AACA;AACA,KAAK,GAAG;;;AAGR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,KAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAkB;;AAElB,cAAc,MAAM;AACpB;AACA;AACA;AACA,SAAS;;;AAGT,cAAc,uBAAuB;AACrC,OAAO;;;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;;AAGA,mBAAmB,uBAAuB;;AAE1C;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB;;AAEjB,4CAA4C;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;;AAE5B,gBAAgB,WAAW;;AAE3B;AACA;AACA;AACA,uCAAuC;AACvC;;AAEA;AACA,kBAAkB;;AAElB,6CAA6C;;AAE7C;AACA;AACA;AACA,iEAAiE;;AAEjE,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;AACA;AACA,kCAAkC;AAClC;AACA;AACA;;AAEA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;AAGjB;AACA;AACA;;AAEA,wDAAwD;;AAExD;AACA,gCAAgC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;;;AAGA,wBAAwB;;AAExB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;;AAEX,gCAAgC;;AAEhC;AACA;;AAEA;AACA;AACA,gCAAgC,SAAS;;AAEzC,oEAAoE;AACpE,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,2CAA2C;;AAE3C;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;;AAEzB,sCAAsC;AACtC,SAAS;AACT;AACA,0CAA0C;;AAE1C;AACA,yCAAyC,KAAK;AAC9C,WAAW;AACX;;AAEA;AACA;;AAEA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;;AAEA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;;AAEA,YAAY,iBAAiB;AAC7B,mCAAmC;;AAEnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,uBAAuB;;AAEvB,YAAY,SAAS,UAAU;;;AAG/B,oBAAoB,SAAS,eAAe;;;AAG5C;AACA;AACA,yBAAyB;AACzB,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;;AAEhE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,uBAAuB;;AAEvB;AACA;;AAEA;AACA,WAAW,sCAAsC,EAAE;AACnD,4CAA4C,EAAE,UAAU,EAAE;;;AAG1D;AACA;AACA,WAAW;;;AAGX;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,SAAS;;AAEzC,qBAAqB;;AAErB;AACA;AACA;AACA,2BAA2B;;AAE3B;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA,sBAAsB,iBAAiB;;AAEvC;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb,6BAA6B;;AAE7B,yBAAyB,SAAS,eAAe;;;AAGjD,4BAA4B;AAC5B;;AAEA,mCAAmC;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,WAAW;;;AAGX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,qCAAqC;AACrC;;AAEA;AACA,WAAW;;;AAGX;AACA,mBAAmB;AACnB;AACA;AACA;AACA,sCAAsC,SAAS;;AAE/C;;AAEA,2BAA2B,SAAS,eAAe;;;AAGnD;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;;AAGX,6BAA6B,eAAe;AAC5C,SAAS;;;AAGT;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,MAAM;AAChG;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C;AAC3C;AACA;;AAEA;AACA,wEAAwE;;AAExE,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wBAAwB;AAClC,YAAY,wBAAwB;AACpC;AACA,oDAAoD,EAAE;AACtD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;AAE3B;AACA;AACA;;AAEA,0CAA0C;;AAE1C,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,OAAO;AACP;AACA;AACA;AACA,yCAAyC;;AAEzC,gCAAgC;;AAEhC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,6BAA6B;;AAE7B,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,GAAG;AAC7F;;;AAGA;AACA;AACA,yCAAyC;AACzcAAc;;AAEd,8CAA8C;;AAE9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gFAAgF;;AAEhF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,oBAAoB;;AAEpB,mBAAmB,KAAK;;AAExB;AACA,OAAO;AACP;AACA;;AAEA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,OAAO;;;AAGP;AACA,4CAA4C;AAC5C;;AAEA,uBAAuB,KAAK;AAC5B,mBAAmB;;AAEnB,YAAY,OAAO;AACnB;AACA,qBAAqB,eAAe;;AAEpC;AACA;AACA;;AAEA;AACA,OAAO;;;AAGP,YAAY,YAAY,wBAAwB;;;AAGhD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,8BAA8B;;AAE9B;AACA,kCAAkC;AAClC,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,8BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;;AAE3C;AACA;AACA;AACA;AACA,SAAS;AACT,qBAAqB;;AAErB;AACA,6BAA6B;AAC7B,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;;AAEtB,4EAA4E;;AAE5E,kCAAkC,KAAK;;AAEvC;AACA;;AAEA,mBAAmB,UAAU;AAC7B;AACA;AACA;;AAEA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd,8CAA8C;;AAE9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD;AACpD;;AAEA;AACA;;AAEA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA,cAAc,KAAK;;AAEnB;AACA;;AAEA;AACA,oBAAoB;;AAEpB,oDAAoD;;AAEpD,iBAAiB,GAAG;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,MAAM;AAChG;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C;AAC3C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc,aAAa,eAAe;;;AAG1C,sBAAsB,SAAS;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA,oCAAoC,mDAAmD,GAAG,EAAE;AAC5F;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;;AAEtC;AACA;AACA,OAAO;;;AAGP,iCAAiC;AACjC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;AACA,yBAAyB;;AAEzB,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,gDAAgD,IAAI,OAAO,IAAI;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,MAAM;AAChG;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,MAAM;AAChG;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,iBAAiB,OAAO;AACxB;AACA,oCAAoC,mDAAmD,GAAG,MAAM;AAChG,mDAAmD,OAAO;AAC1D;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB,SAAS;;AAEzB;AACA;AACA;;AAEA,kJAAkJ,WAAW;AAC7J;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wBAAwB;AACrC;AACA,oCAAoC,4BAA4B,IAAI,GAAG;AACvE;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;;AAE9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;AAE3B;;AAEA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Borc\"] = factory();\n\telse\n\t\troot[\"Borc\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n\n/* eslint-disable no-proto */\n'use strict';\n\nvar base64 = require('base64-js');\n\nvar ieee754 = require('ieee754');\n\nvar isArray = require('isarray');\n\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\n\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();\n/*\n * Export kMaxLength after typed array support is determined.\n */\n\nexports.kMaxLength = kMaxLength();\n\nfunction typedArraySupport() {\n  try {\n    var arr = new Uint8Array(1);\n    arr.__proto__ = {\n      __proto__: Uint8Array.prototype,\n      foo: function foo() {\n        return 42;\n      }\n    };\n    return arr.foo() === 42 && // typed array instances can be augmented\n    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction kMaxLength() {\n  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n}\n\nfunction createBuffer(that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length');\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n\n    that.length = length;\n  }\n\n  return that;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\n\nfunction Buffer(arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length);\n  } // Common case.\n\n\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error('If encoding is specified then the first argument must be a string');\n    }\n\n    return allocUnsafe(this, arg);\n  }\n\n  return from(this, arg, encodingOrOffset, length);\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n// TODO: Legacy, not needed anymore. Remove in next major version.\n\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr;\n};\n\nfunction from(that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length);\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset);\n  }\n\n  return fromObject(that, value);\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\n\n\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length);\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n\n  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    });\n  }\n}\n\nfunction assertSize(size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number');\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative');\n  }\n}\n\nfunction alloc(that, size, fill, encoding) {\n  assertSize(size);\n\n  if (size <= 0) {\n    return createBuffer(that, size);\n  }\n\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\n  }\n\n  return createBuffer(that, size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\n\n\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding);\n};\n\nfunction allocUnsafe(that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n\n  return that;\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\n\n\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\n\n\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size);\n};\n\nfunction fromString(that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding');\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that;\n}\n\nfunction fromArrayLike(that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n\n  return that;\n}\n\nfunction fromArrayBuffer(that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds');\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds');\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n\n  return that;\n}\n\nfunction fromObject(that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that;\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that;\n  }\n\n  if (obj) {\n    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0);\n      }\n\n      return fromArrayLike(that, obj);\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n}\n\nfunction checked(length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\n  }\n\n  return length | 0;\n}\n\nfunction SlowBuffer(length) {\n  if (+length != length) {\n    // eslint-disable-line eqeqeq\n    length = 0;\n  }\n\n  return Buffer.alloc(+length);\n}\n\nBuffer.isBuffer = function isBuffer(b) {\n  return !!(b != null && b._isBuffer);\n};\n\nBuffer.compare = function compare(a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers');\n  }\n\n  if (a === b) return 0;\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\nBuffer.isEncoding = function isEncoding(encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nBuffer.concat = function concat(list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers');\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0);\n  }\n\n  var i;\n\n  if (length === undefined) {\n    length = 0;\n\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n\n  return buffer;\n};\n\nfunction byteLength(string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length;\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength;\n  }\n\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0; // Use a for loop to avoid recursion\n\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len;\n\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length;\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2;\n\n      case 'hex':\n        return len >>> 1;\n\n      case 'base64':\n        return base64ToBytes(string).length;\n\n      default:\n        if (loweredCase) return utf8ToBytes(string).length; // assume utf8\n\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\nBuffer.byteLength = byteLength;\n\nfunction slowToString(encoding, start, end) {\n  var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\n  if (start === undefined || start < 0) {\n    start = 0;\n  } // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n\n\n  if (start > this.length) {\n    return '';\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return '';\n  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\n\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return '';\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end);\n\n      case 'ascii':\n        return asciiSlice(this, start, end);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end);\n\n      case 'base64':\n        return base64Slice(this, start, end);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\n\n\nBuffer.prototype._isBuffer = true;\n\nfunction swap(b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16() {\n  var len = this.length;\n\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits');\n  }\n\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap32 = function swap32() {\n  var len = this.length;\n\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits');\n  }\n\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap64 = function swap64() {\n  var len = this.length;\n\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits');\n  }\n\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n\n  return this;\n};\n\nBuffer.prototype.toString = function toString() {\n  var length = this.length | 0;\n  if (length === 0) return '';\n  if (arguments.length === 0) return utf8Slice(this, 0, length);\n  return slowToString.apply(this, arguments);\n};\n\nBuffer.prototype.equals = function equals(b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n  if (this === b) return true;\n  return Buffer.compare(this, b) === 0;\n};\n\nBuffer.prototype.inspect = function inspect() {\n  var str = '';\n  var max = exports.INSPECT_MAX_BYTES;\n\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n\n  return '<Buffer ' + str + '>';\n};\n\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer');\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index');\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0;\n  }\n\n  if (thisStart >= thisEnd) {\n    return -1;\n  }\n\n  if (start >= end) {\n    return 1;\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n  if (this === target) return 0;\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\n\n\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1; // Normalize byteOffset\n\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n\n  byteOffset = +byteOffset; // Coerce to Number.\n\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n  } // Normalize byteOffset: negative offsets start from the end of the buffer\n\n\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1;else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;else return -1;\n  } // Normalize val\n\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  } // Finally, search either indexOf (if dir is true) or lastIndexOf\n\n\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1;\n    }\n\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n\n    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n      }\n    }\n\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n  }\n\n  throw new TypeError('val must be string, number or Buffer');\n}\n\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n\n    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1;\n      }\n\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read(buf, i) {\n    if (indexSize === 1) {\n      return buf[i];\n    } else {\n      return buf.readUInt16BE(i * indexSize);\n    }\n  }\n\n  var i;\n\n  if (dir) {\n    var foundIndex = -1;\n\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break;\n        }\n      }\n\n      if (found) return i;\n    }\n  }\n\n  return -1;\n}\n\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1;\n};\n\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\n\nfunction hexWrite(buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n\n    if (length > remaining) {\n      length = remaining;\n    }\n  } // must be an even number of digits\n\n\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i;\n    buf[offset + i] = parsed;\n  }\n\n  return i;\n}\n\nfunction utf8Write(buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nfunction asciiWrite(buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\n\nfunction latin1Write(buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length);\n}\n\nfunction base64Write(buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\n\nfunction ucs2Write(buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0; // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0; // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    } // legacy write(string, encoding, offset, length) - remove in v0.13\n\n  } else {\n    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds');\n  }\n\n  if (!encoding) encoding = 'utf8';\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length);\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length);\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON() {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  };\n};\n\nfunction base64Slice(buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf);\n  } else {\n    return base64.fromByteArray(buf.slice(start, end));\n  }\n}\n\nfunction utf8Slice(buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n  var i = start;\n\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n\n          break;\n\n        case 2:\n          secondByte = buf[i + 1];\n\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res);\n} // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\n\n\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray(codePoints) {\n  var len = codePoints.length;\n\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n  } // Decode in chunks to avoid \"call stack size exceeded\".\n\n\n  var res = '';\n  var i = 0;\n\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n\n  return res;\n}\n\nfunction asciiSlice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n\n  return ret;\n}\n\nfunction latin1Slice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n\n  return ret;\n}\n\nfunction hexSlice(buf, start, end) {\n  var len = buf.length;\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n  var out = '';\n\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n\n  return out;\n}\n\nfunction utf16leSlice(buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n\n  return res;\n}\n\nBuffer.prototype.slice = function slice(start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n  var newBuf;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\n\n\nfunction checkOffset(offset, ext, length) {\n  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset];\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | this[offset + 1] << 8;\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] << 8 | this[offset + 1];\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\n\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return this[offset];\n  return (0xff - this[offset] + 1) * -1;\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | this[offset + 1] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | this[offset] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, true, 23, 4);\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, false, 23, 4);\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, true, 52, 8);\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, false, 52, 8);\n};\n\nfunction checkInt(buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nfunction objectWriteUInt16(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nfunction objectWriteUInt32(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  if (offset < 0) throw new RangeError('Index out of range');\n}\n\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4;\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert);\n};\n\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8;\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert);\n}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\n\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n  if (end === start) return 0;\n  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds');\n  }\n\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n  if (end > this.length) end = this.length;\n\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n  }\n\n  return len;\n}; // Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\n\n\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n\n      if (code < 256) {\n        val = code;\n      }\n    }\n\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string');\n    }\n\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  } // Invalid ranges are not set to a default, so can range check early.\n\n\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index');\n  }\n\n  if (end <= start) {\n    return this;\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n  if (!val) val = 0;\n  var i;\n\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this;\n}; // HELPER FUNCTIONS\n// ================\n\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean(str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\n\n  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n\n  return str;\n}\n\nfunction stringtrim(str) {\n  if (str.trim) return str.trim();\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}\n\nfunction utf8ToBytes(string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i); // is surrogate component\n\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } // valid lead\n\n\n        leadSurrogate = codePoint;\n        continue;\n      } // 2 leads in a row\n\n\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue;\n      } // valid surrogate pair\n\n\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null; // encode utf8\n\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n\n  return bytes;\n}\n\nfunction asciiToBytes(str) {\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n\n  return byteArray;\n}\n\nfunction utf16leToBytes(str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break;\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray;\n}\n\nfunction base64ToBytes(str) {\n  return base64.toByteArray(base64clean(str));\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) break;\n    dst[i + offset] = src[i];\n  }\n\n  return i;\n}\n\nfunction isnan(val) {\n  return val !== val; // eslint-disable-line no-self-compare\n}","\"use strict\";\n\n;\n\n(function (globalObject) {\n  'use strict';\n  /*\r\n   *      bignumber.js v9.0.0\r\n   *      A JavaScript library for arbitrary-precision arithmetic.\r\n   *      https://github.com/MikeMcl/bignumber.js\r\n   *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *      MIT Licensed.\r\n   *\r\n   *      BigNumber.prototype methods     |  BigNumber methods\r\n   *                                      |\r\n   *      absoluteValue            abs    |  clone\r\n   *      comparedTo                      |  config               set\r\n   *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n   *      dividedBy                div    |      ROUNDING_MODE\r\n   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n   *      exponentiatedBy          pow    |      RANGE\r\n   *      integerValue                    |      CRYPTO\r\n   *      isEqualTo                eq     |      MODULO_MODE\r\n   *      isFinite                        |      POW_PRECISION\r\n   *      isGreaterThan            gt     |      FORMAT\r\n   *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n   *      isInteger                       |  isBigNumber\r\n   *      isLessThan               lt     |  maximum              max\r\n   *      isLessThanOrEqualTo      lte    |  minimum              min\r\n   *      isNaN                           |  random\r\n   *      isNegative                      |  sum\r\n   *      isPositive                      |\r\n   *      isZero                          |\r\n   *      minus                           |\r\n   *      modulo                   mod    |\r\n   *      multipliedBy             times  |\r\n   *      negated                         |\r\n   *      plus                            |\r\n   *      precision                sd     |\r\n   *      shiftedBy                       |\r\n   *      squareRoot               sqrt   |\r\n   *      toExponential                   |\r\n   *      toFixed                         |\r\n   *      toFormat                        |\r\n   *      toFraction                      |\r\n   *      toJSON                          |\r\n   *      toNumber                        |\r\n   *      toPrecision                     |\r\n   *      toString                        |\r\n   *      valueOf                         |\r\n   *\r\n   */\n\n  var BigNumber,\n      isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n      mathceil = Math.ceil,\n      mathfloor = Math.floor,\n      bignumberError = '[BigNumber Error] ',\n      tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n      BASE = 1e14,\n      LOG_BASE = 14,\n      MAX_SAFE_INTEGER = 0x1fffffffffffff,\n      // 2^53 - 1\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n      SQRT_BASE = 1e7,\n      // EDITABLE\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n  MAX = 1E9; // 0 to MAX_INT32\n\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\n\n  function clone(configObject) {\n    var div,\n        convertBase,\n        parseNumeric,\n        P = BigNumber.prototype = {\n      constructor: BigNumber,\n      toString: null,\n      valueOf: null\n    },\n        ONE = new BigNumber(1),\n        //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n    // The default values below must be integers within the inclusive ranges stated.\n    // The values can also be changed at run-time using BigNumber.set.\n    // The maximum number of decimal places for operations involving division.\n    DECIMAL_PLACES = 20,\n        // 0 to MAX\n    // The rounding mode used when rounding to the above decimal places, and when using\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n    // UP         0 Away from zero.\n    // DOWN       1 Towards zero.\n    // CEIL       2 Towards +Infinity.\n    // FLOOR      3 Towards -Infinity.\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    ROUNDING_MODE = 4,\n        // 0 to 8\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n    // The exponent value at and beneath which toString returns exponential notation.\n    // Number type: -7\n    TO_EXP_NEG = -7,\n        // 0 to -MAX\n    // The exponent value at and above which toString returns exponential notation.\n    // Number type: 21\n    TO_EXP_POS = 21,\n        // 0 to MAX\n    // RANGE : [MIN_EXP, MAX_EXP]\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // Number type: -324  (5e-324)\n    MIN_EXP = -1e7,\n        // -1 to -MAX\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // Number type:  308  (1.7976931348623157e+308)\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n    MAX_EXP = 1e7,\n        // 1 to MAX\n    // Whether to use cryptographically-secure random number generation, if available.\n    CRYPTO = false,\n        // true or false\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN      1 The remainder has the same sign as the dividend.\n    //             This modulo mode is commonly known as 'truncated division' and is\n    //             equivalent to (a % n) in JavaScript.\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n    //             The remainder is always positive.\n    //\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n    // modes are commonly used for the modulus operation.\n    // Although the other rounding modes can also be used, they may not give useful results.\n    MODULO_MODE = 1,\n        // 0 to 9\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\n    POW_PRECISION = 0,\n        // 0 to MAX\n    // The format specification used by the BigNumber.prototype.toFormat method.\n    FORMAT = {\n      prefix: '',\n      groupSize: 3,\n      secondaryGroupSize: 0,\n      groupSeparator: ',',\n      decimalSeparator: '.',\n      fractionGroupSize: 0,\n      fractionGroupSeparator: '\\xA0',\n      // non-breaking space\n      suffix: ''\n    },\n        // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n    // '-', '.', whitespace, or repeated character.\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; //------------------------------------------------------------------------------------------\n    // CONSTRUCTOR\n\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\n\n    function BigNumber(v, b) {\n      var alphabet,\n          c,\n          caseChanged,\n          e,\n          i,\n          isNum,\n          len,\n          str,\n          x = this; // Enable constructor call without `new`.\n\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n\n      if (b == null) {\n        if (v && v._isBigNumber === true) {\n          x.s = v.s;\n\n          if (!v.c || v.e > MAX_EXP) {\n            x.c = x.e = null;\n          } else if (v.e < MIN_EXP) {\n            x.c = [x.e = 0];\n          } else {\n            x.e = v.e;\n            x.c = v.c.slice();\n          }\n\n          return;\n        }\n\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\n          // Use `1 / n` to handle minus zero also.\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1; // Fast path for integers, where n < 2147483648 (2**31).\n\n          if (v === ~~v) {\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\n\n            if (e > MAX_EXP) {\n              x.c = x.e = null;\n            } else {\n              x.e = e;\n              x.c = [v];\n            }\n\n            return;\n          }\n\n          str = String(v);\n        } else {\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n        } // Decimal point?\n\n\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n        if ((i = str.search(/e/i)) > 0) {\n          // Determine exponent.\n          if (e < 0) e = i;\n          e += +str.slice(i + 1);\n          str = str.substring(0, i);\n        } else if (e < 0) {\n          // Integer.\n          e = str.length;\n        }\n      } else {\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n        intCheck(b, 2, ALPHABET.length, 'Base'); // Allow exponential notation to be used with base 10 argument, while\n        // also rounding to DECIMAL_PLACES as with other bases.\n\n        if (b == 10) {\n          x = new BigNumber(v);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        }\n\n        str = String(v);\n\n        if (isNum = typeof v == 'number') {\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            throw Error(tooManyDigits + v);\n          }\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        alphabet = ALPHABET.slice(0, b);\n        e = i = 0; // Check that str is a valid base b number.\n        // Don't use RegExp, so alphabet can contain special characters.\n\n        for (len = str.length; i < len; i++) {\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n            if (c == '.') {\n              // If '.' is not the first character and it has not be found before.\n              if (i > e) {\n                e = len;\n                continue;\n              }\n            } else if (!caseChanged) {\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n                caseChanged = true;\n                i = -1;\n                e = 0;\n                continue;\n              }\n            }\n\n            return parseNumeric(x, String(v), isNum, b);\n          }\n        } // Prevent later check for length on converted number.\n\n\n        isNum = false;\n        str = convertBase(str, b, 10, x.s); // Decimal point?\n\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n      } // Determine leading zeros.\n\n\n      for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.\n\n\n      for (len = str.length; str.charCodeAt(--len) === 48;);\n\n      if (str = str.slice(i, ++len)) {\n        len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n        if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n          throw Error(tooManyDigits + x.s * v);\n        } // Overflow?\n\n\n        if ((e = e - i - 1) > MAX_EXP) {\n          // Infinity.\n          x.c = x.e = null; // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = []; // Transform base\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE; // i < 1\n\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n\n            i = LOG_BASE - (str = str.slice(i)).length;\n          } else {\n            i -= len;\n          }\n\n          for (; i--; str += '0');\n\n          x.c.push(+str);\n        }\n      } else {\n        // Zero.\n        x.c = [x.e = 0];\n      }\n    } // CONSTRUCTOR PROPERTIES\n\n\n    BigNumber.clone = clone;\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\n\n    BigNumber.config = BigNumber.set = function (obj) {\n      var p, v;\n\n      if (obj != null) {\n        if (typeof obj == 'object') {\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            DECIMAL_PLACES = v;\n          } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 8, p);\n            ROUNDING_MODE = v;\n          } // EXPONENTIAL_AT {number|number[]}\n          // Integer, -MAX to MAX inclusive or\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n            v = obj[p];\n\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, 0, p);\n              intCheck(v[1], 0, MAX, p);\n              TO_EXP_NEG = v[0];\n              TO_EXP_POS = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n            }\n          } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'RANGE')) {\n            v = obj[p];\n\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, -1, p);\n              intCheck(v[1], 1, MAX, p);\n              MIN_EXP = v[0];\n              MAX_EXP = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n\n              if (v) {\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n              } else {\n                throw Error(bignumberError + p + ' cannot be zero: ' + v);\n              }\n            }\n          } // CRYPTO {boolean} true or false.\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\n          // '[BigNumber Error] crypto unavailable'\n\n\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\n            v = obj[p];\n\n            if (v === !!v) {\n              if (v) {\n                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                  CRYPTO = v;\n                } else {\n                  CRYPTO = !v;\n                  throw Error(bignumberError + 'crypto unavailable');\n                }\n              } else {\n                CRYPTO = v;\n              }\n            } else {\n              throw Error(bignumberError + p + ' not true or false: ' + v);\n            }\n          } // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 9, p);\n            MODULO_MODE = v;\n          } // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            POW_PRECISION = v;\n          } // FORMAT {object}\n          // '[BigNumber Error] FORMAT not an object: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\n            v = obj[p];\n            if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n          } // ALPHABET {string}\n          // '[BigNumber Error] ALPHABET invalid: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\n            v = obj[p]; // Disallow if only one character,\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\n\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\n              ALPHABET = v;\n            } else {\n              throw Error(bignumberError + p + ' invalid: ' + v);\n            }\n          }\n        } else {\n          // '[BigNumber Error] Object expected: {v}'\n          throw Error(bignumberError + 'Object expected: ' + obj);\n        }\n      }\n\n      return {\n        DECIMAL_PLACES: DECIMAL_PLACES,\n        ROUNDING_MODE: ROUNDING_MODE,\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n        RANGE: [MIN_EXP, MAX_EXP],\n        CRYPTO: CRYPTO,\n        MODULO_MODE: MODULO_MODE,\n        POW_PRECISION: POW_PRECISION,\n        FORMAT: FORMAT,\n        ALPHABET: ALPHABET\n      };\n    };\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\n\n\n    BigNumber.isBigNumber = function (v) {\n      if (!v || v._isBigNumber !== true) return false;\n      if (!BigNumber.DEBUG) return true;\n      var i,\n          n,\n          c = v.c,\n          e = v.e,\n          s = v.s;\n\n      out: if ({}.toString.call(c) == '[object Array]') {\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n          // If the first element is zero, the BigNumber value must be zero.\n          if (c[0] === 0) {\n            if (e === 0 && c.length === 1) return true;\n            break out;\n          } // Calculate number of digits that c[0] should have, based on the exponent.\n\n\n          i = (e + 1) % LOG_BASE;\n          if (i < 1) i += LOG_BASE; // Calculate number of digits of c[0].\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n\n          if (String(c[0]).length == i) {\n            for (i = 0; i < c.length; i++) {\n              n = c[i];\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n            } // Last element cannot be zero, unless it is the only element.\n\n\n            if (n !== 0) return true;\n          }\n        } // Infinity/NaN\n\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n        return true;\n      }\n\n      throw Error(bignumberError + 'Invalid BigNumber: ' + v);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.maximum = BigNumber.max = function () {\n      return maxOrMin(arguments, P.lt);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.minimum = BigNumber.min = function () {\n      return maxOrMin(arguments, P.gt);\n    };\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\n\n\n    BigNumber.random = function () {\n      var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n\n      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n        return mathfloor(Math.random() * pow2_53);\n      } : function () {\n        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n      };\n      return function (dp) {\n        var a,\n            b,\n            e,\n            k,\n            v,\n            i = 0,\n            c = [],\n            rand = new BigNumber(ONE);\n        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n        k = mathceil(dp / LOG_BASE);\n\n        if (CRYPTO) {\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto.getRandomValues) {\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n            for (; i < k;) {\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n\n            i = k / 2; // Node.js supporting crypto.randomBytes.\n          } else if (crypto.randomBytes) {\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n\n            for (; i < k;) {\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n\n            i = k / 7;\n          } else {\n            CRYPTO = false;\n            throw Error(bignumberError + 'crypto unavailable');\n          }\n        } // Use Math.random.\n\n\n        if (!CRYPTO) {\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n\n        k = c[--i];\n        dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.\n\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        } // Remove trailing elements which are zero.\n\n\n        for (; c[i] === 0; c.pop(), i--); // Zero?\n\n\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE); // Count the digits of the first element of c to determine leading zeros, and...\n\n\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++); // adjust the exponent accordingly.\n\n\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    }();\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.sum = function () {\n      var i = 1,\n          args = arguments,\n          sum = new BigNumber(args[0]);\n\n      for (; i < args.length;) sum = sum.plus(args[i++]);\n\n      return sum;\n    }; // PRIVATE FUNCTIONS\n    // Called by BigNumber and BigNumber.prototype.toString.\n\n\n    convertBase = function () {\n      var decimal = '0123456789';\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\n\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\n        var j,\n            arr = [0],\n            arrL,\n            i = 0,\n            len = str.length;\n\n        for (; i < len;) {\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n          arr[0] += alphabet.indexOf(str.charAt(i++));\n\n          for (j = 0; j < arr.length; j++) {\n            if (arr[j] > baseOut - 1) {\n              if (arr[j + 1] == null) arr[j + 1] = 0;\n              arr[j + 1] += arr[j] / baseOut | 0;\n              arr[j] %= baseOut;\n            }\n          }\n        }\n\n        return arr.reverse();\n      } // Convert a numeric string of baseIn to a numeric string of baseOut.\n      // If the caller is toString, we are converting from base 10 to baseOut.\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\n\n\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\n        var alphabet,\n            d,\n            e,\n            k,\n            r,\n            x,\n            xc,\n            y,\n            i = str.indexOf('.'),\n            dp = DECIMAL_PLACES,\n            rm = ROUNDING_MODE; // Non-integer.\n\n        if (i >= 0) {\n          k = POW_PRECISION; // Unlimited precision.\n\n          POW_PRECISION = 0;\n          str = str.replace('.', '');\n          y = new BigNumber(baseIn);\n          x = y.pow(str.length - i);\n          POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the\n          // result by its base raised to a power.\n\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n          y.e = y.c.length;\n        } // Convert the number as integer.\n\n\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.\n\n        e = k = xc.length; // Remove trailing zeros.\n\n        for (; xc[--k] == 0; xc.pop()); // Zero?\n\n\n        if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.\n\n        if (i < 0) {\n          --e;\n        } else {\n          x.c = xc;\n          x.e = e; // The sign is needed for correct rounding.\n\n          x.s = sign;\n          x = div(x, y, dp, rm, baseOut);\n          xc = x.c;\n          r = x.r;\n          e = x.e;\n        } // xc now represents str converted to baseOut.\n        // THe index of the rounding digit.\n\n\n        d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.\n\n        i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.\n\n        k = baseOut / 2;\n        r = r || d < 0 || xc[d + 1] != null;\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\n        // such as 0.00001.\n\n        if (d < 1 || !xc[0]) {\n          // 1^-dp or 0\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n        } else {\n          // Truncate xc to the required number of decimal places.\n          xc.length = d; // Round up?\n\n          if (r) {\n            // Rounding up may mean the previous digit has to be rounded up and so on.\n            for (--baseOut; ++xc[--d] > baseOut;) {\n              xc[d] = 0;\n\n              if (!d) {\n                ++e;\n                xc = [1].concat(xc);\n              }\n            }\n          } // Determine trailing zeros.\n\n\n          for (k = xc.length; !xc[--k];); // E.g. [4, 11, 15] becomes 4bf.\n\n\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])); // Add leading zeros, decimal point and trailing zeros as required.\n\n\n          str = toFixedPoint(str, e, alphabet.charAt(0));\n        } // The caller will add the sign.\n\n\n        return str;\n      };\n    }(); // Perform division in the specified base. Called by div and convertBase.\n\n\n    div = function () {\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m,\n            temp,\n            xlo,\n            xhi,\n            carry = 0,\n            i = x.length,\n            klo = k % SQRT_BASE,\n            khi = k / SQRT_BASE | 0;\n\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n\n        if (carry) x = [carry].concat(x);\n        return x;\n      }\n\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n          for (i = cmp = 0; i < aL; i++) {\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n\n        return cmp;\n      }\n\n      function subtract(a, b, aL, base) {\n        var i = 0; // Subtract b from a.\n\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        } // Remove leading zeros.\n\n\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\n      } // x: dividend, y: divisor.\n\n\n      return function (x, y, dp, rm, base) {\n        var cmp,\n            e,\n            i,\n            more,\n            n,\n            prod,\n            prodL,\n            q,\n            qc,\n            rem,\n            remL,\n            rem0,\n            xi,\n            xL,\n            yc0,\n            yL,\n            yz,\n            s = x.s == y.s ? 1 : -1,\n            xc = x.c,\n            yc = y.c; // Either NaN, Infinity or 0?\n\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n          return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n        }\n\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        } // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n\n\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n        if (yc[i] > (xc[i] || 0)) e--;\n\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n          for (; remL < yL; rem[remL++] = 0);\n\n          yz = yc.slice();\n          yz = [0].concat(yz);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0; // Compare divisor and remainder.\n\n            cmp = compare(yc, rem, yL, remL); // If divisor < remainder.\n\n            if (cmp < 0) {\n              // Calculate trial digit, n.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.\n\n              n = mathfloor(rem0 / yc0); //  Algorithm:\n              //  product = divisor multiplied by trial digit (n).\n              //  Compare product and remainder.\n              //  If product is greater than remainder:\n              //    Subtract divisor from product, decrement trial digit.\n              //  Subtract product from remainder.\n              //  If product was less than remainder at the last compare:\n              //    Compare new remainder and divisor.\n              //    If remainder is greater than divisor:\n              //      Subtract divisor from remainder, increment trial digit.\n\n              if (n > 1) {\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1; // product = divisor * trial digit.\n\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length; // Compare product and remainder.\n                // If product > remainder then trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--; // Subtract divisor from product.\n\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                } // product = divisor\n\n\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n\n              if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.\n\n              subtract(rem, prod, remL, base);\n              remL = rem.length; // If product was < remainder.\n\n              if (cmp == -1) {\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++; // Subtract divisor from remainder.\n\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n            // Add the next digit, n, to the result array.\n\n\n            qc[i++] = n; // Update the remainder.\n\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n\n          more = rem[0] != null; // Leading zero?\n\n          if (!qc[0]) qc.splice(0, 1);\n        }\n\n        if (base == BASE) {\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n\n        return q;\n      };\n    }();\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\n\n\n    function format(n, i, rm, id) {\n      var c0, e, ne, len, str;\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      if (!n.c) return n.toString();\n      c0 = n.c[0];\n      ne = n.e;\n\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n      } else {\n        n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.\n\n        e = n.e;\n        str = coeffToString(n.c);\n        len = str.length; // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n        // Exponential notation.\n\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n          // Append zeros?\n          for (; len < i; str += '0', len++);\n\n          str = toExponential(str, e); // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e, '0'); // Append zeros?\n\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0');\n          } else {\n            i += e - len;\n\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n\n              for (; i--; str += '0');\n            }\n          }\n        }\n      }\n\n      return n.s < 0 && c0 ? '-' + str : str;\n    } // Handle BigNumber.max and BigNumber.min.\n\n\n    function maxOrMin(args, method) {\n      var n,\n          i = 1,\n          m = new BigNumber(args[0]);\n\n      for (; i < args.length; i++) {\n        n = new BigNumber(args[i]); // If any number is NaN, return NaN.\n\n        if (!n.s) {\n          m = n;\n          break;\n        } else if (method.call(m, n)) {\n          m = n;\n        }\n      }\n\n      return m;\n    }\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\n\n\n    function normalise(n, c, e) {\n      var i = 1,\n          j = c.length; // Remove trailing zeros.\n\n      for (; !c[--j]; c.pop()); // Calculate the base 10 exponent. First get the number of digits of c[0].\n\n\n      for (j = c[0]; j >= 10; j /= 10, i++); // Overflow?\n\n\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n        // Infinity.\n        n.c = n.e = null; // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n\n      return n;\n    } // Handle values that fail the validity test in BigNumber.\n\n\n    parseNumeric = function () {\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n          dotAfter = /^([^.]+)\\.$/,\n          dotBefore = /^\\.([^.]+)$/,\n          isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n          whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n      return function (x, str, isNum, b) {\n        var base,\n            s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.\n\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        } else {\n          if (!isNum) {\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n\n            if (b) {\n              base = b; // E.g. '1.' to '1', '.1' to '0.1'\n\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n\n            if (str != s) return new BigNumber(s, base);\n          } // '[BigNumber Error] Not a number: {n}'\n          // '[BigNumber Error] Not a base {b} number: {n}'\n\n\n          if (BigNumber.DEBUG) {\n            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n          } // NaN\n\n\n          x.s = null;\n        }\n\n        x.c = x.e = null;\n      };\n    }();\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\n\n\n    function round(x, sd, rm, r) {\n      var d,\n          i,\n          j,\n          k,\n          n,\n          ni,\n          rd,\n          xc = x.c,\n          pows10 = POWS_TEN; // if x is not Infinity or NaN...\n\n      if (xc) {\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n\n          i = sd - d; // If the rounding digit is in the first element of xc...\n\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0]; // Get the rounding digit at index j of n.\n\n            rd = n / pows10[d - j - 1] % 10 | 0;\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n\n            if (ni >= xc.length) {\n              if (r) {\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0));\n\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni]; // Get the number of digits of n.\n\n              for (d = 1; k >= 10; k /= 10, d++); // Get the index of rd within n.\n\n\n              i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n\n              j = i - LOG_BASE + d; // Get the rounding digit at index j of n.\n\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n            }\n          }\n\n          r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n\n            if (r) {\n              // Convert sd to decimal places.\n              sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n\n            return x;\n          } // Remove excess digits.\n\n\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          } // Round up?\n\n\n          if (r) {\n            for (;;) {\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n\n                j = xc[0] += k;\n\n                for (k = 1; j >= 10; j /= 10, k++); // if i != k the length has increased.\n\n\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          } // Remove trailing zeros.\n\n\n          for (i = xc.length; xc[--i] === 0; xc.pop());\n        } // Overflow? Infinity.\n\n\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null; // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n\n      return x;\n    }\n\n    function valueOf(n) {\n      var str,\n          e = n.e;\n      if (e === null) return n.toString();\n      str = coeffToString(n.c);\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n      return n.s < 0 ? '-' + str : str;\n    } // PROTOTYPE/INSTANCE METHODS\n\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\n\n\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\n\n\n    P.comparedTo = function (y, b) {\n      return compare(this, new BigNumber(y, b));\n    };\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.decimalPlaces = P.dp = function (dp, rm) {\n      var c,\n          n,\n          v,\n          x = this;\n\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), dp + x.e + 1, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.\n\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n      if (n < 0) n = 0;\n      return n;\n    };\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n\n\n    P.dividedBy = P.div = function (y, b) {\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\n\n\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\n\n\n    P.exponentiatedBy = P.pow = function (n, m) {\n      var half,\n          isModExp,\n          i,\n          k,\n          more,\n          nIsBig,\n          nIsNeg,\n          nIsOdd,\n          y,\n          x = this;\n      n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.\n\n      if (n.c && !n.isInteger()) {\n        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));\n      }\n\n      if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.\n\n      nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n        // The sign of the result of pow when x is negative depends on the evenness of n.\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\n        return m ? y.mod(m) : y;\n      }\n\n      nIsNeg = n.s < 0;\n\n      if (m) {\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n        if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n        // If x is negative and n is odd, k = -0, else k = 0.\n        k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.\n\n        if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.\n\n        return new BigNumber(nIsNeg ? 1 / k : k);\n      } else if (POW_PRECISION) {\n        // Truncating each coefficient array to a length of k after each multiplication\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\n        // i.e. there will be a minimum of 28 guard digits retained.\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\n      }\n\n      if (nIsBig) {\n        half = new BigNumber(0.5);\n        if (nIsNeg) n.s = 1;\n        nIsOdd = isOdd(n);\n      } else {\n        i = Math.abs(+valueOf(n));\n        nIsOdd = i % 2;\n      }\n\n      y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.\n\n      for (;;) {\n        if (nIsOdd) {\n          y = y.times(x);\n          if (!y.c) break;\n\n          if (k) {\n            if (y.c.length > k) y.c.length = k;\n          } else if (isModExp) {\n            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n          }\n        }\n\n        if (i) {\n          i = mathfloor(i / 2);\n          if (i === 0) break;\n          nIsOdd = i % 2;\n        } else {\n          n = n.times(half);\n          round(n, n.e + 1, 1);\n\n          if (n.e > 14) {\n            nIsOdd = isOdd(n);\n          } else {\n            i = +valueOf(n);\n            if (i === 0) break;\n            nIsOdd = i % 2;\n          }\n        }\n\n        x = x.times(x);\n\n        if (k) {\n          if (x.c && x.c.length > k) x.c.length = k;\n        } else if (isModExp) {\n          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n        }\n      }\n\n      if (isModExp) return y;\n      if (nIsNeg) y = ONE.div(y);\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\n\n\n    P.integerValue = function (rm) {\n      var n = new BigNumber(this);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(n, n.e + 1, rm);\n    };\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isEqualTo = P.eq = function (y, b) {\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\n\n\n    P.isFinite = function () {\n      return !!this.c;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isGreaterThan = P.gt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n\n\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\n\n\n    P.isInteger = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isLessThan = P.lt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n\n\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\n\n\n    P.isNaN = function () {\n      return !this.s;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\n\n\n    P.isNegative = function () {\n      return this.s < 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\n\n\n    P.isPositive = function () {\n      return this.s > 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\n\n\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.minus = function (y, b) {\n      var i,\n          j,\n          t,\n          xLTy,\n          x = this,\n          a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?\n\n        if (!xc[0] || !yc[0]) {\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n          ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Determine which is the bigger number.\n\n      if (a = xe - ye) {\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n\n        t.reverse(); // Prepend zeros to equalise exponents.\n\n        for (b = a; b--; t.push(0));\n\n        t.reverse();\n      } else {\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n        for (a = b = 0; b < j; b++) {\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      } // x < y? Point xc to the array of the bigger number.\n\n\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n      b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n\n      if (b > 0) for (; b--; xc[i++] = 0);\n      b = BASE - 1; // Subtract yc from xc.\n\n      for (; j > a;) {\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b);\n\n          --xc[i];\n          xc[j] += BASE;\n        }\n\n        xc[j] -= yc[j];\n      } // Remove leading zeros and adjust exponent accordingly.\n\n\n      for (; xc[0] == 0; xc.splice(0, 1), --ye); // Zero?\n\n\n      if (!xc[0]) {\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\n\n\n    P.modulo = P.mod = function (y, b) {\n      var q,\n          s,\n          x = this;\n      y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN); // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n\n      if (MODULO_MODE == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n\n      y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.\n\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n      return y;\n    };\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\n\n\n    P.multipliedBy = P.times = function (y, b) {\n      var c,\n          e,\n          i,\n          j,\n          k,\n          m,\n          xcL,\n          xlo,\n          xhi,\n          ycL,\n          ylo,\n          yhi,\n          zc,\n          base,\n          sqrtBase,\n          x = this,\n          xc = x.c,\n          yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?\n\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s; // Return ±Infinity if either is ±Infinity.\n\n          if (!xc || !yc) {\n            y.c = y.e = null; // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n\n        return y;\n      }\n\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length; // Ensure xc points to longer array and xcL to its length.\n\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.\n\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n\n        zc[j] = c;\n      }\n\n      if (c) {\n        ++e;\n      } else {\n        zc.splice(0, 1);\n      }\n\n      return normalise(y, zc, e);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\n\n\n    P.negated = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.plus = function (y, b) {\n      var t,\n          x = this,\n          a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0); // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n\n        t.reverse();\n\n        for (; a--; t.push(0));\n\n        t.reverse();\n      }\n\n      a = xc.length;\n      b = yc.length; // Point xc to the longer array, and b to the shorter length.\n\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n      }\n\n      if (a) {\n        xc = [a].concat(xc);\n        ++ye;\n      } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n\n\n    P.precision = P.sd = function (sd, rm) {\n      var c,\n          n,\n          v,\n          x = this;\n\n      if (sd != null && sd !== !!sd) {\n        intCheck(sd, 1, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), sd, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n\n      if (v = c[v]) {\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--); // Add the number of digits of the first element.\n\n\n        for (v = c[0]; v >= 10; v /= 10, n++);\n      }\n\n      if (sd && x.e + 1 > n) n = x.e + 1;\n      return n;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\n\n\n    P.shiftedBy = function (k) {\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      return this.times('1e' + k);\n    };\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n\n\n    P.squareRoot = P.sqrt = function () {\n      var m,\n          n,\n          r,\n          rep,\n          t,\n          x = this,\n          c = x.c,\n          s = x.s,\n          e = x.e,\n          dp = DECIMAL_PLACES + 4,\n          half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      } // Initial estimate.\n\n\n      s = Math.sqrt(+valueOf(x)); // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(+n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n        if (s == 1 / 0) {\n          n = '1e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      } // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n\n\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0; // Newton-Raphson iteration.\n\n        for (;;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n\n            if (n == '9999' || !rep && n == '4999') {\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.toExponential = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp++;\n      }\n\n      return format(this, dp, rm, 1);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.toFixed = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp = dp + this.e + 1;\n      }\n\n      return format(this, dp, rm);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\n\n\n    P.toFormat = function (dp, rm, format) {\n      var str,\n          x = this;\n\n      if (format == null) {\n        if (dp != null && rm && typeof rm == 'object') {\n          format = rm;\n          rm = null;\n        } else if (dp && typeof dp == 'object') {\n          format = dp;\n          dp = rm = null;\n        } else {\n          format = FORMAT;\n        }\n      } else if (typeof format != 'object') {\n        throw Error(bignumberError + 'Argument not an object: ' + format);\n      }\n\n      str = x.toFixed(dp, rm);\n\n      if (x.c) {\n        var i,\n            arr = str.split('.'),\n            g1 = +format.groupSize,\n            g2 = +format.secondaryGroupSize,\n            groupSeparator = format.groupSeparator || '',\n            intPart = arr[0],\n            fractionPart = arr[1],\n            isNeg = x.s < 0,\n            intDigits = isNeg ? intPart.slice(1) : intPart,\n            len = intDigits.length;\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\n\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n\n        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;\n      }\n\n      return (format.prefix || '') + str + (format.suffix || '');\n    };\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\n\n\n    P.toFraction = function (md) {\n      var d,\n          d0,\n          d1,\n          d2,\n          e,\n          exp,\n          n,\n          n0,\n          n1,\n          q,\n          r,\n          s,\n          x = this,\n          xc = x.c;\n\n      if (md != null) {\n        n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.\n\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n        }\n      }\n\n      if (!xc) return new BigNumber(x);\n      d = new BigNumber(ONE);\n      n1 = d0 = new BigNumber(ONE);\n      d1 = n0 = new BigNumber(ONE);\n      s = coeffToString(xc); // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s); // n0 = d1 = 0\n\n      n0.c[0] = 0;\n\n      for (;;) {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.comparedTo(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e = e * 2; // Determine which fraction is closer to x, n0/d0 or n1/d1\n\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n      MAX_EXP = exp;\n      return r;\n    };\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\n\n\n    P.toNumber = function () {\n      return +valueOf(this);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n\n\n    P.toPrecision = function (sd, rm) {\n      if (sd != null) intCheck(sd, 1, MAX);\n      return format(this, sd, rm, 2);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\n\n\n    P.toString = function (b) {\n      var str,\n          n = this,\n          s = n.s,\n          e = n.e; // Infinity or NaN?\n\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        if (b == null) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');\n        } else if (b === 10) {\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\n        } else {\n          intCheck(b, 2, ALPHABET.length, 'Base');\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n        }\n\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n\n      return str;\n    };\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\n\n\n    P.valueOf = P.toJSON = function () {\n      return valueOf(this);\n    };\n\n    P._isBigNumber = true;\n    if (configObject != null) BigNumber.set(configObject);\n    return BigNumber;\n  } // PRIVATE HELPER FUNCTIONS\n  // These functions don't need access to variables,\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  } // Return a coefficient array as a string of base 10 digits.\n\n\n  function coeffToString(a) {\n    var s,\n        z,\n        i = 1,\n        j = a.length,\n        r = a[0] + '';\n\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n\n      for (; z--; s = '0' + s);\n\n      r += s;\n    } // Determine trailing zeros.\n\n\n    for (j = r.length; r.charCodeAt(--j) === 48;);\n\n    return r.slice(0, j + 1 || 1);\n  } // Compare the value of BigNumbers x and y.\n\n\n  function compare(x, y) {\n    var a,\n        b,\n        xc = x.c,\n        yc = y.c,\n        i = x.s,\n        j = y.s,\n        k = x.e,\n        l = y.e; // Either NaN?\n\n    if (!i || !j) return null;\n    a = xc && !xc[0];\n    b = yc && !yc[0]; // Either zero?\n\n    if (a || b) return a ? b ? 0 : -j : i; // Signs differ?\n\n    if (i != j) return i;\n    a = i < 0;\n    b = k == l; // Either Infinity?\n\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.\n\n    if (!b) return k > l ^ a ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1; // Compare lengths.\n\n\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\n\n\n  function intCheck(n, min, max, name) {\n    if (n < min || n > max || n !== mathfloor(n)) {\n      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));\n    }\n  } // Assumes finite n.\n\n\n  function isOdd(n) {\n    var k = n.c.length - 1;\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n  }\n\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n  }\n\n  function toFixedPoint(str, e, z) {\n    var len, zs; // Negative exponent?\n\n    if (e < 0) {\n      // Prepend zeros.\n      for (zs = z + '.'; ++e; zs += z);\n\n      str = zs + str; // Positive exponent\n    } else {\n      len = str.length; // Append zeros.\n\n      if (++e > len) {\n        for (zs = z, e -= len; --e; zs += z);\n\n        str += zs;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n\n    return str;\n  } // EXPORT\n\n\n  BigNumber = clone();\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber; // AMD.\n\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return BigNumber;\n    }); // Node.js and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber; // Browser.\n  } else {\n    if (!globalObject) {\n      globalObject = typeof self != 'undefined' && self ? self : window;\n    }\n\n    globalObject.BigNumber = BigNumber;\n  }\n})(void 0);","'use strict'\n\nconst Bignumber = require('bignumber.js').BigNumber\n\nexports.MT = {\n  POS_INT: 0,\n  NEG_INT: 1,\n  BYTE_STRING: 2,\n  UTF8_STRING: 3,\n  ARRAY: 4,\n  MAP: 5,\n  TAG: 6,\n  SIMPLE_FLOAT: 7\n}\n\nexports.TAG = {\n  DATE_STRING: 0,\n  DATE_EPOCH: 1,\n  POS_BIGINT: 2,\n  NEG_BIGINT: 3,\n  DECIMAL_FRAC: 4,\n  BIGFLOAT: 5,\n  BASE64URL_EXPECTED: 21,\n  BASE64_EXPECTED: 22,\n  BASE16_EXPECTED: 23,\n  CBOR: 24,\n  URI: 32,\n  BASE64URL: 33,\n  BASE64: 34,\n  REGEXP: 35,\n  MIME: 36\n}\n\nexports.NUMBYTES = {\n  ZERO: 0,\n  ONE: 24,\n  TWO: 25,\n  FOUR: 26,\n  EIGHT: 27,\n  INDEFINITE: 31\n}\n\nexports.SIMPLE = {\n  FALSE: 20,\n  TRUE: 21,\n  NULL: 22,\n  UNDEFINED: 23\n}\n\nexports.SYMS = {\n  NULL: Symbol('null'),\n  UNDEFINED: Symbol('undef'),\n  PARENT: Symbol('parent'),\n  BREAK: Symbol('break'),\n  STREAM: Symbol('stream')\n}\n\nexports.SHIFT32 = Math.pow(2, 32)\nexports.SHIFT16 = Math.pow(2, 16)\n\nexports.MAX_SAFE_HIGH = 0x1fffff\nexports.NEG_ONE = new Bignumber(-1)\nexports.TEN = new Bignumber(10)\nexports.TWO = new Bignumber(2)\n\nexports.PARENT = {\n  ARRAY: 0,\n  OBJECT: 1,\n  MAP: 2,\n  TAG: 3,\n  BYTE_STRING: 4,\n  UTF8_STRING: 5\n}\n","'use strict'\n\nconst { Buffer } = require('buffer')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst constants = require('./constants')\nconst SHIFT32 = constants.SHIFT32\nconst SHIFT16 = constants.SHIFT16\nconst MAX_SAFE_HIGH = 0x1fffff\n\nexports.parseHalf = function parseHalf (buf) {\n  var exp, mant, sign\n  sign = buf[0] & 0x80 ? -1 : 1\n  exp = (buf[0] & 0x7C) >> 2\n  mant = ((buf[0] & 0x03) << 8) | buf[1]\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant\n  } else if (exp === 0x1f) {\n    return sign * (mant ? 0 / 0 : 2e308)\n  } else {\n    return sign * Math.pow(2, exp - 25) * (1024 + mant)\n  }\n}\n\nfunction toHex (n) {\n  if (n < 16) {\n    return '0' + n.toString(16)\n  }\n\n  return n.toString(16)\n}\n\nexports.arrayBufferToBignumber = function (buf) {\n  const len = buf.byteLength\n  let res = ''\n  for (let i = 0; i < len; i++) {\n    res += toHex(buf[i])\n  }\n\n  return new Bignumber(res, 16)\n}\n\n// convert an Object into a Map\nexports.buildMap = (obj) => {\n  const res = new Map()\n  const keys = Object.keys(obj)\n  const length = keys.length\n  for (let i = 0; i < length; i++) {\n    res.set(keys[i], obj[keys[i]])\n  }\n  return res\n}\n\nexports.buildInt32 = (f, g) => {\n  return f * SHIFT16 + g\n}\n\nexports.buildInt64 = (f1, f2, g1, g2) => {\n  const f = exports.buildInt32(f1, f2)\n  const g = exports.buildInt32(g1, g2)\n\n  if (f > MAX_SAFE_HIGH) {\n    return new Bignumber(f).times(SHIFT32).plus(g)\n  } else {\n    return (f * SHIFT32) + g\n  }\n}\n\nexports.writeHalf = function writeHalf (buf, half) {\n  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n\n  const u32 = Buffer.allocUnsafe(4)\n  u32.writeFloatBE(half, 0)\n  const u = u32.readUInt32BE(0)\n\n  // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n\n  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion\n  if ((u & 0x1FFF) !== 0) {\n    return false\n  }\n\n  //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n  var s16 = (u >> 16) & 0x8000 // top bit is sign\n  const exp = (u >> 23) & 0xff // then 5 bits of exponent\n  const mant = u & 0x7fffff\n\n  //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n\n  // hildjj: zeros already handled.  Assert if you don't believe me.\n\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n  if ((exp >= 113) && (exp <= 142)) {\n    s16 += ((exp - 112) << 10) + (mant >> 13)\n\n  //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n  //     if (mant & ((1 << (126 - exp)) - 1))\n  //       goto float32;         /* loss of precision */\n  //     s16 += ((mant + 0x800000) >> (126 - exp));\n  } else if ((exp >= 103) && (exp < 113)) {\n    if (mant & ((1 << (126 - exp)) - 1)) {\n      return false\n    }\n    s16 += ((mant + 0x800000) >> (126 - exp))\n\n    //   } else if (exp == 255 && mant == 0) { /* Inf */\n    //     s16 += 0x7c00;\n\n    // hildjj: Infinity already handled\n\n  //   } else\n  //     goto float32;           /* loss of range */\n  } else {\n    return false\n  }\n\n  //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n  buf.writeUInt16BE(s16, 0)\n  return true\n}\n\nexports.keySorter = function (a, b) {\n  var lenA = a[0].byteLength\n  var lenB = b[0].byteLength\n\n  if (lenA > lenB) {\n    return 1\n  }\n\n  if (lenB > lenA) {\n    return -1\n  }\n\n  return a[0].compare(b[0])\n}\n\n// Adapted from http://www.2ality.com/2012/03/signedzero.html\nexports.isNegativeZero = (x) => {\n  return x === 0 && (1 / x < 0)\n}\n\nexports.nextPowerOf2 = (n) => {\n  let count = 0\n  // First n in the below condition is for\n  // the case where n is 0\n  if (n && !(n & (n - 1))) {\n    return n\n  }\n\n  while (n !== 0) {\n    n >>= 1\n    count += 1\n  }\n\n  return 1 << count\n}\n","\"use strict\";\n\nvar g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;","\"use strict\";\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n  i += d;\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = e << mLen | m;\n  eLen += mLen;\n\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n};","'use strict'\n\nconst { Buffer } = require('buffer')\nconst ieee754 = require('ieee754')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst parser = require('./decoder.asm')\nconst utils = require('./utils')\nconst c = require('./constants')\nconst Simple = require('./simple')\nconst Tagged = require('./tagged')\nconst { URL } = require('iso-url')\n\n/**\n * Transform binary cbor data into JavaScript objects.\n */\nclass Decoder {\n  /**\n   * @param {Object} [opts={}]\n   * @param {number} [opts.size=65536] - Size of the allocated heap.\n   */\n  constructor (opts) {\n    opts = opts || {}\n\n    if (!opts.size || opts.size < 0x10000) {\n      opts.size = 0x10000\n    } else {\n      // Ensure the size is a power of 2\n      opts.size = utils.nextPowerOf2(opts.size)\n    }\n\n    // Heap use to share the input with the parser\n    this._heap = new ArrayBuffer(opts.size)\n    this._heap8 = new Uint8Array(this._heap)\n    this._buffer = Buffer.from(this._heap)\n\n    this._reset()\n\n    // Known tags\n    this._knownTags = Object.assign({\n      0: (val) => new Date(val),\n      1: (val) => new Date(val * 1000),\n      2: (val) => utils.arrayBufferToBignumber(val),\n      3: (val) => c.NEG_ONE.minus(utils.arrayBufferToBignumber(val)),\n      4: (v) => {\n        // const v = new Uint8Array(val)\n        return c.TEN.pow(v[0]).times(v[1])\n      },\n      5: (v) => {\n        // const v = new Uint8Array(val)\n        return c.TWO.pow(v[0]).times(v[1])\n      },\n      32: (val) => new URL(val),\n      35: (val) => new RegExp(val)\n    }, opts.tags)\n\n    // Initialize asm based parser\n    this.parser = parser(global, {\n      // eslint-disable-next-line no-console\n      log: console.log.bind(console),\n      pushInt: this.pushInt.bind(this),\n      pushInt32: this.pushInt32.bind(this),\n      pushInt32Neg: this.pushInt32Neg.bind(this),\n      pushInt64: this.pushInt64.bind(this),\n      pushInt64Neg: this.pushInt64Neg.bind(this),\n      pushFloat: this.pushFloat.bind(this),\n      pushFloatSingle: this.pushFloatSingle.bind(this),\n      pushFloatDouble: this.pushFloatDouble.bind(this),\n      pushTrue: this.pushTrue.bind(this),\n      pushFalse: this.pushFalse.bind(this),\n      pushUndefined: this.pushUndefined.bind(this),\n      pushNull: this.pushNull.bind(this),\n      pushInfinity: this.pushInfinity.bind(this),\n      pushInfinityNeg: this.pushInfinityNeg.bind(this),\n      pushNaN: this.pushNaN.bind(this),\n      pushNaNNeg: this.pushNaNNeg.bind(this),\n      pushArrayStart: this.pushArrayStart.bind(this),\n      pushArrayStartFixed: this.pushArrayStartFixed.bind(this),\n      pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),\n      pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),\n      pushObjectStart: this.pushObjectStart.bind(this),\n      pushObjectStartFixed: this.pushObjectStartFixed.bind(this),\n      pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),\n      pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),\n      pushByteString: this.pushByteString.bind(this),\n      pushByteStringStart: this.pushByteStringStart.bind(this),\n      pushUtf8String: this.pushUtf8String.bind(this),\n      pushUtf8StringStart: this.pushUtf8StringStart.bind(this),\n      pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),\n      pushTagUnassigned: this.pushTagUnassigned.bind(this),\n      pushTagStart: this.pushTagStart.bind(this),\n      pushTagStart4: this.pushTagStart4.bind(this),\n      pushTagStart8: this.pushTagStart8.bind(this),\n      pushBreak: this.pushBreak.bind(this)\n    }, this._heap)\n  }\n\n  get _depth () {\n    return this._parents.length\n  }\n\n  get _currentParent () {\n    return this._parents[this._depth - 1]\n  }\n\n  get _ref () {\n    return this._currentParent.ref\n  }\n\n  // Finish the current parent\n  _closeParent () {\n    var p = this._parents.pop()\n\n    if (p.length > 0) {\n      throw new Error(`Missing ${p.length} elements`)\n    }\n\n    switch (p.type) {\n      case c.PARENT.TAG:\n        this._push(\n          this.createTag(p.ref[0], p.ref[1])\n        )\n        break\n      case c.PARENT.BYTE_STRING:\n        this._push(this.createByteString(p.ref, p.length))\n        break\n      case c.PARENT.UTF8_STRING:\n        this._push(this.createUtf8String(p.ref, p.length))\n        break\n      case c.PARENT.MAP:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map')\n        }\n        this._push(this.createMap(p.ref, p.length))\n        break\n      case c.PARENT.OBJECT:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map')\n        }\n        this._push(this.createObject(p.ref, p.length))\n        break\n      case c.PARENT.ARRAY:\n        this._push(this.createArray(p.ref, p.length))\n        break\n      default:\n        break\n    }\n\n    if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {\n      this._dec()\n    }\n  }\n\n  // Reduce the expected length of the current parent by one\n  _dec () {\n    const p = this._currentParent\n    // The current parent does not know the epxected child length\n\n    if (p.length < 0) {\n      return\n    }\n\n    p.length--\n\n    // All children were seen, we can close the current parent\n    if (p.length === 0) {\n      this._closeParent()\n    }\n  }\n\n  // Push any value to the current parent\n  _push (val, hasChildren) {\n    const p = this._currentParent\n    p.values++\n\n    switch (p.type) {\n      case c.PARENT.ARRAY:\n      case c.PARENT.BYTE_STRING:\n      case c.PARENT.UTF8_STRING:\n        if (p.length > -1) {\n          this._ref[this._ref.length - p.length] = val\n        } else {\n          this._ref.push(val)\n        }\n        this._dec()\n        break\n      case c.PARENT.OBJECT:\n        if (p.tmpKey != null) {\n          this._ref[p.tmpKey] = val\n          p.tmpKey = null\n          this._dec()\n        } else {\n          p.tmpKey = val\n\n          if (typeof p.tmpKey !== 'string') {\n            // too bad, convert to a Map\n            p.type = c.PARENT.MAP\n            p.ref = utils.buildMap(p.ref)\n          }\n        }\n        break\n      case c.PARENT.MAP:\n        if (p.tmpKey != null) {\n          this._ref.set(p.tmpKey, val)\n          p.tmpKey = null\n          this._dec()\n        } else {\n          p.tmpKey = val\n        }\n        break\n      case c.PARENT.TAG:\n        this._ref.push(val)\n        if (!hasChildren) {\n          this._dec()\n        }\n        break\n      default:\n        throw new Error('Unknown parent type')\n    }\n  }\n\n  // Create a new parent in the parents list\n  _createParent (obj, type, len) {\n    this._parents[this._depth] = {\n      type: type,\n      length: len,\n      ref: obj,\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  // Reset all state back to the beginning, also used for initiatlization\n  _reset () {\n    this._res = []\n    this._parents = [{\n      type: c.PARENT.ARRAY,\n      length: -1,\n      ref: this._res,\n      values: 0,\n      tmpKey: null\n    }]\n  }\n\n  // -- Interface to customize deoding behaviour\n  createTag (tagNumber, value) {\n    const typ = this._knownTags[tagNumber]\n\n    if (!typ) {\n      return new Tagged(tagNumber, value)\n    }\n\n    return typ(value)\n  }\n\n  createMap (obj, len) {\n    return obj\n  }\n\n  createObject (obj, len) {\n    return obj\n  }\n\n  createArray (arr, len) {\n    return arr\n  }\n\n  createByteString (raw, len) {\n    return Buffer.concat(raw)\n  }\n\n  createByteStringFromHeap (start, end) {\n    if (start === end) {\n      return Buffer.alloc(0)\n    }\n\n    return Buffer.from(this._heap.slice(start, end))\n  }\n\n  createInt (val) {\n    return val\n  }\n\n  createInt32 (f, g) {\n    return utils.buildInt32(f, g)\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return utils.buildInt64(f1, f2, g1, g2)\n  }\n\n  createFloat (val) {\n    return val\n  }\n\n  createFloatSingle (a, b, c, d) {\n    return ieee754.read([a, b, c, d], 0, false, 23, 4)\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    return ieee754.read([a, b, c, d, e, f, g, h], 0, false, 52, 8)\n  }\n\n  createInt32Neg (f, g) {\n    return -1 - utils.buildInt32(f, g)\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    const f = utils.buildInt32(f1, f2)\n    const g = utils.buildInt32(g1, g2)\n\n    if (f > c.MAX_SAFE_HIGH) {\n      return c.NEG_ONE.minus(new Bignumber(f).times(c.SHIFT32).plus(g))\n    }\n\n    return -1 - ((f * c.SHIFT32) + g)\n  }\n\n  createTrue () {\n    return true\n  }\n\n  createFalse () {\n    return false\n  }\n\n  createNull () {\n    return null\n  }\n\n  createUndefined () {\n    return undefined\n  }\n\n  createInfinity () {\n    return Infinity\n  }\n\n  createInfinityNeg () {\n    return -Infinity\n  }\n\n  createNaN () {\n    return NaN\n  }\n\n  createNaNNeg () {\n    return -NaN\n  }\n\n  createUtf8String (raw, len) {\n    return raw.join('')\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    if (start === end) {\n      return ''\n    }\n\n    return this._buffer.toString('utf8', start, end)\n  }\n\n  createSimpleUnassigned (val) {\n    return new Simple(val)\n  }\n\n  // -- Interface for decoder.asm.js\n\n  pushInt (val) {\n    this._push(this.createInt(val))\n  }\n\n  pushInt32 (f, g) {\n    this._push(this.createInt32(f, g))\n  }\n\n  pushInt64 (f1, f2, g1, g2) {\n    this._push(this.createInt64(f1, f2, g1, g2))\n  }\n\n  pushFloat (val) {\n    this._push(this.createFloat(val))\n  }\n\n  pushFloatSingle (a, b, c, d) {\n    this._push(this.createFloatSingle(a, b, c, d))\n  }\n\n  pushFloatDouble (a, b, c, d, e, f, g, h) {\n    this._push(this.createFloatDouble(a, b, c, d, e, f, g, h))\n  }\n\n  pushInt32Neg (f, g) {\n    this._push(this.createInt32Neg(f, g))\n  }\n\n  pushInt64Neg (f1, f2, g1, g2) {\n    this._push(this.createInt64Neg(f1, f2, g1, g2))\n  }\n\n  pushTrue () {\n    this._push(this.createTrue())\n  }\n\n  pushFalse () {\n    this._push(this.createFalse())\n  }\n\n  pushNull () {\n    this._push(this.createNull())\n  }\n\n  pushUndefined () {\n    this._push(this.createUndefined())\n  }\n\n  pushInfinity () {\n    this._push(this.createInfinity())\n  }\n\n  pushInfinityNeg () {\n    this._push(this.createInfinityNeg())\n  }\n\n  pushNaN () {\n    this._push(this.createNaN())\n  }\n\n  pushNaNNeg () {\n    this._push(this.createNaNNeg())\n  }\n\n  pushArrayStart () {\n    this._createParent([], c.PARENT.ARRAY, -1)\n  }\n\n  pushArrayStartFixed (len) {\n    this._createArrayStartFixed(len)\n  }\n\n  pushArrayStartFixed32 (len1, len2) {\n    const len = utils.buildInt32(len1, len2)\n    this._createArrayStartFixed(len)\n  }\n\n  pushArrayStartFixed64 (len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4)\n    this._createArrayStartFixed(len)\n  }\n\n  pushObjectStart () {\n    this._createObjectStartFixed(-1)\n  }\n\n  pushObjectStartFixed (len) {\n    this._createObjectStartFixed(len)\n  }\n\n  pushObjectStartFixed32 (len1, len2) {\n    const len = utils.buildInt32(len1, len2)\n    this._createObjectStartFixed(len)\n  }\n\n  pushObjectStartFixed64 (len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4)\n    this._createObjectStartFixed(len)\n  }\n\n  pushByteStringStart () {\n    this._parents[this._depth] = {\n      type: c.PARENT.BYTE_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  pushByteString (start, end) {\n    this._push(this.createByteStringFromHeap(start, end))\n  }\n\n  pushUtf8StringStart () {\n    this._parents[this._depth] = {\n      type: c.PARENT.UTF8_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  pushUtf8String (start, end) {\n    this._push(this.createUtf8StringFromHeap(start, end))\n  }\n\n  pushSimpleUnassigned (val) {\n    this._push(this.createSimpleUnassigned(val))\n  }\n\n  pushTagStart (tag) {\n    this._parents[this._depth] = {\n      type: c.PARENT.TAG,\n      length: 1,\n      ref: [tag]\n    }\n  }\n\n  pushTagStart4 (f, g) {\n    this.pushTagStart(utils.buildInt32(f, g))\n  }\n\n  pushTagStart8 (f1, f2, g1, g2) {\n    this.pushTagStart(utils.buildInt64(f1, f2, g1, g2))\n  }\n\n  pushTagUnassigned (tagNumber) {\n    this._push(this.createTag(tagNumber))\n  }\n\n  pushBreak () {\n    if (this._currentParent.length > -1) {\n      throw new Error('Unexpected break')\n    }\n\n    this._closeParent()\n  }\n\n  _createObjectStartFixed (len) {\n    if (len === 0) {\n      this._push(this.createObject({}))\n      return\n    }\n\n    this._createParent({}, c.PARENT.OBJECT, len)\n  }\n\n  _createArrayStartFixed (len) {\n    if (len === 0) {\n      this._push(this.createArray([]))\n      return\n    }\n\n    this._createParent(new Array(len), c.PARENT.ARRAY, len)\n  }\n\n  _decode (input) {\n    if (input.byteLength === 0) {\n      throw new Error('Input too short')\n    }\n\n    this._reset()\n    this._heap8.set(input)\n    const code = this.parser.parse(input.byteLength)\n\n    if (this._depth > 1) {\n      while (this._currentParent.length === 0) {\n        this._closeParent()\n      }\n      if (this._depth > 1) {\n        throw new Error('Undeterminated nesting')\n      }\n    }\n\n    if (code > 0) {\n      throw new Error('Failed to parse')\n    }\n\n    if (this._res.length === 0) {\n      throw new Error('No valid result')\n    }\n  }\n\n  // -- Public Interface\n\n  decodeFirst (input) {\n    this._decode(input)\n\n    return this._res[0]\n  }\n\n  decodeAll (input) {\n    this._decode(input)\n\n    return this._res\n  }\n\n  /**\n   * Decode the first cbor object.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {*}\n   */\n  static decode (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Decoder({ size: input.length })\n    return dec.decodeFirst(input)\n  }\n\n  /**\n   * Decode all cbor objects.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {Array<*>}\n   */\n  static decodeAll (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Decoder({ size: input.length })\n    return dec.decodeAll(input)\n  }\n}\n\nDecoder.decodeFirst = Decoder.decode\n\nmodule.exports = Decoder\n","'use strict'\n\nconst constants = require('./constants')\nconst MT = constants.MT\nconst SIMPLE = constants.SIMPLE\nconst SYMS = constants.SYMS\n\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  constructor (value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + (typeof value))\n    }\n    if ((value < 0) || (value > 255) || ((value | 0) !== value)) {\n      throw new Error('value must be a small positive integer: ' + value)\n    }\n    this.value = value\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  toString () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  inspect () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT)\n  }\n\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {bool} - is it Simple?\n   */\n  static isSimple (obj) {\n    return obj instanceof Simple\n  }\n\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {Number} val - the CBOR additional info to convert\n   * @param {bool} hasParent - Does the CBOR item have a parent?\n   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\n   */\n  static decode (val, hasParent) {\n    if (hasParent == null) {\n      hasParent = true\n    }\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false\n      case SIMPLE.TRUE:\n        return true\n      case SIMPLE.NULL:\n        if (hasParent) {\n          return null\n        } else {\n          return SYMS.NULL\n        }\n      case SIMPLE.UNDEFINED:\n        if (hasParent) {\n          return undefined\n        } else {\n          return SYMS.UNDEFINED\n        }\n      case -1:\n        if (!hasParent) {\n          throw new Error('Invalid BREAK')\n        }\n        return SYMS.BREAK\n      default:\n        return new Simple(val)\n    }\n  }\n}\n\nmodule.exports = Simple\n","'use strict'\n\n/**\n * A CBOR tagged item, where the tag does not have semantics specified at the\n * moment, or those semantics threw an error during parsing. Typically this will\n * be an extension point you're not yet expecting.\n */\nclass Tagged {\n  /**\n   * Creates an instance of Tagged.\n   *\n   * @param {Number} tag - the number of the tag\n   * @param {any} value - the value inside the tag\n   * @param {Error} err - the error that was thrown parsing the tag, or null\n   */\n  constructor (tag, value, err) {\n    this.tag = tag\n    this.value = value\n    this.err = err\n    if (typeof this.tag !== 'number') {\n      throw new Error('Invalid tag type (' + (typeof this.tag) + ')')\n    }\n    if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {\n      throw new Error('Tag must be a positive integer: ' + this.tag)\n    }\n  }\n\n  /**\n   * Convert to a String\n   *\n   * @returns {String} string of the form '1(2)'\n   */\n  toString () {\n    return `${this.tag}(${JSON.stringify(this.value)})`\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    gen._pushTag(this.tag)\n    return gen.pushAny(this.value)\n  }\n\n  /**\n   * If we have a converter for this type, do the conversion.  Some converters\n   * are built-in.  Additional ones can be passed in.  If you want to remove\n   * a built-in converter, pass a converter in whose value is 'null' instead\n   * of a function.\n   *\n   * @param {Object} converters - keys in the object are a tag number, the value\n   *   is a function that takes the decoded CBOR and returns a JavaScript value\n   *   of the appropriate type.  Throw an exception in the function on errors.\n   * @returns {any} - the converted item\n   */\n  convert (converters) {\n    var er, f\n    f = converters != null ? converters[this.tag] : undefined\n    if (typeof f !== 'function') {\n      f = Tagged['_tag' + this.tag]\n      if (typeof f !== 'function') {\n        return this\n      }\n    }\n    try {\n      return f.call(Tagged, this.value)\n    } catch (error) {\n      er = error\n      this.err = er\n      return this\n    }\n  }\n}\n\nmodule.exports = Tagged\n","'use strict';\n\nconst {\n  URLWithLegacySupport,\n  format,\n  URLSearchParams,\n  defaultBase\n} = require('./src/url');\n\nconst relative = require('./src/relative');\n\nmodule.exports = {\n  URL: URLWithLegacySupport,\n  URLSearchParams,\n  format,\n  relative,\n  defaultBase\n};","'use strict';\n\nconst defaultBase = self.location ? self.location.protocol + '//' + self.location.host : '';\nconst URL = self.URL;\n\nclass URLWithLegacySupport {\n  constructor(url = '', base = defaultBase) {\n    this.super = new URL(url, base);\n    this.path = this.pathname + this.search;\n    this.auth = this.username && this.password ? this.username + ':' + this.password : null;\n    this.query = this.search && this.search.startsWith('?') ? this.search.slice(1) : null;\n  }\n\n  get hash() {\n    return this.super.hash;\n  }\n\n  get host() {\n    return this.super.host;\n  }\n\n  get hostname() {\n    return this.super.hostname;\n  }\n\n  get href() {\n    return this.super.href;\n  }\n\n  get origin() {\n    return this.super.origin;\n  }\n\n  get password() {\n    return this.super.password;\n  }\n\n  get pathname() {\n    return this.super.pathname;\n  }\n\n  get port() {\n    return this.super.port;\n  }\n\n  get protocol() {\n    return this.super.protocol;\n  }\n\n  get search() {\n    return this.super.search;\n  }\n\n  get searchParams() {\n    return this.super.searchParams;\n  }\n\n  get username() {\n    return this.super.username;\n  }\n\n  set hash(hash) {\n    this.super.hash = hash;\n  }\n\n  set host(host) {\n    this.super.host = host;\n  }\n\n  set hostname(hostname) {\n    this.super.hostname = hostname;\n  }\n\n  set href(href) {\n    this.super.href = href;\n  }\n\n  set origin(origin) {\n    this.super.origin = origin;\n  }\n\n  set password(password) {\n    this.super.password = password;\n  }\n\n  set pathname(pathname) {\n    this.super.pathname = pathname;\n  }\n\n  set port(port) {\n    this.super.port = port;\n  }\n\n  set protocol(protocol) {\n    this.super.protocol = protocol;\n  }\n\n  set search(search) {\n    this.super.search = search;\n  }\n\n  set searchParams(searchParams) {\n    this.super.searchParams = searchParams;\n  }\n\n  set username(username) {\n    this.super.username = username;\n  }\n\n  createObjectURL(o) {\n    return this.super.createObjectURL(o);\n  }\n\n  revokeObjectURL(o) {\n    this.super.revokeObjectURL(o);\n  }\n\n  toJSON() {\n    return this.super.toJSON();\n  }\n\n  toString() {\n    return this.super.toString();\n  }\n\n  format() {\n    return this.toString();\n  }\n\n}\n\nfunction format(obj) {\n  if (typeof obj === 'string') {\n    const url = new URL(obj);\n    return url.toString();\n  }\n\n  if (!(obj instanceof URL)) {\n    const userPass = obj.username && obj.password ? \"\".concat(obj.username, \":\").concat(obj.password, \"@\") : '';\n    const auth = obj.auth ? obj.auth + '@' : '';\n    const port = obj.port ? ':' + obj.port : '';\n    const protocol = obj.protocol ? obj.protocol + '//' : '';\n    const host = obj.host || '';\n    const hostname = obj.hostname || '';\n    const search = obj.search || (obj.query ? '?' + obj.query : '');\n    const hash = obj.hash || '';\n    const pathname = obj.pathname || '';\n    const path = obj.path || pathname + search;\n    return \"\".concat(protocol).concat(userPass || auth).concat(host || hostname + port).concat(path).concat(hash);\n  }\n}\n\nmodule.exports = {\n  URLWithLegacySupport,\n  URLSearchParams: self.URLSearchParams,\n  defaultBase,\n  format\n};","'use strict'\n\n// exports.Commented = require('./commented')\nexports.Diagnose = require('./diagnose')\nexports.Decoder = require('./decoder')\nexports.Encoder = require('./encoder')\nexports.Simple = require('./simple')\nexports.Tagged = require('./tagged')\n\n// exports.comment = exports.Commented.comment\nexports.decodeAll = exports.Decoder.decodeAll\nexports.decodeFirst = exports.Decoder.decodeFirst\nexports.diagnose = exports.Diagnose.diagnose\nexports.encode = exports.Encoder.encode\nexports.decode = exports.Decoder.decode\n\nexports.leveldb = {\n  decode: exports.Decoder.decodeAll,\n  encode: exports.Encoder.encode,\n  buffer: true,\n  name: 'cbor'\n}\n","'use strict'\n\nconst { Buffer } = require('buffer')\nconst Decoder = require('./decoder')\nconst utils = require('./utils')\n\n/**\n * Output the diagnostic format from a stream of CBOR bytes.\n *\n */\nclass Diagnose extends Decoder {\n  createTag (tagNumber, value) {\n    return `${tagNumber}(${value})`\n  }\n\n  createInt (val) {\n    return super.createInt(val).toString()\n  }\n\n  createInt32 (f, g) {\n    return super.createInt32(f, g).toString()\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return super.createInt64(f1, f2, g1, g2).toString()\n  }\n\n  createInt32Neg (f, g) {\n    return super.createInt32Neg(f, g).toString()\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    return super.createInt64Neg(f1, f2, g1, g2).toString()\n  }\n\n  createTrue () {\n    return 'true'\n  }\n\n  createFalse () {\n    return 'false'\n  }\n\n  createFloat (val) {\n    const fl = super.createFloat(val)\n    if (utils.isNegativeZero(val)) {\n      return '-0_1'\n    }\n\n    return `${fl}_1`\n  }\n\n  createFloatSingle (a, b, c, d) {\n    const fl = super.createFloatSingle(a, b, c, d)\n    return `${fl}_2`\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h)\n    return `${fl}_3`\n  }\n\n  createByteString (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n    return `h'${val}`\n  }\n\n  createByteStringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createByteStringFromHeap(start, end)\n    )).toString('hex')\n\n    return `h'${val}'`\n  }\n\n  createInfinity () {\n    return 'Infinity_1'\n  }\n\n  createInfinityNeg () {\n    return '-Infinity_1'\n  }\n\n  createNaN () {\n    return 'NaN_1'\n  }\n\n  createNaNNeg () {\n    return '-NaN_1'\n  }\n\n  createNull () {\n    return 'null'\n  }\n\n  createUndefined () {\n    return 'undefined'\n  }\n\n  createSimpleUnassigned (val) {\n    return `simple(${val})`\n  }\n\n  createArray (arr, len) {\n    const val = super.createArray(arr, len)\n\n    if (len === -1) {\n      // indefinite\n      return `[_ ${val.join(', ')}]`\n    }\n\n    return `[${val.join(', ')}]`\n  }\n\n  createMap (map, len) {\n    const val = super.createMap(map)\n    const list = Array.from(val.keys())\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${list}}`\n    }\n\n    return `{${list}}`\n  }\n\n  createObject (obj, len) {\n    const val = super.createObject(obj)\n    const map = Object.keys(val)\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${map}}`\n    }\n\n    return `{${map}}`\n  }\n\n  createUtf8String (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n\n    return `\"${val}\"`\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createUtf8StringFromHeap(start, end)\n    )).toString('utf8')\n\n    return `\"${val}\"`\n  }\n\n  static diagnose (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Diagnose()\n    return dec.decodeFirst(input)\n  }\n}\n\nmodule.exports = Diagnose\n\nfunction collectObject (val) {\n  return (acc, key) => {\n    if (acc) {\n      return `${acc}, ${key}: ${val[key]}`\n    }\n    return `${key}: ${val[key]}`\n  }\n}\n","'use strict';\n\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n} // Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\n\n\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\n\nfunction getLens(b64) {\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  } // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n\n\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n  return [validLen, placeHoldersLen];\n} // base64 is 4/3 + up to two characters of the original data\n\n\nfunction byteLength(b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction toByteArray(b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars\n\n  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n  var i;\n\n  for (i = 0; i < len; i += 4) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = tmp >> 16 & 0xFF;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  return arr;\n}\n\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\n\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n\n  return output.join('');\n}\n\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n  // go through the array every three bytes, we'll deal with trailing stuff later\n\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n  }\n\n  return parts.join('');\n}","\"use strict\";\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};","/* eslint-disable */\n\nmodule.exports = function decodeAsm (stdlib, foreign, buffer) {\n  'use asm'\n\n  // -- Imports\n\n  var heap = new stdlib.Uint8Array(buffer)\n  // var log = foreign.log\n  var pushInt = foreign.pushInt\n  var pushInt32 = foreign.pushInt32\n  var pushInt32Neg = foreign.pushInt32Neg\n  var pushInt64 = foreign.pushInt64\n  var pushInt64Neg = foreign.pushInt64Neg\n  var pushFloat = foreign.pushFloat\n  var pushFloatSingle = foreign.pushFloatSingle\n  var pushFloatDouble = foreign.pushFloatDouble\n  var pushTrue = foreign.pushTrue\n  var pushFalse = foreign.pushFalse\n  var pushUndefined = foreign.pushUndefined\n  var pushNull = foreign.pushNull\n  var pushInfinity = foreign.pushInfinity\n  var pushInfinityNeg = foreign.pushInfinityNeg\n  var pushNaN = foreign.pushNaN\n  var pushNaNNeg = foreign.pushNaNNeg\n\n  var pushArrayStart = foreign.pushArrayStart\n  var pushArrayStartFixed = foreign.pushArrayStartFixed\n  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32\n  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64\n  var pushObjectStart = foreign.pushObjectStart\n  var pushObjectStartFixed = foreign.pushObjectStartFixed\n  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32\n  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64\n\n  var pushByteString = foreign.pushByteString\n  var pushByteStringStart = foreign.pushByteStringStart\n  var pushUtf8String = foreign.pushUtf8String\n  var pushUtf8StringStart = foreign.pushUtf8StringStart\n\n  var pushSimpleUnassigned = foreign.pushSimpleUnassigned\n\n  var pushTagStart = foreign.pushTagStart\n  var pushTagStart4 = foreign.pushTagStart4\n  var pushTagStart8 = foreign.pushTagStart8\n  var pushTagUnassigned = foreign.pushTagUnassigned\n\n  var pushBreak = foreign.pushBreak\n\n  var pow = stdlib.Math.pow\n\n  // -- Constants\n\n\n  // -- Mutable Variables\n\n  var offset = 0\n  var inputLength = 0\n  var code = 0\n\n  // Decode a cbor string represented as Uint8Array\n  // which is allocated on the heap from 0 to inputLength\n  //\n  // input - Int\n  //\n  // Returns Code - Int,\n  // Success = 0\n  // Error > 0\n  function parse (input) {\n    input = input | 0\n\n    offset = 0\n    inputLength = input\n\n    while ((offset | 0) < (inputLength | 0)) {\n      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0\n\n      if ((code | 0) > 0) {\n        break\n      }\n    }\n\n    return code | 0\n  }\n\n  // -- Helper Function\n\n  function checkOffset (n) {\n    n = n | 0\n\n    if ((((offset | 0) + (n | 0)) | 0) < (inputLength | 0)) {\n      return 0\n    }\n\n    return 1\n  }\n\n  function readUInt16 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 8) | heap[(n + 1) | 0]\n    ) | 0\n  }\n\n  function readUInt32 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 24) | (heap[(n + 1) | 0] << 16) | (heap[(n + 2) | 0] << 8) | heap[(n + 3) | 0]\n    ) | 0\n  }\n\n  // -- Initial Byte Handlers\n\n  function INT_P (octet) {\n    octet = octet | 0\n\n    pushInt(octet | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_P_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_P_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushInt(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_P_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_P_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function INT_N (octet) {\n    octet = octet | 0\n\n    pushInt((-1 - ((octet - 32) | 0)) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_N_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(\n      (-1 - (heap[(offset + 1) | 0] | 0)) | 0\n    )\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_N_16 (octet) {\n    octet = octet | 0\n\n    var val = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    val = readUInt16((offset + 1) | 0) | 0\n    pushInt((-1 - (val | 0)) | 0)\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_N_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_N_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function BYTE_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 64) | 0\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BYTE_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushByteStringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UTF8_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 96) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function UTF8_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushUtf8StringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY (octet) {\n    octet = octet | 0\n\n    pushArrayStartFixed((octet - 128) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function ARRAY_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function ARRAY_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function ARRAY_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ARRAY_BREAK (octet) {\n    octet = octet | 0\n\n    pushArrayStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP (octet) {\n    octet = octet | 0\n\n    var step = 0\n\n    step = (octet - 160) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(step | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function MAP_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function MAP_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function MAP_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function MAP_BREAK (octet) {\n    octet = octet | 0\n\n    pushObjectStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function TAG_KNOWN (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_POS (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_NEG (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_FRAC (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_FLOAT (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64_URL (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE16 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_1 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushTagStart(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_2 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushTagStart(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_4 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushTagStart4(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushTagStart8(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9 | 0)\n\n    return 0\n  }\n\n  function SIMPLE_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushSimpleUnassigned(((octet | 0) - 224) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FALSE (octet) {\n    octet = octet | 0\n\n    pushFalse()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_TRUE (octet) {\n    octet = octet | 0\n\n    pushTrue()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_NULL (octet) {\n    octet = octet | 0\n\n    pushNull()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_UNDEFINED (octet) {\n    octet = octet | 0\n\n    pushUndefined()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_BYTE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushSimpleUnassigned(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2)  | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_HALF (octet) {\n    octet = octet | 0\n\n    var f = 0\n    var g = 0\n    var sign = 1.0\n    var exp = 0.0\n    var mant = 0.0\n    var r = 0.0\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    f = heap[(offset + 1) | 0] | 0\n    g = heap[(offset + 2) | 0] | 0\n\n    if ((f | 0) & 0x80) {\n      sign = -1.0\n    }\n\n    exp = +(((f | 0) & 0x7C) >> 2)\n    mant = +((((f | 0) & 0x03) << 8) | g)\n\n    if (+exp == 0.0) {\n      pushFloat(+(\n        (+sign) * +5.9604644775390625e-8 * (+mant)\n      ))\n    } else if (+exp == 31.0) {\n      if (+sign == 1.0) {\n        if (+mant > 0.0) {\n          pushNaN()\n        } else {\n          pushInfinity()\n        }\n      } else {\n        if (+mant > 0.0) {\n          pushNaNNeg()\n        } else {\n          pushInfinityNeg()\n        }\n      }\n    } else {\n      pushFloat(+(\n        +sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)\n      ))\n    }\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_SINGLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushFloatSingle(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_DOUBLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushFloatDouble(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0,\n      heap[(offset + 5) | 0] | 0,\n      heap[(offset + 6) | 0] | 0,\n      heap[(offset + 7) | 0] | 0,\n      heap[(offset + 8) | 0] | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ERROR (octet) {\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BREAK (octet) {\n    octet = octet | 0\n\n    pushBreak()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  // -- Jump Table\n\n  var jumpTable = [\n    // Integer 0x00..0x17 (0..23)\n    INT_P, // 0x00\n    INT_P, // 0x01\n    INT_P, // 0x02\n    INT_P, // 0x03\n    INT_P, // 0x04\n    INT_P, // 0x05\n    INT_P, // 0x06\n    INT_P, // 0x07\n    INT_P, // 0x08\n    INT_P, // 0x09\n    INT_P, // 0x0A\n    INT_P, // 0x0B\n    INT_P, // 0x0C\n    INT_P, // 0x0D\n    INT_P, // 0x0E\n    INT_P, // 0x0F\n    INT_P, // 0x10\n    INT_P, // 0x11\n    INT_P, // 0x12\n    INT_P, // 0x13\n    INT_P, // 0x14\n    INT_P, // 0x15\n    INT_P, // 0x16\n    INT_P, // 0x17\n    // Unsigned integer (one-byte uint8_t follows)\n    UINT_P_8, // 0x18\n    // Unsigned integer (two-byte uint16_t follows)\n    UINT_P_16, // 0x19\n    // Unsigned integer (four-byte uint32_t follows)\n    UINT_P_32, // 0x1a\n    // Unsigned integer (eight-byte uint64_t follows)\n    UINT_P_64, // 0x1b\n    ERROR, // 0x1c\n    ERROR, // 0x1d\n    ERROR, // 0x1e\n    ERROR, // 0x1f\n    // Negative integer -1-0x00..-1-0x17 (-1..-24)\n    INT_N, // 0x20\n    INT_N, // 0x21\n    INT_N, // 0x22\n    INT_N, // 0x23\n    INT_N, // 0x24\n    INT_N, // 0x25\n    INT_N, // 0x26\n    INT_N, // 0x27\n    INT_N, // 0x28\n    INT_N, // 0x29\n    INT_N, // 0x2A\n    INT_N, // 0x2B\n    INT_N, // 0x2C\n    INT_N, // 0x2D\n    INT_N, // 0x2E\n    INT_N, // 0x2F\n    INT_N, // 0x30\n    INT_N, // 0x31\n    INT_N, // 0x32\n    INT_N, // 0x33\n    INT_N, // 0x34\n    INT_N, // 0x35\n    INT_N, // 0x36\n    INT_N, // 0x37\n    // Negative integer -1-n (one-byte uint8_t for n follows)\n    UINT_N_8, // 0x38\n    // Negative integer -1-n (two-byte uint16_t for n follows)\n    UINT_N_16, // 0x39\n    // Negative integer -1-n (four-byte uint32_t for nfollows)\n    UINT_N_32, // 0x3a\n    // Negative integer -1-n (eight-byte uint64_t for n follows)\n    UINT_N_64, // 0x3b\n    ERROR, // 0x3c\n    ERROR, // 0x3d\n    ERROR, // 0x3e\n    ERROR, // 0x3f\n    // byte string (0x00..0x17 bytes follow)\n    BYTE_STRING, // 0x40\n    BYTE_STRING, // 0x41\n    BYTE_STRING, // 0x42\n    BYTE_STRING, // 0x43\n    BYTE_STRING, // 0x44\n    BYTE_STRING, // 0x45\n    BYTE_STRING, // 0x46\n    BYTE_STRING, // 0x47\n    BYTE_STRING, // 0x48\n    BYTE_STRING, // 0x49\n    BYTE_STRING, // 0x4A\n    BYTE_STRING, // 0x4B\n    BYTE_STRING, // 0x4C\n    BYTE_STRING, // 0x4D\n    BYTE_STRING, // 0x4E\n    BYTE_STRING, // 0x4F\n    BYTE_STRING, // 0x50\n    BYTE_STRING, // 0x51\n    BYTE_STRING, // 0x52\n    BYTE_STRING, // 0x53\n    BYTE_STRING, // 0x54\n    BYTE_STRING, // 0x55\n    BYTE_STRING, // 0x56\n    BYTE_STRING, // 0x57\n    // byte string (one-byte uint8_t for n, and then n bytes follow)\n    BYTE_STRING_8, // 0x58\n    // byte string (two-byte uint16_t for n, and then n bytes follow)\n    BYTE_STRING_16, // 0x59\n    // byte string (four-byte uint32_t for n, and then n bytes follow)\n    BYTE_STRING_32, // 0x5a\n    // byte string (eight-byte uint64_t for n, and then n bytes follow)\n    BYTE_STRING_64, // 0x5b\n    ERROR, // 0x5c\n    ERROR, // 0x5d\n    ERROR, // 0x5e\n    // byte string, byte strings follow, terminated by \"break\"\n    BYTE_STRING_BREAK, // 0x5f\n    // UTF-8 string (0x00..0x17 bytes follow)\n    UTF8_STRING, // 0x60\n    UTF8_STRING, // 0x61\n    UTF8_STRING, // 0x62\n    UTF8_STRING, // 0x63\n    UTF8_STRING, // 0x64\n    UTF8_STRING, // 0x65\n    UTF8_STRING, // 0x66\n    UTF8_STRING, // 0x67\n    UTF8_STRING, // 0x68\n    UTF8_STRING, // 0x69\n    UTF8_STRING, // 0x6A\n    UTF8_STRING, // 0x6B\n    UTF8_STRING, // 0x6C\n    UTF8_STRING, // 0x6D\n    UTF8_STRING, // 0x6E\n    UTF8_STRING, // 0x6F\n    UTF8_STRING, // 0x70\n    UTF8_STRING, // 0x71\n    UTF8_STRING, // 0x72\n    UTF8_STRING, // 0x73\n    UTF8_STRING, // 0x74\n    UTF8_STRING, // 0x75\n    UTF8_STRING, // 0x76\n    UTF8_STRING, // 0x77\n    // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)\n    UTF8_STRING_8, // 0x78\n    // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)\n    UTF8_STRING_16, // 0x79\n    // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)\n    UTF8_STRING_32, // 0x7a\n    // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)\n    UTF8_STRING_64, // 0x7b\n    // UTF-8 string, UTF-8 strings follow, terminated by \"break\"\n    ERROR, // 0x7c\n    ERROR, // 0x7d\n    ERROR, // 0x7e\n    UTF8_STRING_BREAK, // 0x7f\n    // array (0x00..0x17 data items follow)\n    ARRAY, // 0x80\n    ARRAY, // 0x81\n    ARRAY, // 0x82\n    ARRAY, // 0x83\n    ARRAY, // 0x84\n    ARRAY, // 0x85\n    ARRAY, // 0x86\n    ARRAY, // 0x87\n    ARRAY, // 0x88\n    ARRAY, // 0x89\n    ARRAY, // 0x8A\n    ARRAY, // 0x8B\n    ARRAY, // 0x8C\n    ARRAY, // 0x8D\n    ARRAY, // 0x8E\n    ARRAY, // 0x8F\n    ARRAY, // 0x90\n    ARRAY, // 0x91\n    ARRAY, // 0x92\n    ARRAY, // 0x93\n    ARRAY, // 0x94\n    ARRAY, // 0x95\n    ARRAY, // 0x96\n    ARRAY, // 0x97\n    // array (one-byte uint8_t fo, and then n data items follow)\n    ARRAY_8, // 0x98\n    // array (two-byte uint16_t for n, and then n data items follow)\n    ARRAY_16, // 0x99\n    // array (four-byte uint32_t for n, and then n data items follow)\n    ARRAY_32, // 0x9a\n    // array (eight-byte uint64_t for n, and then n data items follow)\n    ARRAY_64, // 0x9b\n    // array, data items follow, terminated by \"break\"\n    ERROR, // 0x9c\n    ERROR, // 0x9d\n    ERROR, // 0x9e\n    ARRAY_BREAK, // 0x9f\n    // map (0x00..0x17 pairs of data items follow)\n    MAP, // 0xa0\n    MAP, // 0xa1\n    MAP, // 0xa2\n    MAP, // 0xa3\n    MAP, // 0xa4\n    MAP, // 0xa5\n    MAP, // 0xa6\n    MAP, // 0xa7\n    MAP, // 0xa8\n    MAP, // 0xa9\n    MAP, // 0xaA\n    MAP, // 0xaB\n    MAP, // 0xaC\n    MAP, // 0xaD\n    MAP, // 0xaE\n    MAP, // 0xaF\n    MAP, // 0xb0\n    MAP, // 0xb1\n    MAP, // 0xb2\n    MAP, // 0xb3\n    MAP, // 0xb4\n    MAP, // 0xb5\n    MAP, // 0xb6\n    MAP, // 0xb7\n    // map (one-byte uint8_t for n, and then n pairs of data items follow)\n    MAP_8, // 0xb8\n    // map (two-byte uint16_t for n, and then n pairs of data items follow)\n    MAP_16, // 0xb9\n    // map (four-byte uint32_t for n, and then n pairs of data items follow)\n    MAP_32, // 0xba\n    // map (eight-byte uint64_t for n, and then n pairs of data items follow)\n    MAP_64, // 0xbb\n    ERROR, // 0xbc\n    ERROR, // 0xbd\n    ERROR, // 0xbe\n    // map, pairs of data items follow, terminated by \"break\"\n    MAP_BREAK, // 0xbf\n    // Text-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc0\n    // Epoch-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc1\n    // Positive bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc2\n    // Negative bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc3\n    // Decimal Fraction (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc4\n    // Bigfloat (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc5\n    // (tagged item)\n    TAG_UNASSIGNED, // 0xc6\n    TAG_UNASSIGNED, // 0xc7\n    TAG_UNASSIGNED, // 0xc8\n    TAG_UNASSIGNED, // 0xc9\n    TAG_UNASSIGNED, // 0xca\n    TAG_UNASSIGNED, // 0xcb\n    TAG_UNASSIGNED, // 0xcc\n    TAG_UNASSIGNED, // 0xcd\n    TAG_UNASSIGNED, // 0xce\n    TAG_UNASSIGNED, // 0xcf\n    TAG_UNASSIGNED, // 0xd0\n    TAG_UNASSIGNED, // 0xd1\n    TAG_UNASSIGNED, // 0xd2\n    TAG_UNASSIGNED, // 0xd3\n    TAG_UNASSIGNED, // 0xd4\n    // Expected Conversion (data item follows; see Section 2.4.4.2)\n    TAG_UNASSIGNED, // 0xd5\n    TAG_UNASSIGNED, // 0xd6\n    TAG_UNASSIGNED, // 0xd7\n    // (more tagged items, 1/2/4/8 bytes and then a data item follow)\n    TAG_MORE_1, // 0xd8\n    TAG_MORE_2, // 0xd9\n    TAG_MORE_4, // 0xda\n    TAG_MORE_8, // 0xdb\n    ERROR, // 0xdc\n    ERROR, // 0xdd\n    ERROR, // 0xde\n    ERROR, // 0xdf\n    // (simple value)\n    SIMPLE_UNASSIGNED, // 0xe0\n    SIMPLE_UNASSIGNED, // 0xe1\n    SIMPLE_UNASSIGNED, // 0xe2\n    SIMPLE_UNASSIGNED, // 0xe3\n    SIMPLE_UNASSIGNED, // 0xe4\n    SIMPLE_UNASSIGNED, // 0xe5\n    SIMPLE_UNASSIGNED, // 0xe6\n    SIMPLE_UNASSIGNED, // 0xe7\n    SIMPLE_UNASSIGNED, // 0xe8\n    SIMPLE_UNASSIGNED, // 0xe9\n    SIMPLE_UNASSIGNED, // 0xea\n    SIMPLE_UNASSIGNED, // 0xeb\n    SIMPLE_UNASSIGNED, // 0xec\n    SIMPLE_UNASSIGNED, // 0xed\n    SIMPLE_UNASSIGNED, // 0xee\n    SIMPLE_UNASSIGNED, // 0xef\n    SIMPLE_UNASSIGNED, // 0xf0\n    SIMPLE_UNASSIGNED, // 0xf1\n    SIMPLE_UNASSIGNED, // 0xf2\n    SIMPLE_UNASSIGNED, // 0xf3\n    // False\n    SIMPLE_FALSE, // 0xf4\n    // True\n    SIMPLE_TRUE, // 0xf5\n    // Null\n    SIMPLE_NULL, // 0xf6\n    // Undefined\n    SIMPLE_UNDEFINED, // 0xf7\n    // (simple value, one byte follows)\n    SIMPLE_BYTE, // 0xf8\n    // Half-Precision Float (two-byte IEEE 754)\n    SIMPLE_FLOAT_HALF, // 0xf9\n    // Single-Precision Float (four-byte IEEE 754)\n    SIMPLE_FLOAT_SINGLE, // 0xfa\n    // Double-Precision Float (eight-byte IEEE 754)\n    SIMPLE_FLOAT_DOUBLE, // 0xfb\n    ERROR, // 0xfc\n    ERROR, // 0xfd\n    ERROR, // 0xfe\n    // \"break\" stop code\n    BREAK // 0xff\n  ]\n\n  // --\n\n  return {\n    parse: parse\n  }\n}\n","'use strict';\n\nconst {\n  URLWithLegacySupport,\n  format\n} = require('./url');\n\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n  let protocol = location.protocol ? location.protocol.replace(':', '') : 'http'; // Check protocol map\n\n  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';\n  let urlParsed;\n\n  try {\n    urlParsed = new URLWithLegacySupport(url);\n  } catch (err) {\n    urlParsed = {};\n  }\n\n  const base = Object.assign({}, location, {\n    protocol: protocol || urlParsed.protocol,\n    host: location.host || urlParsed.host\n  });\n  return new URLWithLegacySupport(url, format(base)).toString();\n};","'use strict'\n\nconst { Buffer } = require('buffer')\nconst { URL } = require('iso-url')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst utils = require('./utils')\nconst constants = require('./constants')\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SHIFT32 = constants.SHIFT32\nconst SYMS = constants.SYMS\nconst TAG = constants.TAG\nconst HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO\nconst FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR\nconst DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT\nconst TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE\nconst FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE\nconst UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED\nconst NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL\n\nconst MAXINT_BN = new Bignumber('0x20000000000000')\nconst BUF_NAN = Buffer.from('f97e00', 'hex')\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex')\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex')\n\nfunction toType (obj) {\n  // [object Type]\n  // --------8---1\n  return ({}).toString.call(obj).slice(8, -1)\n}\n\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\nclass Encoder {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  constructor (options) {\n    options = options || {}\n\n    this.streaming = typeof options.stream === 'function'\n    this.onData = options.stream\n\n    this.semanticTypes = [\n      [URL, this._pushUrl],\n      [Bignumber, this._pushBigNumber]\n    ]\n\n    const addTypes = options.genTypes || []\n    const len = addTypes.length\n    for (let i = 0; i < len; i++) {\n      this.addSemanticType(\n        addTypes[i][0],\n        addTypes[i][1]\n      )\n    }\n\n    this._reset()\n  }\n\n  addSemanticType (type, fun) {\n    const len = this.semanticTypes.length\n    for (let i = 0; i < len; i++) {\n      const typ = this.semanticTypes[i][0]\n      if (typ === type) {\n        const old = this.semanticTypes[i][1]\n        this.semanticTypes[i][1] = fun\n        return old\n      }\n    }\n    this.semanticTypes.push([type, fun])\n    return null\n  }\n\n  push (val) {\n    if (!val) {\n      return true\n    }\n\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = 0\n    this.resultLength[this.offset] = val.length\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  pushWrite (val, method, len) {\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = method\n    this.resultLength[this.offset] = len\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  _pushUInt8 (val) {\n    return this.pushWrite(val, 1, 1)\n  }\n\n  _pushUInt16BE (val) {\n    return this.pushWrite(val, 2, 2)\n  }\n\n  _pushUInt32BE (val) {\n    return this.pushWrite(val, 3, 4)\n  }\n\n  _pushDoubleBE (val) {\n    return this.pushWrite(val, 4, 8)\n  }\n\n  _pushNaN () {\n    return this.push(BUF_NAN)\n  }\n\n  _pushInfinity (obj) {\n    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS\n    return this.push(half)\n  }\n\n  _pushFloat (obj) {\n    const b2 = Buffer.allocUnsafe(2)\n\n    if (utils.writeHalf(b2, obj)) {\n      if (utils.parseHalf(b2) === obj) {\n        return this._pushUInt8(HALF) && this.push(b2)\n      }\n    }\n\n    const b4 = Buffer.allocUnsafe(4)\n    b4.writeFloatBE(obj, 0)\n    if (b4.readFloatBE(0) === obj) {\n      return this._pushUInt8(FLOAT) && this.push(b4)\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)\n  }\n\n  _pushInt (obj, mt, orig) {\n    const m = mt << 5\n    if (obj < 24) {\n      return this._pushUInt8(m | obj)\n    }\n\n    if (obj <= 0xff) {\n      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)\n    }\n\n    if (obj <= 0xffff) {\n      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)\n    }\n\n    if (obj <= 0xffffffff) {\n      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)\n    }\n\n    if (obj <= Number.MAX_SAFE_INTEGER) {\n      return this._pushUInt8(m | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&\n        this._pushUInt32BE(obj % SHIFT32)\n    }\n\n    if (mt === MT.NEG_INT) {\n      return this._pushFloat(orig)\n    }\n\n    return this._pushFloat(obj)\n  }\n\n  _pushIntNum (obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj)\n    } else {\n      return this._pushInt(obj, MT.POS_INT)\n    }\n  }\n\n  _pushNumber (obj) {\n    switch (false) {\n      case (obj === obj): // eslint-disable-line\n        return this._pushNaN(obj)\n      case isFinite(obj):\n        return this._pushInfinity(obj)\n      case ((obj % 1) !== 0):\n        return this._pushIntNum(obj)\n      default:\n        return this._pushFloat(obj)\n    }\n  }\n\n  _pushString (obj) {\n    const len = Buffer.byteLength(obj, 'utf8')\n    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len)\n  }\n\n  _pushBoolean (obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE)\n  }\n\n  _pushUndefined (obj) {\n    return this._pushUInt8(UNDEFINED)\n  }\n\n  _pushArray (gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushTag (tag) {\n    return this._pushInt(tag, MT.TAG)\n  }\n\n  _pushDate (gen, obj) {\n    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n    // still allowed to encode fractions of seconds which can be achieved by\n    // changing overwriting the encode function for Date objects.\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000))\n  }\n\n  _pushBuffer (gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)\n  }\n\n  _pushNoFilter (gen, obj) {\n    return gen._pushBuffer(gen, obj.slice())\n  }\n\n  _pushRegexp (gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)\n  }\n\n  _pushSet (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUrl (gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())\n  }\n\n  _pushBigint (obj) {\n    let tag = TAG.POS_BIGINT\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1)\n      tag = TAG.NEG_BIGINT\n    }\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  _pushBigNumber (gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN()\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj)\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&\n      gen._pushInt(2, MT.ARRAY))) {\n      return false\n    }\n\n    const dec = obj.decimalPlaces()\n    const slide = obj.multipliedBy(new Bignumber(10).pow(dec))\n    if (!gen._pushIntNum(-dec)) {\n      return false\n    }\n    if (slide.abs().isLessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber())\n    } else {\n      return gen._pushBigint(slide)\n    }\n  }\n\n  _pushMap (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      obj.size,\n      Array.from(obj)\n    )\n  }\n\n  _pushObject (obj) {\n    if (!obj) {\n      return this._pushUInt8(NULL)\n    }\n\n    var len = this.semanticTypes.length\n    for (var i = 0; i < len; i++) {\n      if (obj instanceof this.semanticTypes[i][0]) {\n        return this.semanticTypes[i][1].call(obj, this, obj)\n      }\n    }\n\n    var f = obj.encodeCBOR\n    if (typeof f === 'function') {\n      return f.call(obj, this)\n    }\n\n    var keys = Object.keys(obj)\n    var keyLength = keys.length\n    if (!this._pushInt(keyLength, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      keyLength,\n      keys.map((k) => [k, obj[k]])\n    )\n  }\n\n  _pushRawMap (len, map) {\n    // Sort keys for canoncialization\n    // 1. encode key\n    // 2. shorter key comes before longer key\n    // 3. same length keys are sorted with lower\n    //    byte value before higher\n\n    map = map.map(function (a) {\n      a[0] = Encoder.encode(a[0])\n      return a\n    }).sort(utils.keySorter)\n\n    for (var j = 0; j < len; j++) {\n      if (!this.push(map[j][0])) {\n        return false\n      }\n\n      if (!this.pushAny(map[j][1])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Alias for `.pushAny`\n   *\n   * @param {*} obj\n   * @returns {boolean} true on success\n   */\n  write (obj) {\n    return this.pushAny(obj)\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny (obj) {\n    var typ = toType(obj)\n\n    switch (typ) {\n      case 'Number':\n        return this._pushNumber(obj)\n      case 'String':\n        return this._pushString(obj)\n      case 'Boolean':\n        return this._pushBoolean(obj)\n      case 'Object':\n        return this._pushObject(obj)\n      case 'Array':\n        return this._pushArray(this, obj)\n      case 'Uint8Array':\n        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj))\n      case 'Null':\n        return this._pushUInt8(NULL)\n      case 'Undefined':\n        return this._pushUndefined(obj)\n      case 'Map':\n        return this._pushMap(this, obj)\n      case 'Set':\n        return this._pushSet(this, obj)\n      case 'URL':\n        return this._pushUrl(this, obj)\n      case 'BigNumber':\n        return this._pushBigNumber(this, obj)\n      case 'Date':\n        return this._pushDate(this, obj)\n      case 'RegExp':\n        return this._pushRegexp(this, obj)\n      case 'Symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushObject(null)\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(undefined)\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString())\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''))\n    }\n  }\n\n  finalize () {\n    if (this.offset === 0) {\n      return null\n    }\n\n    var result = this.result\n    var resultLength = this.resultLength\n    var resultMethod = this.resultMethod\n    var offset = this.offset\n\n    // Determine the size of the buffer\n    var size = 0\n    var i = 0\n\n    for (; i < offset; i++) {\n      size += resultLength[i]\n    }\n\n    var res = Buffer.allocUnsafe(size)\n    var index = 0\n    var length = 0\n\n    // Write the content into the result buffer\n    for (i = 0; i < offset; i++) {\n      length = resultLength[i]\n\n      switch (resultMethod[i]) {\n        case 0:\n          result[i].copy(res, index)\n          break\n        case 1:\n          res.writeUInt8(result[i], index, true)\n          break\n        case 2:\n          res.writeUInt16BE(result[i], index, true)\n          break\n        case 3:\n          res.writeUInt32BE(result[i], index, true)\n          break\n        case 4:\n          res.writeDoubleBE(result[i], index, true)\n          break\n        case 5:\n          res.write(result[i], index, length, 'utf8')\n          break\n        default:\n          throw new Error('unkown method')\n      }\n\n      index += length\n    }\n\n    var tmp = res\n\n    this._reset()\n\n    return tmp\n  }\n\n  _reset () {\n    this.result = []\n    this.resultMethod = []\n    this.resultLength = []\n    this.offset = 0\n  }\n\n  /**\n   * Encode the given value\n   * @param {*} o\n   * @returns {Buffer}\n   */\n  static encode (o) {\n    const enc = new Encoder()\n    const ret = enc.pushAny(o)\n    if (!ret) {\n      throw new Error('Failed to encode input')\n    }\n\n    return enc.finalize()\n  }\n}\n\nmodule.exports = Encoder\n"],"sourceRoot":""}
\ No newline at end of file
diff --git a/node_modules/borc/dist/index.min.js b/node_modules/borc/dist/index.min.js
index 7ec0110..3f1693d 100644
--- a/node_modules/borc/dist/index.min.js
+++ b/node_modules/borc/dist/index.min.js
@@ -1,3 +1,10 @@
-/*! For license information please see index.min.js.LICENSE.txt */
-!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Borc=e():t.Borc=e()}(window,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=11)}([function(t,e,r){"use strict";(function(t){var n=r(14),i=r(5),s=r(15);function u(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(t,e){if(u()<e)throw new RangeError("Invalid typed array length");return a.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=a.prototype:(null===t&&(t=new a(e)),t.length=e),t}function a(t,e,r){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return c(this,t)}return h(this,t,e,r)}function h(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);a.TYPED_ARRAY_SUPPORT?(t=e).__proto__=a.prototype:t=p(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!a.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|g(e,r),i=(t=o(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function(t,e){if(a.isBuffer(e)){var r=0|l(e.length);return 0===(t=o(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?o(t,0):p(t,e);if("Buffer"===e.type&&s(e.data))return p(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function c(t,e){if(f(e),t=o(t,e<0?0:0|l(e)),!a.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function p(t,e){var r=e.length<0?0:0|l(e.length);t=o(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function l(t){if(t>=u())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+u().toString(16)+" bytes");return 0|t}function g(t,e){if(a.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return j(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return k(t).length;default:if(n)return j(t).length;e=(""+e).toLowerCase(),n=!0}}function d(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return U(this,e,r);case"utf8":case"utf-8":return T(this,e,r);case"ascii":return I(this,e,r);case"latin1":case"binary":return R(this,e,r);case"base64":return N(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function y(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function _(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=a.from(e,n)),a.isBuffer(e))return 0===e.length?-1:w(t,e,r,n,i);if("number"==typeof e)return e&=255,a.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):w(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function w(t,e,r,n,i){var s,u=1,o=t.length,a=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;u=2,o/=2,a/=2,r/=2}function h(t,e){return 1===u?t[e]:t.readUInt16BE(e*u)}if(i){var f=-1;for(s=r;s<o;s++)if(h(t,s)===h(e,-1===f?0:s-f)){if(-1===f&&(f=s),s-f+1===a)return f*u}else-1!==f&&(s-=s-f),f=-1}else for(r+a>o&&(r=o-a),s=r;s>=0;s--){for(var c=!0,p=0;p<a;p++)if(h(t,s+p)!==h(e,p)){c=!1;break}if(c)return s}return-1}function m(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var s=e.length;if(s%2!=0)throw new TypeError("Invalid hex string");n>s/2&&(n=s/2);for(var u=0;u<n;++u){var o=parseInt(e.substr(2*u,2),16);if(isNaN(o))return u;t[r+u]=o}return u}function E(t,e,r,n){return G(j(e,t.length-r),t,r,n)}function b(t,e,r,n){return G(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function v(t,e,r,n){return b(t,e,r,n)}function S(t,e,r,n){return G(k(e),t,r,n)}function A(t,e,r,n){return G(function(t,e){for(var r,n,i,s=[],u=0;u<t.length&&!((e-=2)<0);++u)r=t.charCodeAt(u),n=r>>8,i=r%256,s.push(i),s.push(n);return s}(e,t.length-r),t,r,n)}function N(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function T(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var s,u,o,a,h=t[i],f=null,c=h>239?4:h>223?3:h>191?2:1;if(i+c<=r)switch(c){case 1:h<128&&(f=h);break;case 2:128==(192&(s=t[i+1]))&&(a=(31&h)<<6|63&s)>127&&(f=a);break;case 3:s=t[i+1],u=t[i+2],128==(192&s)&&128==(192&u)&&(a=(15&h)<<12|(63&s)<<6|63&u)>2047&&(a<55296||a>57343)&&(f=a);break;case 4:s=t[i+1],u=t[i+2],o=t[i+3],128==(192&s)&&128==(192&u)&&128==(192&o)&&(a=(15&h)<<18|(63&s)<<12|(63&u)<<6|63&o)>65535&&a<1114112&&(f=a)}null===f?(f=65533,c=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),i+=c}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=4096));return r}(n)}e.Buffer=a,e.SlowBuffer=function(t){+t!=t&&(t=0);return a.alloc(+t)},e.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(e){return!1}}(),e.kMaxLength=u(),a.poolSize=8192,a._augment=function(t){return t.__proto__=a.prototype,t},a.from=function(t,e,r){return h(null,t,e,r)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(t,e,r){return function(t,e,r,n){return f(e),e<=0?o(t,e):void 0!==r?"string"==typeof n?o(t,e).fill(r,n):o(t,e).fill(r):o(t,e)}(null,t,e,r)},a.allocUnsafe=function(t){return c(null,t)},a.allocUnsafeSlow=function(t){return c(null,t)},a.isBuffer=function(t){return!(null==t||!t._isBuffer)},a.compare=function(t,e){if(!a.isBuffer(t)||!a.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,s=Math.min(r,n);i<s;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},a.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(t,e){if(!s(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return a.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=a.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var u=t[r];if(!a.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(n,i),i+=u.length}return n},a.byteLength=g,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},a.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},a.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},a.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?T(this,0,t):d.apply(this,arguments)},a.prototype.equals=function(t){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===a.compare(this,t)},a.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},a.prototype.compare=function(t,e,r,n,i){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var s=(i>>>=0)-(n>>>=0),u=(r>>>=0)-(e>>>=0),o=Math.min(s,u),h=this.slice(n,i),f=t.slice(e,r),c=0;c<o;++c)if(h[c]!==f[c]){s=h[c],u=f[c];break}return s<u?-1:u<s?1:0},a.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},a.prototype.indexOf=function(t,e,r){return _(this,t,e,r,!0)},a.prototype.lastIndexOf=function(t,e,r){return _(this,t,e,r,!1)},a.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var s=!1;;)switch(n){case"hex":return m(this,t,e,r);case"utf8":case"utf-8":return E(this,t,e,r);case"ascii":return b(this,t,e,r);case"latin1":case"binary":return v(this,t,e,r);case"base64":return S(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function I(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function R(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function U(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",s=e;s<r;++s)i+=Y(t[s]);return i}function B(t,e,r){for(var n=t.slice(e,r),i="",s=0;s<n.length;s+=2)i+=String.fromCharCode(n[s]+256*n[s+1]);return i}function P(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function O(t,e,r,n,i,s){if(!a.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<s)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function F(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,s=Math.min(t.length-r,2);i<s;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function L(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,s=Math.min(t.length-r,4);i<s;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function M(t,e,r,n,i,s){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function x(t,e,r,n,s){return s||M(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function D(t,e,r,n,s){return s||M(t,0,r,8),i.write(t,e,r,n,52,8),r+8}a.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),a.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=a.prototype;else{var i=e-t;r=new a(i,void 0);for(var s=0;s<i;++s)r[s]=this[s+t]}return r},a.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||P(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n},a.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||P(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},a.prototype.readUInt8=function(t,e){return e||P(t,1,this.length),this[t]},a.prototype.readUInt16LE=function(t,e){return e||P(t,2,this.length),this[t]|this[t+1]<<8},a.prototype.readUInt16BE=function(t,e){return e||P(t,2,this.length),this[t]<<8|this[t+1]},a.prototype.readUInt32LE=function(t,e){return e||P(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},a.prototype.readUInt32BE=function(t,e){return e||P(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},a.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||P(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},a.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||P(t,e,this.length);for(var n=e,i=1,s=this[t+--n];n>0&&(i*=256);)s+=this[t+--n]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*e)),s},a.prototype.readInt8=function(t,e){return e||P(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},a.prototype.readInt16LE=function(t,e){e||P(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},a.prototype.readInt16BE=function(t,e){e||P(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},a.prototype.readInt32LE=function(t,e){return e||P(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},a.prototype.readInt32BE=function(t,e){return e||P(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},a.prototype.readFloatLE=function(t,e){return e||P(t,4,this.length),i.read(this,t,!0,23,4)},a.prototype.readFloatBE=function(t,e){return e||P(t,4,this.length),i.read(this,t,!1,23,4)},a.prototype.readDoubleLE=function(t,e){return e||P(t,8,this.length),i.read(this,t,!0,52,8)},a.prototype.readDoubleBE=function(t,e){return e||P(t,8,this.length),i.read(this,t,!1,52,8)},a.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||O(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,s=0;for(this[e]=255&t;++s<r&&(i*=256);)this[e+s]=t/i&255;return e+r},a.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||O(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,s=1;for(this[e+i]=255&t;--i>=0&&(s*=256);)this[e+i]=t/s&255;return e+r},a.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,1,255,0),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},a.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):F(this,t,e,!0),e+2},a.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):F(this,t,e,!1),e+2},a.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):L(this,t,e,!0),e+4},a.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},a.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);O(this,t,e,r,i-1,-i)}var s=0,u=1,o=0;for(this[e]=255&t;++s<r&&(u*=256);)t<0&&0===o&&0!==this[e+s-1]&&(o=1),this[e+s]=(t/u>>0)-o&255;return e+r},a.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);O(this,t,e,r,i-1,-i)}var s=r-1,u=1,o=0;for(this[e+s]=255&t;--s>=0&&(u*=256);)t<0&&0===o&&0!==this[e+s+1]&&(o=1),this[e+s]=(t/u>>0)-o&255;return e+r},a.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,1,127,-128),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},a.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):F(this,t,e,!0),e+2},a.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):F(this,t,e,!1),e+2},a.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):L(this,t,e,!0),e+4},a.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},a.prototype.writeFloatLE=function(t,e,r){return x(this,t,e,!0,r)},a.prototype.writeFloatBE=function(t,e,r){return x(this,t,e,!1,r)},a.prototype.writeDoubleLE=function(t,e,r){return D(this,t,e,!0,r)},a.prototype.writeDoubleBE=function(t,e,r){return D(this,t,e,!1,r)},a.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,s=n-r;if(this===t&&r<e&&e<n)for(i=s-1;i>=0;--i)t[i+e]=this[i+r];else if(s<1e3||!a.TYPED_ARRAY_SUPPORT)for(i=0;i<s;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+s),e);return s},a.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!a.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var s;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(s=e;s<r;++s)this[s]=t;else{var u=a.isBuffer(t)?t:j(new a(t,n).toString()),o=u.length;for(s=0;s<r-e;++s)this[s+e]=u[s%o]}return this};var C=/[^+\/0-9A-Za-z-_]/g;function Y(t){return t<16?"0"+t.toString(16):t.toString(16)}function j(t,e){var r;e=e||1/0;for(var n=t.length,i=null,s=[],u=0;u<n;++u){if((r=t.charCodeAt(u))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(u+1===n){(e-=3)>-1&&s.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&s.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&s.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;s.push(r)}else if(r<2048){if((e-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function k(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(C,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function G(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(4))},function(t,e,r){"use strict";var n;!function(i){var s,u=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,o=Math.ceil,a=Math.floor,h="[BigNumber Error] ",f=h+"Number primitive has more than 15 significant digits: ",c=1e14,p=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],l=1e9;function g(t){var e=0|t;return t>0||t===e?e:e-1}function d(t){for(var e,r,n=1,i=t.length,s=t[0]+"";n<i;){for(r=14-(e=t[n++]+"").length;r--;e="0"+e);s+=e}for(i=s.length;48===s.charCodeAt(--i););return s.slice(0,i+1||1)}function y(t,e){var r,n,i=t.c,s=e.c,u=t.s,o=e.s,a=t.e,h=e.e;if(!u||!o)return null;if(r=i&&!i[0],n=s&&!s[0],r||n)return r?n?0:-o:u;if(u!=o)return u;if(r=u<0,n=a==h,!i||!s)return n?0:!i^r?1:-1;if(!n)return a>h^r?1:-1;for(o=(a=i.length)<(h=s.length)?a:h,u=0;u<o;u++)if(i[u]!=s[u])return i[u]>s[u]^r?1:-1;return a==h?0:a>h^r?1:-1}function _(t,e,r,n){if(t<e||t>r||t!==a(t))throw Error(h+(n||"Argument")+("number"==typeof t?t<e||t>r?" out of range: ":" not an integer: ":" not a primitive number: ")+String(t))}function w(t){var e=t.c.length-1;return g(t.e/14)==e&&t.c[e]%2!=0}function m(t,e){return(t.length>1?t.charAt(0)+"."+t.slice(1):t)+(e<0?"e":"e+")+e}function E(t,e,r){var n,i;if(e<0){for(i=r+".";++e;i+=r);t=i+t}else if(++e>(n=t.length)){for(i=r,e-=n;--e;i+=r);t+=i}else e<n&&(t=t.slice(0,e)+"."+t.slice(e));return t}(s=function t(e){var r,n,i,s,b,v,S,A,N,T=Y.prototype={constructor:Y,toString:null,valueOf:null},I=new Y(1),R=20,U=4,B=-7,P=21,O=-1e7,F=1e7,L=!1,M=1,x=0,D={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},C="0123456789abcdefghijklmnopqrstuvwxyz";function Y(t,e){var r,s,o,h,c,p,l,g,d=this;if(!(d instanceof Y))return new Y(t,e);if(null==e){if(t&&!0===t._isBigNumber)return d.s=t.s,void(!t.c||t.e>F?d.c=d.e=null:t.e<O?d.c=[d.e=0]:(d.e=t.e,d.c=t.c.slice()));if((p="number"==typeof t)&&0*t==0){if(d.s=1/t<0?(t=-t,-1):1,t===~~t){for(h=0,c=t;c>=10;c/=10,h++);return void(h>F?d.c=d.e=null:(d.e=h,d.c=[t]))}g=String(t)}else{if(!u.test(g=String(t)))return i(d,g,p);d.s=45==g.charCodeAt(0)?(g=g.slice(1),-1):1}(h=g.indexOf("."))>-1&&(g=g.replace(".","")),(c=g.search(/e/i))>0?(h<0&&(h=c),h+=+g.slice(c+1),g=g.substring(0,c)):h<0&&(h=g.length)}else{if(_(e,2,C.length,"Base"),10==e)return H(d=new Y(t),R+d.e+1,U);if(g=String(t),p="number"==typeof t){if(0*t!=0)return i(d,g,p,e);if(d.s=1/t<0?(g=g.slice(1),-1):1,Y.DEBUG&&g.replace(/^0\.0*|\./,"").length>15)throw Error(f+t)}else d.s=45===g.charCodeAt(0)?(g=g.slice(1),-1):1;for(r=C.slice(0,e),h=c=0,l=g.length;c<l;c++)if(r.indexOf(s=g.charAt(c))<0){if("."==s){if(c>h){h=l;continue}}else if(!o&&(g==g.toUpperCase()&&(g=g.toLowerCase())||g==g.toLowerCase()&&(g=g.toUpperCase()))){o=!0,c=-1,h=0;continue}return i(d,String(t),p,e)}p=!1,(h=(g=n(g,e,10,d.s)).indexOf("."))>-1?g=g.replace(".",""):h=g.length}for(c=0;48===g.charCodeAt(c);c++);for(l=g.length;48===g.charCodeAt(--l););if(g=g.slice(c,++l)){if(l-=c,p&&Y.DEBUG&&l>15&&(t>9007199254740991||t!==a(t)))throw Error(f+d.s*t);if((h=h-c-1)>F)d.c=d.e=null;else if(h<O)d.c=[d.e=0];else{if(d.e=h,d.c=[],c=(h+1)%14,h<0&&(c+=14),c<l){for(c&&d.c.push(+g.slice(0,c)),l-=14;c<l;)d.c.push(+g.slice(c,c+=14));c=14-(g=g.slice(c)).length}else c-=l;for(;c--;g+="0");d.c.push(+g)}}else d.c=[d.e=0]}function j(t,e,r,n){var i,s,u,o,a;if(null==r?r=U:_(r,0,8),!t.c)return t.toString();if(i=t.c[0],u=t.e,null==e)a=d(t.c),a=1==n||2==n&&(u<=B||u>=P)?m(a,u):E(a,u,"0");else if(s=(t=H(new Y(t),e,r)).e,o=(a=d(t.c)).length,1==n||2==n&&(e<=s||s<=B)){for(;o<e;a+="0",o++);a=m(a,s)}else if(e-=u,a=E(a,s,"0"),s+1>o){if(--e>0)for(a+=".";e--;a+="0");}else if((e+=s-o)>0)for(s+1==o&&(a+=".");e--;a+="0");return t.s<0&&i?"-"+a:a}function k(t,e){for(var r,n=1,i=new Y(t[0]);n<t.length;n++){if(!(r=new Y(t[n])).s){i=r;break}e.call(i,r)&&(i=r)}return i}function G(t,e,r){for(var n=1,i=e.length;!e[--i];e.pop());for(i=e[0];i>=10;i/=10,n++);return(r=n+14*r-1)>F?t.c=t.e=null:r<O?t.c=[t.e=0]:(t.e=r,t.c=e),t}function H(t,e,r,n){var i,s,u,h,f,l,g,d=t.c,y=p;if(d){t:{for(i=1,h=d[0];h>=10;h/=10,i++);if((s=e-i)<0)s+=14,u=e,g=(f=d[l=0])/y[i-u-1]%10|0;else if((l=o((s+1)/14))>=d.length){if(!n)break t;for(;d.length<=l;d.push(0));f=g=0,i=1,u=(s%=14)-14+1}else{for(f=h=d[l],i=1;h>=10;h/=10,i++);g=(u=(s%=14)-14+i)<0?0:f/y[i-u-1]%10|0}if(n=n||e<0||null!=d[l+1]||(u<0?f:f%y[i-u-1]),n=r<4?(g||n)&&(0==r||r==(t.s<0?3:2)):g>5||5==g&&(4==r||n||6==r&&(s>0?u>0?f/y[i-u]:0:d[l-1])%10&1||r==(t.s<0?8:7)),e<1||!d[0])return d.length=0,n?(e-=t.e+1,d[0]=y[(14-e%14)%14],t.e=-e||0):d[0]=t.e=0,t;if(0==s?(d.length=l,h=1,l--):(d.length=l+1,h=y[14-s],d[l]=u>0?a(f/y[i-u]%y[u])*h:0),n)for(;;){if(0==l){for(s=1,u=d[0];u>=10;u/=10,s++);for(u=d[0]+=h,h=1;u>=10;u/=10,h++);s!=h&&(t.e++,d[0]==c&&(d[0]=1));break}if(d[l]+=h,d[l]!=c)break;d[l--]=0,h=1}for(s=d.length;0===d[--s];d.pop());}t.e>F?t.c=t.e=null:t.e<O&&(t.c=[t.e=0])}return t}function z(t){var e,r=t.e;return null===r?t.toString():(e=d(t.c),e=r<=B||r>=P?m(e,r):E(e,r,"0"),t.s<0?"-"+e:e)}return Y.clone=t,Y.ROUND_UP=0,Y.ROUND_DOWN=1,Y.ROUND_CEIL=2,Y.ROUND_FLOOR=3,Y.ROUND_HALF_UP=4,Y.ROUND_HALF_DOWN=5,Y.ROUND_HALF_EVEN=6,Y.ROUND_HALF_CEIL=7,Y.ROUND_HALF_FLOOR=8,Y.EUCLID=9,Y.config=Y.set=function(t){var e,r;if(null!=t){if("object"!=typeof t)throw Error(h+"Object expected: "+t);if(t.hasOwnProperty(e="DECIMAL_PLACES")&&(_(r=t[e],0,l,e),R=r),t.hasOwnProperty(e="ROUNDING_MODE")&&(_(r=t[e],0,8,e),U=r),t.hasOwnProperty(e="EXPONENTIAL_AT")&&((r=t[e])&&r.pop?(_(r[0],-l,0,e),_(r[1],0,l,e),B=r[0],P=r[1]):(_(r,-l,l,e),B=-(P=r<0?-r:r))),t.hasOwnProperty(e="RANGE"))if((r=t[e])&&r.pop)_(r[0],-l,-1,e),_(r[1],1,l,e),O=r[0],F=r[1];else{if(_(r,-l,l,e),!r)throw Error(h+e+" cannot be zero: "+r);O=-(F=r<0?-r:r)}if(t.hasOwnProperty(e="CRYPTO")){if((r=t[e])!==!!r)throw Error(h+e+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw L=!r,Error(h+"crypto unavailable");L=r}else L=r}if(t.hasOwnProperty(e="MODULO_MODE")&&(_(r=t[e],0,9,e),M=r),t.hasOwnProperty(e="POW_PRECISION")&&(_(r=t[e],0,l,e),x=r),t.hasOwnProperty(e="FORMAT")){if("object"!=typeof(r=t[e]))throw Error(h+e+" not an object: "+r);D=r}if(t.hasOwnProperty(e="ALPHABET")){if("string"!=typeof(r=t[e])||/^.$|[+-.\s]|(.).*\1/.test(r))throw Error(h+e+" invalid: "+r);C=r}}return{DECIMAL_PLACES:R,ROUNDING_MODE:U,EXPONENTIAL_AT:[B,P],RANGE:[O,F],CRYPTO:L,MODULO_MODE:M,POW_PRECISION:x,FORMAT:D,ALPHABET:C}},Y.isBigNumber=function(t){if(!t||!0!==t._isBigNumber)return!1;if(!Y.DEBUG)return!0;var e,r,n=t.c,i=t.e,s=t.s;t:if("[object Array]"=={}.toString.call(n)){if((1===s||-1===s)&&i>=-l&&i<=l&&i===a(i)){if(0===n[0]){if(0===i&&1===n.length)return!0;break t}if((e=(i+1)%14)<1&&(e+=14),String(n[0]).length==e){for(e=0;e<n.length;e++)if((r=n[e])<0||r>=c||r!==a(r))break t;if(0!==r)return!0}}}else if(null===n&&null===i&&(null===s||1===s||-1===s))return!0;throw Error(h+"Invalid BigNumber: "+t)},Y.maximum=Y.max=function(){return k(arguments,T.lt)},Y.minimum=Y.min=function(){return k(arguments,T.gt)},Y.random=(s=9007199254740992*Math.random()&2097151?function(){return a(9007199254740992*Math.random())}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(t){var e,r,n,i,u,f=0,c=[],g=new Y(I);if(null==t?t=R:_(t,0,l),i=o(t/14),L)if(crypto.getRandomValues){for(e=crypto.getRandomValues(new Uint32Array(i*=2));f<i;)(u=131072*e[f]+(e[f+1]>>>11))>=9e15?(r=crypto.getRandomValues(new Uint32Array(2)),e[f]=r[0],e[f+1]=r[1]):(c.push(u%1e14),f+=2);f=i/2}else{if(!crypto.randomBytes)throw L=!1,Error(h+"crypto unavailable");for(e=crypto.randomBytes(i*=7);f<i;)(u=281474976710656*(31&e[f])+1099511627776*e[f+1]+4294967296*e[f+2]+16777216*e[f+3]+(e[f+4]<<16)+(e[f+5]<<8)+e[f+6])>=9e15?crypto.randomBytes(7).copy(e,f):(c.push(u%1e14),f+=7);f=i/7}if(!L)for(;f<i;)(u=s())<9e15&&(c[f++]=u%1e14);for(t%=14,(i=c[--f])&&t&&(u=p[14-t],c[f]=a(i/u)*u);0===c[f];c.pop(),f--);if(f<0)c=[n=0];else{for(n=-1;0===c[0];c.splice(0,1),n-=14);for(f=1,u=c[0];u>=10;u/=10,f++);f<14&&(n-=14-f)}return g.e=n,g.c=c,g}),Y.sum=function(){for(var t=1,e=arguments,r=new Y(e[0]);t<e.length;)r=r.plus(e[t++]);return r},n=function(){function t(t,e,r,n){for(var i,s,u=[0],o=0,a=t.length;o<a;){for(s=u.length;s--;u[s]*=e);for(u[0]+=n.indexOf(t.charAt(o++)),i=0;i<u.length;i++)u[i]>r-1&&(null==u[i+1]&&(u[i+1]=0),u[i+1]+=u[i]/r|0,u[i]%=r)}return u.reverse()}return function(e,n,i,s,u){var o,a,h,f,c,p,l,g,y=e.indexOf("."),_=R,w=U;for(y>=0&&(f=x,x=0,e=e.replace(".",""),p=(g=new Y(n)).pow(e.length-y),x=f,g.c=t(E(d(p.c),p.e,"0"),10,i,"0123456789"),g.e=g.c.length),h=f=(l=t(e,n,i,u?(o=C,"0123456789"):(o="0123456789",C))).length;0==l[--f];l.pop());if(!l[0])return o.charAt(0);if(y<0?--h:(p.c=l,p.e=h,p.s=s,l=(p=r(p,g,_,w,i)).c,c=p.r,h=p.e),y=l[a=h+_+1],f=i/2,c=c||a<0||null!=l[a+1],c=w<4?(null!=y||c)&&(0==w||w==(p.s<0?3:2)):y>f||y==f&&(4==w||c||6==w&&1&l[a-1]||w==(p.s<0?8:7)),a<1||!l[0])e=c?E(o.charAt(1),-_,o.charAt(0)):o.charAt(0);else{if(l.length=a,c)for(--i;++l[--a]>i;)l[a]=0,a||(++h,l=[1].concat(l));for(f=l.length;!l[--f];);for(y=0,e="";y<=f;e+=o.charAt(l[y++]));e=E(e,h,o.charAt(0))}return e}}(),r=function(){function t(t,e,r){var n,i,s,u,o=0,a=t.length,h=e%1e7,f=e/1e7|0;for(t=t.slice();a--;)o=((i=h*(s=t[a]%1e7)+(n=f*s+(u=t[a]/1e7|0)*h)%1e7*1e7+o)/r|0)+(n/1e7|0)+f*u,t[a]=i%r;return o&&(t=[o].concat(t)),t}function e(t,e,r,n){var i,s;if(r!=n)s=r>n?1:-1;else for(i=s=0;i<r;i++)if(t[i]!=e[i]){s=t[i]>e[i]?1:-1;break}return s}function r(t,e,r,n){for(var i=0;r--;)t[r]-=i,i=t[r]<e[r]?1:0,t[r]=i*n+t[r]-e[r];for(;!t[0]&&t.length>1;t.splice(0,1));}return function(n,i,s,u,o){var h,f,p,l,d,y,_,w,m,E,b,v,S,A,N,T,I,R=n.s==i.s?1:-1,U=n.c,B=i.c;if(!(U&&U[0]&&B&&B[0]))return new Y(n.s&&i.s&&(U?!B||U[0]!=B[0]:B)?U&&0==U[0]||!B?0*R:R/0:NaN);for(m=(w=new Y(R)).c=[],R=s+(f=n.e-i.e)+1,o||(o=c,f=g(n.e/14)-g(i.e/14),R=R/14|0),p=0;B[p]==(U[p]||0);p++);if(B[p]>(U[p]||0)&&f--,R<0)m.push(1),l=!0;else{for(A=U.length,T=B.length,p=0,R+=2,(d=a(o/(B[0]+1)))>1&&(B=t(B,d,o),U=t(U,d,o),T=B.length,A=U.length),S=T,b=(E=U.slice(0,T)).length;b<T;E[b++]=0);I=B.slice(),I=[0].concat(I),N=B[0],B[1]>=o/2&&N++;do{if(d=0,(h=e(B,E,T,b))<0){if(v=E[0],T!=b&&(v=v*o+(E[1]||0)),(d=a(v/N))>1)for(d>=o&&(d=o-1),_=(y=t(B,d,o)).length,b=E.length;1==e(y,E,_,b);)d--,r(y,T<_?I:B,_,o),_=y.length,h=1;else 0==d&&(h=d=1),_=(y=B.slice()).length;if(_<b&&(y=[0].concat(y)),r(E,y,b,o),b=E.length,-1==h)for(;e(B,E,T,b)<1;)d++,r(E,T<b?I:B,b,o),b=E.length}else 0===h&&(d++,E=[0]);m[p++]=d,E[0]?E[b++]=U[S]||0:(E=[U[S]],b=1)}while((S++<A||null!=E[0])&&R--);l=null!=E[0],m[0]||m.splice(0,1)}if(o==c){for(p=1,R=m[0];R>=10;R/=10,p++);H(w,s+(w.e=p+14*f-1)+1,u,l)}else w.e=f,w.r=+l;return w}}(),b=/^(-?)0([xbo])(?=\w[\w.]*$)/i,v=/^([^.]+)\.$/,S=/^\.([^.]+)$/,A=/^-?(Infinity|NaN)$/,N=/^\s*\+(?=[\w.])|^\s+|\s+$/g,i=function(t,e,r,n){var i,s=r?e:e.replace(N,"");if(A.test(s))t.s=isNaN(s)?null:s<0?-1:1;else{if(!r&&(s=s.replace(b,(function(t,e,r){return i="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=i?t:e})),n&&(i=n,s=s.replace(v,"$1").replace(S,"0.$1")),e!=s))return new Y(s,i);if(Y.DEBUG)throw Error(h+"Not a"+(n?" base "+n:"")+" number: "+e);t.s=null}t.c=t.e=null},T.absoluteValue=T.abs=function(){var t=new Y(this);return t.s<0&&(t.s=1),t},T.comparedTo=function(t,e){return y(this,new Y(t,e))},T.decimalPlaces=T.dp=function(t,e){var r,n,i,s=this;if(null!=t)return _(t,0,l),null==e?e=U:_(e,0,8),H(new Y(s),t+s.e+1,e);if(!(r=s.c))return null;if(n=14*((i=r.length-1)-g(this.e/14)),i=r[i])for(;i%10==0;i/=10,n--);return n<0&&(n=0),n},T.dividedBy=T.div=function(t,e){return r(this,new Y(t,e),R,U)},T.dividedToIntegerBy=T.idiv=function(t,e){return r(this,new Y(t,e),0,1)},T.exponentiatedBy=T.pow=function(t,e){var r,n,i,s,u,f,c,p,l=this;if((t=new Y(t)).c&&!t.isInteger())throw Error(h+"Exponent not an integer: "+z(t));if(null!=e&&(e=new Y(e)),u=t.e>14,!l.c||!l.c[0]||1==l.c[0]&&!l.e&&1==l.c.length||!t.c||!t.c[0])return p=new Y(Math.pow(+z(l),u?2-w(t):+z(t))),e?p.mod(e):p;if(f=t.s<0,e){if(e.c?!e.c[0]:!e.s)return new Y(NaN);(n=!f&&l.isInteger()&&e.isInteger())&&(l=l.mod(e))}else{if(t.e>9&&(l.e>0||l.e<-1||(0==l.e?l.c[0]>1||u&&l.c[1]>=24e7:l.c[0]<8e13||u&&l.c[0]<=9999975e7)))return s=l.s<0&&w(t)?-0:0,l.e>-1&&(s=1/s),new Y(f?1/s:s);x&&(s=o(x/14+2))}for(u?(r=new Y(.5),f&&(t.s=1),c=w(t)):c=(i=Math.abs(+z(t)))%2,p=new Y(I);;){if(c){if(!(p=p.times(l)).c)break;s?p.c.length>s&&(p.c.length=s):n&&(p=p.mod(e))}if(i){if(0===(i=a(i/2)))break;c=i%2}else if(H(t=t.times(r),t.e+1,1),t.e>14)c=w(t);else{if(0===(i=+z(t)))break;c=i%2}l=l.times(l),s?l.c&&l.c.length>s&&(l.c.length=s):n&&(l=l.mod(e))}return n?p:(f&&(p=I.div(p)),e?p.mod(e):s?H(p,x,U,void 0):p)},T.integerValue=function(t){var e=new Y(this);return null==t?t=U:_(t,0,8),H(e,e.e+1,t)},T.isEqualTo=T.eq=function(t,e){return 0===y(this,new Y(t,e))},T.isFinite=function(){return!!this.c},T.isGreaterThan=T.gt=function(t,e){return y(this,new Y(t,e))>0},T.isGreaterThanOrEqualTo=T.gte=function(t,e){return 1===(e=y(this,new Y(t,e)))||0===e},T.isInteger=function(){return!!this.c&&g(this.e/14)>this.c.length-2},T.isLessThan=T.lt=function(t,e){return y(this,new Y(t,e))<0},T.isLessThanOrEqualTo=T.lte=function(t,e){return-1===(e=y(this,new Y(t,e)))||0===e},T.isNaN=function(){return!this.s},T.isNegative=function(){return this.s<0},T.isPositive=function(){return this.s>0},T.isZero=function(){return!!this.c&&0==this.c[0]},T.minus=function(t,e){var r,n,i,s,u=this,o=u.s;if(e=(t=new Y(t,e)).s,!o||!e)return new Y(NaN);if(o!=e)return t.s=-e,u.plus(t);var a=u.e/14,h=t.e/14,f=u.c,p=t.c;if(!a||!h){if(!f||!p)return f?(t.s=-e,t):new Y(p?u:NaN);if(!f[0]||!p[0])return p[0]?(t.s=-e,t):new Y(f[0]?u:3==U?-0:0)}if(a=g(a),h=g(h),f=f.slice(),o=a-h){for((s=o<0)?(o=-o,i=f):(h=a,i=p),i.reverse(),e=o;e--;i.push(0));i.reverse()}else for(n=(s=(o=f.length)<(e=p.length))?o:e,o=e=0;e<n;e++)if(f[e]!=p[e]){s=f[e]<p[e];break}if(s&&(i=f,f=p,p=i,t.s=-t.s),(e=(n=p.length)-(r=f.length))>0)for(;e--;f[r++]=0);for(e=c-1;n>o;){if(f[--n]<p[n]){for(r=n;r&&!f[--r];f[r]=e);--f[r],f[n]+=c}f[n]-=p[n]}for(;0==f[0];f.splice(0,1),--h);return f[0]?G(t,f,h):(t.s=3==U?-1:1,t.c=[t.e=0],t)},T.modulo=T.mod=function(t,e){var n,i,s=this;return t=new Y(t,e),!s.c||!t.s||t.c&&!t.c[0]?new Y(NaN):!t.c||s.c&&!s.c[0]?new Y(s):(9==M?(i=t.s,t.s=1,n=r(s,t,0,3),t.s=i,n.s*=i):n=r(s,t,0,M),(t=s.minus(n.times(t))).c[0]||1!=M||(t.s=s.s),t)},T.multipliedBy=T.times=function(t,e){var r,n,i,s,u,o,a,h,f,p,l,d,y,_,w=this,m=w.c,E=(t=new Y(t,e)).c;if(!(m&&E&&m[0]&&E[0]))return!w.s||!t.s||m&&!m[0]&&!E||E&&!E[0]&&!m?t.c=t.e=t.s=null:(t.s*=w.s,m&&E?(t.c=[0],t.e=0):t.c=t.e=null),t;for(n=g(w.e/14)+g(t.e/14),t.s*=w.s,(a=m.length)<(p=E.length)&&(y=m,m=E,E=y,i=a,a=p,p=i),i=a+p,y=[];i--;y.push(0));for(_=c,1e7,i=p;--i>=0;){for(r=0,l=E[i]%1e7,d=E[i]/1e7|0,s=i+(u=a);s>i;)r=((h=l*(h=m[--u]%1e7)+(o=d*h+(f=m[u]/1e7|0)*l)%1e7*1e7+y[s]+r)/_|0)+(o/1e7|0)+d*f,y[s--]=h%_;y[s]=r}return r?++n:y.splice(0,1),G(t,y,n)},T.negated=function(){var t=new Y(this);return t.s=-t.s||null,t},T.plus=function(t,e){var r,n=this,i=n.s;if(e=(t=new Y(t,e)).s,!i||!e)return new Y(NaN);if(i!=e)return t.s=-e,n.minus(t);var s=n.e/14,u=t.e/14,o=n.c,a=t.c;if(!s||!u){if(!o||!a)return new Y(i/0);if(!o[0]||!a[0])return a[0]?t:new Y(o[0]?n:0*i)}if(s=g(s),u=g(u),o=o.slice(),i=s-u){for(i>0?(u=s,r=a):(i=-i,r=o),r.reverse();i--;r.push(0));r.reverse()}for((i=o.length)-(e=a.length)<0&&(r=a,a=o,o=r,e=i),i=0;e;)i=(o[--e]=o[e]+a[e]+i)/c|0,o[e]=c===o[e]?0:o[e]%c;return i&&(o=[i].concat(o),++u),G(t,o,u)},T.precision=T.sd=function(t,e){var r,n,i,s=this;if(null!=t&&t!==!!t)return _(t,1,l),null==e?e=U:_(e,0,8),H(new Y(s),t,e);if(!(r=s.c))return null;if(n=14*(i=r.length-1)+1,i=r[i]){for(;i%10==0;i/=10,n--);for(i=r[0];i>=10;i/=10,n++);}return t&&s.e+1>n&&(n=s.e+1),n},T.shiftedBy=function(t){return _(t,-9007199254740991,9007199254740991),this.times("1e"+t)},T.squareRoot=T.sqrt=function(){var t,e,n,i,s,u=this,o=u.c,a=u.s,h=u.e,f=R+4,c=new Y("0.5");if(1!==a||!o||!o[0])return new Y(!a||a<0&&(!o||o[0])?NaN:o?u:1/0);if(0==(a=Math.sqrt(+z(u)))||a==1/0?(((e=d(o)).length+h)%2==0&&(e+="0"),a=Math.sqrt(+e),h=g((h+1)/2)-(h<0||h%2),n=new Y(e=a==1/0?"1e"+h:(e=a.toExponential()).slice(0,e.indexOf("e")+1)+h)):n=new Y(a+""),n.c[0])for((a=(h=n.e)+f)<3&&(a=0);;)if(s=n,n=c.times(s.plus(r(u,s,f,1))),d(s.c).slice(0,a)===(e=d(n.c)).slice(0,a)){if(n.e<h&&--a,"9999"!=(e=e.slice(a-3,a+1))&&(i||"4999"!=e)){+e&&(+e.slice(1)||"5"!=e.charAt(0))||(H(n,n.e+R+2,1),t=!n.times(n).eq(u));break}if(!i&&(H(s,s.e+R+2,0),s.times(s).eq(u))){n=s;break}f+=4,a+=4,i=1}return H(n,n.e+R+1,U,t)},T.toExponential=function(t,e){return null!=t&&(_(t,0,l),t++),j(this,t,e,1)},T.toFixed=function(t,e){return null!=t&&(_(t,0,l),t=t+this.e+1),j(this,t,e)},T.toFormat=function(t,e,r){var n,i=this;if(null==r)null!=t&&e&&"object"==typeof e?(r=e,e=null):t&&"object"==typeof t?(r=t,t=e=null):r=D;else if("object"!=typeof r)throw Error(h+"Argument not an object: "+r);if(n=i.toFixed(t,e),i.c){var s,u=n.split("."),o=+r.groupSize,a=+r.secondaryGroupSize,f=r.groupSeparator||"",c=u[0],p=u[1],l=i.s<0,g=l?c.slice(1):c,d=g.length;if(a&&(s=o,o=a,a=s,d-=s),o>0&&d>0){for(s=d%o||o,c=g.substr(0,s);s<d;s+=o)c+=f+g.substr(s,o);a>0&&(c+=f+g.slice(s)),l&&(c="-"+c)}n=p?c+(r.decimalSeparator||"")+((a=+r.fractionGroupSize)?p.replace(new RegExp("\\d{"+a+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):p):c}return(r.prefix||"")+n+(r.suffix||"")},T.toFraction=function(t){var e,n,i,s,u,o,a,f,c,l,g,y,_=this,w=_.c;if(null!=t&&(!(a=new Y(t)).isInteger()&&(a.c||1!==a.s)||a.lt(I)))throw Error(h+"Argument "+(a.isInteger()?"out of range: ":"not an integer: ")+z(a));if(!w)return new Y(_);for(e=new Y(I),c=n=new Y(I),i=f=new Y(I),y=d(w),u=e.e=y.length-_.e-1,e.c[0]=p[(o=u%14)<0?14+o:o],t=!t||a.comparedTo(e)>0?u>0?e:c:a,o=F,F=1/0,a=new Y(y),f.c[0]=0;l=r(a,e,0,1),1!=(s=n.plus(l.times(i))).comparedTo(t);)n=i,i=s,c=f.plus(l.times(s=c)),f=s,e=a.minus(l.times(s=e)),a=s;return s=r(t.minus(n),i,0,1),f=f.plus(s.times(c)),n=n.plus(s.times(i)),f.s=c.s=_.s,g=r(c,i,u*=2,U).minus(_).abs().comparedTo(r(f,n,u,U).minus(_).abs())<1?[c,i]:[f,n],F=o,g},T.toNumber=function(){return+z(this)},T.toPrecision=function(t,e){return null!=t&&_(t,1,l),j(this,t,e,2)},T.toString=function(t){var e,r=this,i=r.s,s=r.e;return null===s?i?(e="Infinity",i<0&&(e="-"+e)):e="NaN":(null==t?e=s<=B||s>=P?m(d(r.c),s):E(d(r.c),s,"0"):10===t?e=E(d((r=H(new Y(r),R+s+1,U)).c),r.e,"0"):(_(t,2,C.length,"Base"),e=n(E(d(r.c),s,"0"),10,t,i,!0)),i<0&&r.c[0]&&(e="-"+e)),e},T.valueOf=T.toJSON=function(){return z(this)},T._isBigNumber=!0,null!=e&&Y.set(e),Y}()).default=s.BigNumber=s,void 0===(n=function(){return s}.call(e,r,e,t))||(t.exports=n)}()},function(t,e,r){"use strict";const n=r(1).BigNumber;e.MT={POS_INT:0,NEG_INT:1,BYTE_STRING:2,UTF8_STRING:3,ARRAY:4,MAP:5,TAG:6,SIMPLE_FLOAT:7},e.TAG={DATE_STRING:0,DATE_EPOCH:1,POS_BIGINT:2,NEG_BIGINT:3,DECIMAL_FRAC:4,BIGFLOAT:5,BASE64URL_EXPECTED:21,BASE64_EXPECTED:22,BASE16_EXPECTED:23,CBOR:24,URI:32,BASE64URL:33,BASE64:34,REGEXP:35,MIME:36},e.NUMBYTES={ZERO:0,ONE:24,TWO:25,FOUR:26,EIGHT:27,INDEFINITE:31},e.SIMPLE={FALSE:20,TRUE:21,NULL:22,UNDEFINED:23},e.SYMS={NULL:Symbol("null"),UNDEFINED:Symbol("undef"),PARENT:Symbol("parent"),BREAK:Symbol("break"),STREAM:Symbol("stream")},e.SHIFT32=Math.pow(2,32),e.SHIFT16=Math.pow(2,16),e.MAX_SAFE_HIGH=2097151,e.NEG_ONE=new n(-1),e.TEN=new n(10),e.TWO=new n(2),e.PARENT={ARRAY:0,OBJECT:1,MAP:2,TAG:3,BYTE_STRING:4,UTF8_STRING:5}},function(t,e,r){"use strict";const{Buffer:n}=r(0),i=r(1).BigNumber,s=r(2),u=s.SHIFT32,o=s.SHIFT16;e.parseHalf=function(t){var e,r,n;return n=128&t[0]?-1:1,e=(124&t[0])>>2,r=(3&t[0])<<8|t[1],e?31===e?n*(r?NaN:Infinity):n*Math.pow(2,e-25)*(1024+r):5.960464477539063e-8*n*r},e.arrayBufferToBignumber=function(t){const e=t.byteLength;let r="";for(let i=0;i<e;i++)r+=(n=t[i])<16?"0"+n.toString(16):n.toString(16);var n;return new i(r,16)},e.buildMap=t=>{const e=new Map,r=Object.keys(t),n=r.length;for(let i=0;i<n;i++)e.set(r[i],t[r[i]]);return e},e.buildInt32=(t,e)=>t*o+e,e.buildInt64=(t,r,n,s)=>{const o=e.buildInt32(t,r),a=e.buildInt32(n,s);return o>2097151?new i(o).times(u).plus(a):o*u+a},e.writeHalf=function(t,e){const r=n.allocUnsafe(4);r.writeFloatBE(e,0);const i=r.readUInt32BE(0);if(0!=(8191&i))return!1;var s=i>>16&32768;const u=i>>23&255,o=8388607&i;if(u>=113&&u<=142)s+=(u-112<<10)+(o>>13);else{if(!(u>=103&&u<113))return!1;if(o&(1<<126-u)-1)return!1;s+=o+8388608>>126-u}return t.writeUInt16BE(s,0),!0},e.keySorter=function(t,e){var r=t[0].byteLength,n=e[0].byteLength;return r>n?1:n>r?-1:t[0].compare(e[0])},e.isNegativeZero=t=>0===t&&1/t<0,e.nextPowerOf2=t=>{let e=0;if(t&&!(t&t-1))return t;for(;0!==t;)t>>=1,e+=1;return 1<<e}},function(t,e,r){"use strict";var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(i){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,r){"use strict";e.read=function(t,e,r,n,i){var s,u,o=8*i-n-1,a=(1<<o)-1,h=a>>1,f=-7,c=r?i-1:0,p=r?-1:1,l=t[e+c];for(c+=p,s=l&(1<<-f)-1,l>>=-f,f+=o;f>0;s=256*s+t[e+c],c+=p,f-=8);for(u=s&(1<<-f)-1,s>>=-f,f+=n;f>0;u=256*u+t[e+c],c+=p,f-=8);if(0===s)s=1-h;else{if(s===a)return u?NaN:1/0*(l?-1:1);u+=Math.pow(2,n),s-=h}return(l?-1:1)*u*Math.pow(2,s-n)},e.write=function(t,e,r,n,i,s){var u,o,a,h=8*s-i-1,f=(1<<h)-1,c=f>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,l=n?0:s-1,g=n?1:-1,d=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(o=isNaN(e)?1:0,u=f):(u=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-u))<1&&(u--,a*=2),(e+=u+c>=1?p/a:p*Math.pow(2,1-c))*a>=2&&(u++,a/=2),u+c>=f?(o=0,u=f):u+c>=1?(o=(e*a-1)*Math.pow(2,i),u+=c):(o=e*Math.pow(2,c-1)*Math.pow(2,i),u=0));i>=8;t[r+l]=255&o,l+=g,o/=256,i-=8);for(u=u<<i|o,h+=i;h>0;t[r+l]=255&u,l+=g,u/=256,h-=8);t[r+l-g]|=128*d}},function(t,e,r){"use strict";(function(e){const{Buffer:n}=r(0),i=r(5),s=r(1).BigNumber,u=r(16),o=r(3),a=r(2),h=r(7),f=r(8),{URL:c}=r(9);class p{constructor(t){!(t=t||{}).size||t.size<65536?t.size=65536:t.size=o.nextPowerOf2(t.size),this._heap=new ArrayBuffer(t.size),this._heap8=new Uint8Array(this._heap),this._buffer=n.from(this._heap),this._reset(),this._knownTags=Object.assign({0:t=>new Date(t),1:t=>new Date(1e3*t),2:t=>o.arrayBufferToBignumber(t),3:t=>a.NEG_ONE.minus(o.arrayBufferToBignumber(t)),4:t=>a.TEN.pow(t[0]).times(t[1]),5:t=>a.TWO.pow(t[0]).times(t[1]),32:t=>new c(t),35:t=>new RegExp(t)},t.tags),this.parser=u(e,{log:console.log.bind(console),pushInt:this.pushInt.bind(this),pushInt32:this.pushInt32.bind(this),pushInt32Neg:this.pushInt32Neg.bind(this),pushInt64:this.pushInt64.bind(this),pushInt64Neg:this.pushInt64Neg.bind(this),pushFloat:this.pushFloat.bind(this),pushFloatSingle:this.pushFloatSingle.bind(this),pushFloatDouble:this.pushFloatDouble.bind(this),pushTrue:this.pushTrue.bind(this),pushFalse:this.pushFalse.bind(this),pushUndefined:this.pushUndefined.bind(this),pushNull:this.pushNull.bind(this),pushInfinity:this.pushInfinity.bind(this),pushInfinityNeg:this.pushInfinityNeg.bind(this),pushNaN:this.pushNaN.bind(this),pushNaNNeg:this.pushNaNNeg.bind(this),pushArrayStart:this.pushArrayStart.bind(this),pushArrayStartFixed:this.pushArrayStartFixed.bind(this),pushArrayStartFixed32:this.pushArrayStartFixed32.bind(this),pushArrayStartFixed64:this.pushArrayStartFixed64.bind(this),pushObjectStart:this.pushObjectStart.bind(this),pushObjectStartFixed:this.pushObjectStartFixed.bind(this),pushObjectStartFixed32:this.pushObjectStartFixed32.bind(this),pushObjectStartFixed64:this.pushObjectStartFixed64.bind(this),pushByteString:this.pushByteString.bind(this),pushByteStringStart:this.pushByteStringStart.bind(this),pushUtf8String:this.pushUtf8String.bind(this),pushUtf8StringStart:this.pushUtf8StringStart.bind(this),pushSimpleUnassigned:this.pushSimpleUnassigned.bind(this),pushTagUnassigned:this.pushTagUnassigned.bind(this),pushTagStart:this.pushTagStart.bind(this),pushTagStart4:this.pushTagStart4.bind(this),pushTagStart8:this.pushTagStart8.bind(this),pushBreak:this.pushBreak.bind(this)},this._heap)}get _depth(){return this._parents.length}get _currentParent(){return this._parents[this._depth-1]}get _ref(){return this._currentParent.ref}_closeParent(){var t=this._parents.pop();if(t.length>0)throw new Error("Missing ".concat(t.length," elements"));switch(t.type){case a.PARENT.TAG:this._push(this.createTag(t.ref[0],t.ref[1]));break;case a.PARENT.BYTE_STRING:this._push(this.createByteString(t.ref,t.length));break;case a.PARENT.UTF8_STRING:this._push(this.createUtf8String(t.ref,t.length));break;case a.PARENT.MAP:if(t.values%2>0)throw new Error("Odd number of elements in the map");this._push(this.createMap(t.ref,t.length));break;case a.PARENT.OBJECT:if(t.values%2>0)throw new Error("Odd number of elements in the map");this._push(this.createObject(t.ref,t.length));break;case a.PARENT.ARRAY:this._push(this.createArray(t.ref,t.length))}this._currentParent&&this._currentParent.type===a.PARENT.TAG&&this._dec()}_dec(){const t=this._currentParent;t.length<0||(t.length--,0===t.length&&this._closeParent())}_push(t,e){const r=this._currentParent;switch(r.values++,r.type){case a.PARENT.ARRAY:case a.PARENT.BYTE_STRING:case a.PARENT.UTF8_STRING:r.length>-1?this._ref[this._ref.length-r.length]=t:this._ref.push(t),this._dec();break;case a.PARENT.OBJECT:null!=r.tmpKey?(this._ref[r.tmpKey]=t,r.tmpKey=null,this._dec()):(r.tmpKey=t,"string"!=typeof r.tmpKey&&(r.type=a.PARENT.MAP,r.ref=o.buildMap(r.ref)));break;case a.PARENT.MAP:null!=r.tmpKey?(this._ref.set(r.tmpKey,t),r.tmpKey=null,this._dec()):r.tmpKey=t;break;case a.PARENT.TAG:this._ref.push(t),e||this._dec();break;default:throw new Error("Unknown parent type")}}_createParent(t,e,r){this._parents[this._depth]={type:e,length:r,ref:t,values:0,tmpKey:null}}_reset(){this._res=[],this._parents=[{type:a.PARENT.ARRAY,length:-1,ref:this._res,values:0,tmpKey:null}]}createTag(t,e){const r=this._knownTags[t];return r?r(e):new f(t,e)}createMap(t,e){return t}createObject(t,e){return t}createArray(t,e){return t}createByteString(t,e){return n.concat(t)}createByteStringFromHeap(t,e){return t===e?n.alloc(0):n.from(this._heap.slice(t,e))}createInt(t){return t}createInt32(t,e){return o.buildInt32(t,e)}createInt64(t,e,r,n){return o.buildInt64(t,e,r,n)}createFloat(t){return t}createFloatSingle(t,e,r,n){return i.read([t,e,r,n],0,!1,23,4)}createFloatDouble(t,e,r,n,s,u,o,a){return i.read([t,e,r,n,s,u,o,a],0,!1,52,8)}createInt32Neg(t,e){return-1-o.buildInt32(t,e)}createInt64Neg(t,e,r,n){const i=o.buildInt32(t,e),u=o.buildInt32(r,n);return i>a.MAX_SAFE_HIGH?a.NEG_ONE.minus(new s(i).times(a.SHIFT32).plus(u)):-1-(i*a.SHIFT32+u)}createTrue(){return!0}createFalse(){return!1}createNull(){return null}createUndefined(){}createInfinity(){return 1/0}createInfinityNeg(){return-1/0}createNaN(){return NaN}createNaNNeg(){return NaN}createUtf8String(t,e){return t.join("")}createUtf8StringFromHeap(t,e){return t===e?"":this._buffer.toString("utf8",t,e)}createSimpleUnassigned(t){return new h(t)}pushInt(t){this._push(this.createInt(t))}pushInt32(t,e){this._push(this.createInt32(t,e))}pushInt64(t,e,r,n){this._push(this.createInt64(t,e,r,n))}pushFloat(t){this._push(this.createFloat(t))}pushFloatSingle(t,e,r,n){this._push(this.createFloatSingle(t,e,r,n))}pushFloatDouble(t,e,r,n,i,s,u,o){this._push(this.createFloatDouble(t,e,r,n,i,s,u,o))}pushInt32Neg(t,e){this._push(this.createInt32Neg(t,e))}pushInt64Neg(t,e,r,n){this._push(this.createInt64Neg(t,e,r,n))}pushTrue(){this._push(this.createTrue())}pushFalse(){this._push(this.createFalse())}pushNull(){this._push(this.createNull())}pushUndefined(){this._push(this.createUndefined())}pushInfinity(){this._push(this.createInfinity())}pushInfinityNeg(){this._push(this.createInfinityNeg())}pushNaN(){this._push(this.createNaN())}pushNaNNeg(){this._push(this.createNaNNeg())}pushArrayStart(){this._createParent([],a.PARENT.ARRAY,-1)}pushArrayStartFixed(t){this._createArrayStartFixed(t)}pushArrayStartFixed32(t,e){const r=o.buildInt32(t,e);this._createArrayStartFixed(r)}pushArrayStartFixed64(t,e,r,n){const i=o.buildInt64(t,e,r,n);this._createArrayStartFixed(i)}pushObjectStart(){this._createObjectStartFixed(-1)}pushObjectStartFixed(t){this._createObjectStartFixed(t)}pushObjectStartFixed32(t,e){const r=o.buildInt32(t,e);this._createObjectStartFixed(r)}pushObjectStartFixed64(t,e,r,n){const i=o.buildInt64(t,e,r,n);this._createObjectStartFixed(i)}pushByteStringStart(){this._parents[this._depth]={type:a.PARENT.BYTE_STRING,length:-1,ref:[],values:0,tmpKey:null}}pushByteString(t,e){this._push(this.createByteStringFromHeap(t,e))}pushUtf8StringStart(){this._parents[this._depth]={type:a.PARENT.UTF8_STRING,length:-1,ref:[],values:0,tmpKey:null}}pushUtf8String(t,e){this._push(this.createUtf8StringFromHeap(t,e))}pushSimpleUnassigned(t){this._push(this.createSimpleUnassigned(t))}pushTagStart(t){this._parents[this._depth]={type:a.PARENT.TAG,length:1,ref:[t]}}pushTagStart4(t,e){this.pushTagStart(o.buildInt32(t,e))}pushTagStart8(t,e,r,n){this.pushTagStart(o.buildInt64(t,e,r,n))}pushTagUnassigned(t){this._push(this.createTag(t))}pushBreak(){if(this._currentParent.length>-1)throw new Error("Unexpected break");this._closeParent()}_createObjectStartFixed(t){0!==t?this._createParent({},a.PARENT.OBJECT,t):this._push(this.createObject({}))}_createArrayStartFixed(t){0!==t?this._createParent(new Array(t),a.PARENT.ARRAY,t):this._push(this.createArray([]))}_decode(t){if(0===t.byteLength)throw new Error("Input too short");this._reset(),this._heap8.set(t);const e=this.parser.parse(t.byteLength);if(this._depth>1){for(;0===this._currentParent.length;)this._closeParent();if(this._depth>1)throw new Error("Undeterminated nesting")}if(e>0)throw new Error("Failed to parse");if(0===this._res.length)throw new Error("No valid result")}decodeFirst(t){return this._decode(t),this._res[0]}decodeAll(t){return this._decode(t),this._res}static decode(t,e){return"string"==typeof t&&(t=n.from(t,e||"hex")),new p({size:t.length}).decodeFirst(t)}static decodeAll(t,e){return"string"==typeof t&&(t=n.from(t,e||"hex")),new p({size:t.length}).decodeAll(t)}}p.decodeFirst=p.decode,t.exports=p}).call(this,r(4))},function(t,e,r){"use strict";const n=r(2),i=n.MT,s=n.SIMPLE,u=n.SYMS;class o{constructor(t){if("number"!=typeof t)throw new Error("Invalid Simple type: "+typeof t);if(t<0||t>255||(0|t)!==t)throw new Error("value must be a small positive integer: "+t);this.value=t}toString(){return"simple("+this.value+")"}inspect(){return"simple("+this.value+")"}encodeCBOR(t){return t._pushInt(this.value,i.SIMPLE_FLOAT)}static isSimple(t){return t instanceof o}static decode(t,e){switch(null==e&&(e=!0),t){case s.FALSE:return!1;case s.TRUE:return!0;case s.NULL:return e?null:u.NULL;case s.UNDEFINED:return e?void 0:u.UNDEFINED;case-1:if(!e)throw new Error("Invalid BREAK");return u.BREAK;default:return new o(t)}}}t.exports=o},function(t,e,r){"use strict";class n{constructor(t,e,r){if(this.tag=t,this.value=e,this.err=r,"number"!=typeof this.tag)throw new Error("Invalid tag type ("+typeof this.tag+")");if(this.tag<0||(0|this.tag)!==this.tag)throw new Error("Tag must be a positive integer: "+this.tag)}toString(){return"".concat(this.tag,"(").concat(JSON.stringify(this.value),")")}encodeCBOR(t){return t._pushTag(this.tag),t.pushAny(this.value)}convert(t){var e,r;if("function"!=typeof(r=null!=t?t[this.tag]:void 0)&&"function"!=typeof(r=n["_tag"+this.tag]))return this;try{return r.call(n,this.value)}catch(i){return e=i,this.err=e,this}}}t.exports=n},function(t,e,r){"use strict";const{URLWithLegacySupport:n,format:i,URLSearchParams:s,defaultBase:u}=r(10),o=r(17);t.exports={URL:n,URLSearchParams:s,format:i,relative:o,defaultBase:u}},function(t,e,r){"use strict";const n=self.location?self.location.protocol+"//"+self.location.host:"",i=self.URL;t.exports={URLWithLegacySupport:class{constructor(t="",e=n){this.super=new i(t,e),this.path=this.pathname+this.search,this.auth=this.username&&this.password?this.username+":"+this.password:null,this.query=this.search&&this.search.startsWith("?")?this.search.slice(1):null}get hash(){return this.super.hash}get host(){return this.super.host}get hostname(){return this.super.hostname}get href(){return this.super.href}get origin(){return this.super.origin}get password(){return this.super.password}get pathname(){return this.super.pathname}get port(){return this.super.port}get protocol(){return this.super.protocol}get search(){return this.super.search}get searchParams(){return this.super.searchParams}get username(){return this.super.username}set hash(t){this.super.hash=t}set host(t){this.super.host=t}set hostname(t){this.super.hostname=t}set href(t){this.super.href=t}set origin(t){this.super.origin=t}set password(t){this.super.password=t}set pathname(t){this.super.pathname=t}set port(t){this.super.port=t}set protocol(t){this.super.protocol=t}set search(t){this.super.search=t}set searchParams(t){this.super.searchParams=t}set username(t){this.super.username=t}createObjectURL(t){return this.super.createObjectURL(t)}revokeObjectURL(t){this.super.revokeObjectURL(t)}toJSON(){return this.super.toJSON()}toString(){return this.super.toString()}format(){return this.toString()}},URLSearchParams:self.URLSearchParams,defaultBase:n,format:function(t){if("string"==typeof t){return new i(t).toString()}if(!(t instanceof i)){const e=t.username&&t.password?"".concat(t.username,":").concat(t.password,"@"):"",r=t.auth?t.auth+"@":"",n=t.port?":"+t.port:"",i=t.protocol?t.protocol+"//":"",s=t.host||"",u=t.hostname||"",o=t.search||(t.query?"?"+t.query:""),a=t.hash||"",h=t.pathname||"",f=t.path||h+o;return"".concat(i).concat(e||r).concat(s||u+n).concat(f).concat(a)}}}},function(t,e,r){t.exports=r(12)},function(t,e,r){"use strict";e.Diagnose=r(13),e.Decoder=r(6),e.Encoder=r(18),e.Simple=r(7),e.Tagged=r(8),e.decodeAll=e.Decoder.decodeAll,e.decodeFirst=e.Decoder.decodeFirst,e.diagnose=e.Diagnose.diagnose,e.encode=e.Encoder.encode,e.decode=e.Decoder.decode,e.leveldb={decode:e.Decoder.decodeAll,encode:e.Encoder.encode,buffer:!0,name:"cbor"}},function(t,e,r){"use strict";const{Buffer:n}=r(0),i=r(6),s=r(3);class u extends i{createTag(t,e){return"".concat(t,"(").concat(e,")")}createInt(t){return super.createInt(t).toString()}createInt32(t,e){return super.createInt32(t,e).toString()}createInt64(t,e,r,n){return super.createInt64(t,e,r,n).toString()}createInt32Neg(t,e){return super.createInt32Neg(t,e).toString()}createInt64Neg(t,e,r,n){return super.createInt64Neg(t,e,r,n).toString()}createTrue(){return"true"}createFalse(){return"false"}createFloat(t){const e=super.createFloat(t);return s.isNegativeZero(t)?"-0_1":"".concat(e,"_1")}createFloatSingle(t,e,r,n){const i=super.createFloatSingle(t,e,r,n);return"".concat(i,"_2")}createFloatDouble(t,e,r,n,i,s,u,o){const a=super.createFloatDouble(t,e,r,n,i,s,u,o);return"".concat(a,"_3")}createByteString(t,e){const r=t.join(", ");return-1===e?"(_ ".concat(r,")"):"h'".concat(r)}createByteStringFromHeap(t,e){const r=n.from(super.createByteStringFromHeap(t,e)).toString("hex");return"h'".concat(r,"'")}createInfinity(){return"Infinity_1"}createInfinityNeg(){return"-Infinity_1"}createNaN(){return"NaN_1"}createNaNNeg(){return"-NaN_1"}createNull(){return"null"}createUndefined(){return"undefined"}createSimpleUnassigned(t){return"simple(".concat(t,")")}createArray(t,e){const r=super.createArray(t,e);return-1===e?"[_ ".concat(r.join(", "),"]"):"[".concat(r.join(", "),"]")}createMap(t,e){const r=super.createMap(t),n=Array.from(r.keys()).reduce(o(r),"");return-1===e?"{_ ".concat(n,"}"):"{".concat(n,"}")}createObject(t,e){const r=super.createObject(t),n=Object.keys(r).reduce(o(r),"");return-1===e?"{_ ".concat(n,"}"):"{".concat(n,"}")}createUtf8String(t,e){const r=t.join(", ");return-1===e?"(_ ".concat(r,")"):'"'.concat(r,'"')}createUtf8StringFromHeap(t,e){const r=n.from(super.createUtf8StringFromHeap(t,e)).toString("utf8");return'"'.concat(r,'"')}static diagnose(t,e){return"string"==typeof t&&(t=n.from(t,e||"hex")),(new u).decodeFirst(t)}}function o(t){return(e,r)=>e?"".concat(e,", ").concat(r,": ").concat(t[r]):"".concat(r,": ").concat(t[r])}t.exports=u},function(t,e,r){"use strict";e.byteLength=function(t){var e=h(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=h(t),u=n[0],o=n[1],a=new s(function(t,e,r){return 3*(e+r)/4-r}(0,u,o)),f=0,c=o>0?u-4:u;for(r=0;r<c;r+=4)e=i[t.charCodeAt(r)]<<18|i[t.charCodeAt(r+1)]<<12|i[t.charCodeAt(r+2)]<<6|i[t.charCodeAt(r+3)],a[f++]=e>>16&255,a[f++]=e>>8&255,a[f++]=255&e;2===o&&(e=i[t.charCodeAt(r)]<<2|i[t.charCodeAt(r+1)]>>4,a[f++]=255&e);1===o&&(e=i[t.charCodeAt(r)]<<10|i[t.charCodeAt(r+1)]<<4|i[t.charCodeAt(r+2)]>>2,a[f++]=e>>8&255,a[f++]=255&e);return a},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,s=[],u=0,o=r-i;u<o;u+=16383)s.push(f(t,u,u+16383>o?o:u+16383));1===i?(e=t[r-1],s.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],s.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return s.join("")};for(var n=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,a=u.length;o<a;++o)n[o]=u[o],i[u.charCodeAt(o)]=o;function h(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function f(t,e,r){for(var i,s,u=[],o=e;o<r;o+=3)i=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),u.push(n[(s=i)>>18&63]+n[s>>12&63]+n[s>>6&63]+n[63&s]);return u.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e,r){"use strict";var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,r){"use strict";t.exports=function(t,e,r){"use asm";var n=new t.Uint8Array(r);var i=e.pushInt;var s=e.pushInt32;var u=e.pushInt32Neg;var o=e.pushInt64;var a=e.pushInt64Neg;var h=e.pushFloat;var f=e.pushFloatSingle;var c=e.pushFloatDouble;var p=e.pushTrue;var l=e.pushFalse;var g=e.pushUndefined;var d=e.pushNull;var y=e.pushInfinity;var _=e.pushInfinityNeg;var w=e.pushNaN;var m=e.pushNaNNeg;var E=e.pushArrayStart;var b=e.pushArrayStartFixed;var v=e.pushArrayStartFixed32;var S=e.pushArrayStartFixed64;var A=e.pushObjectStart;var N=e.pushObjectStartFixed;var T=e.pushObjectStartFixed32;var I=e.pushObjectStartFixed64;var R=e.pushByteString;var U=e.pushByteStringStart;var B=e.pushUtf8String;var P=e.pushUtf8StringStart;var O=e.pushSimpleUnassigned;var F=e.pushTagStart;var L=e.pushTagStart4;var M=e.pushTagStart8;var x=e.pushTagUnassigned;var D=e.pushBreak;var C=t.Math.pow;var Y=0;var j=0;var k=0;function G(t){t=t|0;Y=0;j=t;while((Y|0)<(j|0)){k=Jt[n[Y]&255](n[Y]|0)|0;if((k|0)>0){break}}return k|0}function H(t){t=t|0;if(((Y|0)+(t|0)|0)<(j|0)){return 0}return 1}function z(t){t=t|0;return n[t|0]<<8|n[t+1|0]|0}function W(t){t=t|0;return n[t|0]<<24|n[t+1|0]<<16|n[t+2|0]<<8|n[t+3|0]|0}function K(t){t=t|0;i(t|0);Y=Y+1|0;return 0}function q(t){t=t|0;if(H(1)|0){return 1}i(n[Y+1|0]|0);Y=Y+2|0;return 0}function X(t){t=t|0;if(H(2)|0){return 1}i(z(Y+1|0)|0);Y=Y+3|0;return 0}function $(t){t=t|0;if(H(4)|0){return 1}s(z(Y+1|0)|0,z(Y+3|0)|0);Y=Y+5|0;return 0}function J(t){t=t|0;if(H(8)|0){return 1}o(z(Y+1|0)|0,z(Y+3|0)|0,z(Y+5|0)|0,z(Y+7|0)|0);Y=Y+9|0;return 0}function V(t){t=t|0;i(-1-(t-32|0)|0);Y=Y+1|0;return 0}function Z(t){t=t|0;if(H(1)|0){return 1}i(-1-(n[Y+1|0]|0)|0);Y=Y+2|0;return 0}function Q(t){t=t|0;var e=0;if(H(2)|0){return 1}e=z(Y+1|0)|0;i(-1-(e|0)|0);Y=Y+3|0;return 0}function tt(t){t=t|0;if(H(4)|0){return 1}u(z(Y+1|0)|0,z(Y+3|0)|0);Y=Y+5|0;return 0}function et(t){t=t|0;if(H(8)|0){return 1}a(z(Y+1|0)|0,z(Y+3|0)|0,z(Y+5|0)|0,z(Y+7|0)|0);Y=Y+9|0;return 0}function rt(t){t=t|0;var e=0;var r=0;var n=0;n=t-64|0;if(H(n|0)|0){return 1}e=Y+1|0;r=(Y+1|0)+(n|0)|0;R(e|0,r|0);Y=r|0;return 0}function nt(t){t=t|0;var e=0;var r=0;var i=0;if(H(1)|0){return 1}i=n[Y+1|0]|0;e=Y+2|0;r=(Y+2|0)+(i|0)|0;if(H(i+1|0)|0){return 1}R(e|0,r|0);Y=r|0;return 0}function it(t){t=t|0;var e=0;var r=0;var n=0;if(H(2)|0){return 1}n=z(Y+1|0)|0;e=Y+3|0;r=(Y+3|0)+(n|0)|0;if(H(n+2|0)|0){return 1}R(e|0,r|0);Y=r|0;return 0}function st(t){t=t|0;var e=0;var r=0;var n=0;if(H(4)|0){return 1}n=W(Y+1|0)|0;e=Y+5|0;r=(Y+5|0)+(n|0)|0;if(H(n+4|0)|0){return 1}R(e|0,r|0);Y=r|0;return 0}function ut(t){t=t|0;return 1}function ot(t){t=t|0;U();Y=Y+1|0;return 0}function at(t){t=t|0;var e=0;var r=0;var n=0;n=t-96|0;if(H(n|0)|0){return 1}e=Y+1|0;r=(Y+1|0)+(n|0)|0;B(e|0,r|0);Y=r|0;return 0}function ht(t){t=t|0;var e=0;var r=0;var i=0;if(H(1)|0){return 1}i=n[Y+1|0]|0;e=Y+2|0;r=(Y+2|0)+(i|0)|0;if(H(i+1|0)|0){return 1}B(e|0,r|0);Y=r|0;return 0}function ft(t){t=t|0;var e=0;var r=0;var n=0;if(H(2)|0){return 1}n=z(Y+1|0)|0;e=Y+3|0;r=(Y+3|0)+(n|0)|0;if(H(n+2|0)|0){return 1}B(e|0,r|0);Y=r|0;return 0}function ct(t){t=t|0;var e=0;var r=0;var n=0;if(H(4)|0){return 1}n=W(Y+1|0)|0;e=Y+5|0;r=(Y+5|0)+(n|0)|0;if(H(n+4|0)|0){return 1}B(e|0,r|0);Y=r|0;return 0}function pt(t){t=t|0;return 1}function lt(t){t=t|0;P();Y=Y+1|0;return 0}function gt(t){t=t|0;b(t-128|0);Y=Y+1|0;return 0}function dt(t){t=t|0;if(H(1)|0){return 1}b(n[Y+1|0]|0);Y=Y+2|0;return 0}function yt(t){t=t|0;if(H(2)|0){return 1}b(z(Y+1|0)|0);Y=Y+3|0;return 0}function _t(t){t=t|0;if(H(4)|0){return 1}v(z(Y+1|0)|0,z(Y+3|0)|0);Y=Y+5|0;return 0}function wt(t){t=t|0;if(H(8)|0){return 1}S(z(Y+1|0)|0,z(Y+3|0)|0,z(Y+5|0)|0,z(Y+7|0)|0);Y=Y+9|0;return 0}function mt(t){t=t|0;E();Y=Y+1|0;return 0}function Et(t){t=t|0;var e=0;e=t-160|0;if(H(e|0)|0){return 1}N(e|0);Y=Y+1|0;return 0}function bt(t){t=t|0;if(H(1)|0){return 1}N(n[Y+1|0]|0);Y=Y+2|0;return 0}function vt(t){t=t|0;if(H(2)|0){return 1}N(z(Y+1|0)|0);Y=Y+3|0;return 0}function St(t){t=t|0;if(H(4)|0){return 1}T(z(Y+1|0)|0,z(Y+3|0)|0);Y=Y+5|0;return 0}function At(t){t=t|0;if(H(8)|0){return 1}I(z(Y+1|0)|0,z(Y+3|0)|0,z(Y+5|0)|0,z(Y+7|0)|0);Y=Y+9|0;return 0}function Nt(t){t=t|0;A();Y=Y+1|0;return 0}function Tt(t){t=t|0;F(t-192|0|0);Y=Y+1|0;return 0}function It(t){t|0;F(t|0);Y=Y+1|0;return 0}function Rt(t){t|0;F(t|0);Y=Y+1|0;return 0}function Ut(t){t|0;F(t|0);Y=Y+1|0;return 0}function Bt(t){t|0;F(t|0);Y=Y+1|0;return 0}function Pt(t){t=t|0;F(t-192|0|0);Y=Y+1|0;return 0}function Ot(t){t|0;F(t|0);Y=Y+1|0;return 0}function Ft(t){t|0;F(t|0);Y=Y+1|0;return 0}function Lt(t){t|0;F(t|0);Y=Y+1|0;return 0}function Mt(t){t=t|0;if(H(1)|0){return 1}F(n[Y+1|0]|0);Y=Y+2|0;return 0}function xt(t){t=t|0;if(H(2)|0){return 1}F(z(Y+1|0)|0);Y=Y+3|0;return 0}function Dt(t){t=t|0;if(H(4)|0){return 1}L(z(Y+1|0)|0,z(Y+3|0)|0);Y=Y+5|0;return 0}function Ct(t){t=t|0;if(H(8)|0){return 1}M(z(Y+1|0)|0,z(Y+3|0)|0,z(Y+5|0)|0,z(Y+7|0)|0);Y=Y+9|0;return 0}function Yt(t){t=t|0;O((t|0)-224|0);Y=Y+1|0;return 0}function jt(t){t=t|0;l();Y=Y+1|0;return 0}function kt(t){t=t|0;p();Y=Y+1|0;return 0}function Gt(t){t=t|0;d();Y=Y+1|0;return 0}function Ht(t){t=t|0;g();Y=Y+1|0;return 0}function zt(t){t=t|0;if(H(1)|0){return 1}O(n[Y+1|0]|0);Y=Y+2|0;return 0}function Wt(t){t=t|0;var e=0;var r=0;var i=1.0;var s=0.0;var u=0.0;var o=0.0;if(H(2)|0){return 1}e=n[Y+1|0]|0;r=n[Y+2|0]|0;if((e|0)&0x80){i=-1.0}s=+(((e|0)&0x7C)>>2);u=+(((e|0)&0x03)<<8|r);if(+s==0.0){h(+(+i*+5.9604644775390625e-8*+u))}else if(+s==31.0){if(+i==1.0){if(+u>0.0){w()}else{y()}}else{if(+u>0.0){m()}else{_()}}}else{h(+(+i*C(+2,+(+s-25.0))*+(1024.0+u)))}Y=Y+3|0;return 0}function Kt(t){t=t|0;if(H(4)|0){return 1}f(n[Y+1|0]|0,n[Y+2|0]|0,n[Y+3|0]|0,n[Y+4|0]|0);Y=Y+5|0;return 0}function qt(t){t=t|0;if(H(8)|0){return 1}c(n[Y+1|0]|0,n[Y+2|0]|0,n[Y+3|0]|0,n[Y+4|0]|0,n[Y+5|0]|0,n[Y+6|0]|0,n[Y+7|0]|0,n[Y+8|0]|0);Y=Y+9|0;return 0}function Xt(t){t=t|0;return 1}function $t(t){t=t|0;D();Y=Y+1|0;return 0}var Jt=[K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,q,X,$,J,Xt,Xt,Xt,Xt,V,V,V,V,V,V,V,V,V,V,V,V,V,V,V,V,V,V,V,V,V,V,V,V,Z,Q,tt,et,Xt,Xt,Xt,Xt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,rt,nt,it,st,ut,Xt,Xt,Xt,ot,at,at,at,at,at,at,at,at,at,at,at,at,at,at,at,at,at,at,at,at,at,at,at,at,ht,ft,ct,pt,Xt,Xt,Xt,lt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,gt,dt,yt,_t,wt,Xt,Xt,Xt,mt,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,Et,bt,vt,St,At,Xt,Xt,Xt,Nt,Tt,Tt,Tt,Tt,Tt,Tt,Pt,Pt,Pt,Pt,Pt,Pt,Pt,Pt,Pt,Pt,Pt,Pt,Pt,Pt,Pt,Pt,Pt,Pt,Mt,xt,Dt,Ct,Xt,Xt,Xt,Xt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,Yt,jt,kt,Gt,Ht,zt,Wt,Kt,qt,Xt,Xt,Xt,$t];return{parse:G}}},function(t,e,r){"use strict";const{URLWithLegacySupport:n,format:i}=r(10);t.exports=(t,e={},r={},s)=>{let u,o=e.protocol?e.protocol.replace(":",""):"http";o=(r[o]||s||o)+":";try{u=new n(t)}catch(h){u={}}const a=Object.assign({},e,{protocol:o||u.protocol,host:e.host||u.host});return new n(t,i(a)).toString()}},function(t,e,r){"use strict";const{Buffer:n}=r(0),{URL:i}=r(9),s=r(1).BigNumber,u=r(3),o=r(2),a=o.MT,h=o.NUMBYTES,f=o.SHIFT32,c=o.SYMS,p=o.TAG,l=o.MT.SIMPLE_FLOAT<<5|o.NUMBYTES.TWO,g=o.MT.SIMPLE_FLOAT<<5|o.NUMBYTES.FOUR,d=o.MT.SIMPLE_FLOAT<<5|o.NUMBYTES.EIGHT,y=o.MT.SIMPLE_FLOAT<<5|o.SIMPLE.TRUE,_=o.MT.SIMPLE_FLOAT<<5|o.SIMPLE.FALSE,w=o.MT.SIMPLE_FLOAT<<5|o.SIMPLE.UNDEFINED,m=o.MT.SIMPLE_FLOAT<<5|o.SIMPLE.NULL,E=new s("0x20000000000000"),b=n.from("f97e00","hex"),v=n.from("f9fc00","hex"),S=n.from("f97c00","hex");class A{constructor(t){t=t||{},this.streaming="function"==typeof t.stream,this.onData=t.stream,this.semanticTypes=[[i,this._pushUrl],[s,this._pushBigNumber]];const e=t.genTypes||[],r=e.length;for(let n=0;n<r;n++)this.addSemanticType(e[n][0],e[n][1]);this._reset()}addSemanticType(t,e){const r=this.semanticTypes.length;for(let n=0;n<r;n++){if(this.semanticTypes[n][0]===t){const t=this.semanticTypes[n][1];return this.semanticTypes[n][1]=e,t}}return this.semanticTypes.push([t,e]),null}push(t){return!t||(this.result[this.offset]=t,this.resultMethod[this.offset]=0,this.resultLength[this.offset]=t.length,this.offset++,this.streaming&&this.onData(this.finalize()),!0)}pushWrite(t,e,r){return this.result[this.offset]=t,this.resultMethod[this.offset]=e,this.resultLength[this.offset]=r,this.offset++,this.streaming&&this.onData(this.finalize()),!0}_pushUInt8(t){return this.pushWrite(t,1,1)}_pushUInt16BE(t){return this.pushWrite(t,2,2)}_pushUInt32BE(t){return this.pushWrite(t,3,4)}_pushDoubleBE(t){return this.pushWrite(t,4,8)}_pushNaN(){return this.push(b)}_pushInfinity(t){const e=t<0?v:S;return this.push(e)}_pushFloat(t){const e=n.allocUnsafe(2);if(u.writeHalf(e,t)&&u.parseHalf(e)===t)return this._pushUInt8(l)&&this.push(e);const r=n.allocUnsafe(4);return r.writeFloatBE(t,0),r.readFloatBE(0)===t?this._pushUInt8(g)&&this.push(r):this._pushUInt8(d)&&this._pushDoubleBE(t)}_pushInt(t,e,r){const n=e<<5;return t<24?this._pushUInt8(n|t):t<=255?this._pushUInt8(n|h.ONE)&&this._pushUInt8(t):t<=65535?this._pushUInt8(n|h.TWO)&&this._pushUInt16BE(t):t<=4294967295?this._pushUInt8(n|h.FOUR)&&this._pushUInt32BE(t):t<=Number.MAX_SAFE_INTEGER?this._pushUInt8(n|h.EIGHT)&&this._pushUInt32BE(Math.floor(t/f))&&this._pushUInt32BE(t%f):e===a.NEG_INT?this._pushFloat(r):this._pushFloat(t)}_pushIntNum(t){return t<0?this._pushInt(-t-1,a.NEG_INT,t):this._pushInt(t,a.POS_INT)}_pushNumber(t){switch(!1){case t==t:return this._pushNaN(t);case isFinite(t):return this._pushInfinity(t);case t%1!=0:return this._pushIntNum(t);default:return this._pushFloat(t)}}_pushString(t){const e=n.byteLength(t,"utf8");return this._pushInt(e,a.UTF8_STRING)&&this.pushWrite(t,5,e)}_pushBoolean(t){return this._pushUInt8(t?y:_)}_pushUndefined(t){return this._pushUInt8(w)}_pushArray(t,e){const r=e.length;if(!t._pushInt(r,a.ARRAY))return!1;for(let n=0;n<r;n++)if(!t.pushAny(e[n]))return!1;return!0}_pushTag(t){return this._pushInt(t,a.TAG)}_pushDate(t,e){return t._pushTag(p.DATE_EPOCH)&&t.pushAny(Math.round(e/1e3))}_pushBuffer(t,e){return t._pushInt(e.length,a.BYTE_STRING)&&t.push(e)}_pushNoFilter(t,e){return t._pushBuffer(t,e.slice())}_pushRegexp(t,e){return t._pushTag(p.REGEXP)&&t.pushAny(e.source)}_pushSet(t,e){if(!t._pushInt(e.size,a.ARRAY))return!1;for(const r of e)if(!t.pushAny(r))return!1;return!0}_pushUrl(t,e){return t._pushTag(p.URI)&&t.pushAny(e.format())}_pushBigint(t){let e=p.POS_BIGINT;t.isNegative()&&(t=t.negated().minus(1),e=p.NEG_BIGINT);let r=t.toString(16);r.length%2&&(r="0"+r);const i=n.from(r,"hex");return this._pushTag(e)&&this._pushBuffer(this,i)}_pushBigNumber(t,e){if(e.isNaN())return t._pushNaN();if(!e.isFinite())return t._pushInfinity(e.isNegative()?-1/0:1/0);if(e.isInteger())return t._pushBigint(e);if(!t._pushTag(p.DECIMAL_FRAC)||!t._pushInt(2,a.ARRAY))return!1;const r=e.decimalPlaces(),n=e.multipliedBy(new s(10).pow(r));return!!t._pushIntNum(-r)&&(n.abs().isLessThan(E)?t._pushIntNum(n.toNumber()):t._pushBigint(n))}_pushMap(t,e){return!!t._pushInt(e.size,a.MAP)&&this._pushRawMap(e.size,Array.from(e))}_pushObject(t){if(!t)return this._pushUInt8(m);for(var e=this.semanticTypes.length,r=0;r<e;r++)if(t instanceof this.semanticTypes[r][0])return this.semanticTypes[r][1].call(t,this,t);var n=t.encodeCBOR;if("function"==typeof n)return n.call(t,this);var i=Object.keys(t),s=i.length;return!!this._pushInt(s,a.MAP)&&this._pushRawMap(s,i.map(e=>[e,t[e]]))}_pushRawMap(t,e){e=e.map((function(t){return t[0]=A.encode(t[0]),t})).sort(u.keySorter);for(var r=0;r<t;r++){if(!this.push(e[r][0]))return!1;if(!this.pushAny(e[r][1]))return!1}return!0}write(t){return this.pushAny(t)}pushAny(t){switch(function(t){return{}.toString.call(t).slice(8,-1)}(t)){case"Number":return this._pushNumber(t);case"String":return this._pushString(t);case"Boolean":return this._pushBoolean(t);case"Object":return this._pushObject(t);case"Array":return this._pushArray(this,t);case"Uint8Array":return this._pushBuffer(this,n.isBuffer(t)?t:n.from(t));case"Null":return this._pushUInt8(m);case"Undefined":return this._pushUndefined(t);case"Map":return this._pushMap(this,t);case"Set":return this._pushSet(this,t);case"URL":return this._pushUrl(this,t);case"BigNumber":return this._pushBigNumber(this,t);case"Date":return this._pushDate(this,t);case"RegExp":return this._pushRegexp(this,t);case"Symbol":switch(t){case c.NULL:return this._pushObject(null);case c.UNDEFINED:return this._pushUndefined(void 0);default:throw new Error("Unknown symbol: "+t.toString())}default:throw new Error("Unknown type: "+typeof t+", "+(t?t.toString():""))}}finalize(){if(0===this.offset)return null;for(var t=this.result,e=this.resultLength,r=this.resultMethod,i=this.offset,s=0,u=0;u<i;u++)s+=e[u];var o=n.allocUnsafe(s),a=0,h=0;for(u=0;u<i;u++){switch(h=e[u],r[u]){case 0:t[u].copy(o,a);break;case 1:o.writeUInt8(t[u],a,!0);break;case 2:o.writeUInt16BE(t[u],a,!0);break;case 3:o.writeUInt32BE(t[u],a,!0);break;case 4:o.writeDoubleBE(t[u],a,!0);break;case 5:o.write(t[u],a,h,"utf8");break;default:throw new Error("unkown method")}a+=h}var f=o;return this._reset(),f}_reset(){this.result=[],this.resultMethod=[],this.resultLength=[],this.offset=0}static encode(t){const e=new A;if(!e.pushAny(t))throw new Error("Failed to encode input");return e.finalize()}}t.exports=A}])}));
-//# sourceMappingURL=index.min.js.map
\ No newline at end of file
+(function (root, factory) {(typeof module === 'object' && module.exports) ? module.exports = factory() : root.Borc = factory()}(typeof self !== 'undefined' ? self : this, function () {
+var Borc=(()=>{var ce=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports);var $t=ce(ft=>{"use strict";ft.byteLength=Jr;ft.toByteArray=Zr;ft.fromByteArray=Qr;var Te=[],Ie=[],jr=typeof Uint8Array!="undefined"?Uint8Array:Array,wt="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var qe=0,en=wt.length;qe<en;++qe)Te[qe]=wt[qe],Ie[wt.charCodeAt(qe)]=qe;Ie["-".charCodeAt(0)]=62;Ie["_".charCodeAt(0)]=63;function bt(r){var e=r.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var t=r.indexOf("=");t===-1&&(t=e);var n=t===e?0:4-t%4;return[t,n]}function Jr(r){var e=bt(r),t=e[0],n=e[1];return(t+n)*3/4-n}function tn(r,e,t){return(e+t)*3/4-t}function Zr(r){var e,t=bt(r),n=t[0],i=t[1],h=new jr(tn(r,n,i)),a=0,m=i>0?n-4:n,B;for(B=0;B<m;B+=4)e=Ie[r.charCodeAt(B)]<<18|Ie[r.charCodeAt(B+1)]<<12|Ie[r.charCodeAt(B+2)]<<6|Ie[r.charCodeAt(B+3)],h[a++]=e>>16&255,h[a++]=e>>8&255,h[a++]=e&255;return i===2&&(e=Ie[r.charCodeAt(B)]<<2|Ie[r.charCodeAt(B+1)]>>4,h[a++]=e&255),i===1&&(e=Ie[r.charCodeAt(B)]<<10|Ie[r.charCodeAt(B+1)]<<4|Ie[r.charCodeAt(B+2)]>>2,h[a++]=e>>8&255,h[a++]=e&255),h}function rn(r){return Te[r>>18&63]+Te[r>>12&63]+Te[r>>6&63]+Te[r&63]}function nn(r,e,t){for(var n,i=[],h=e;h<t;h+=3)n=(r[h]<<16&16711680)+(r[h+1]<<8&65280)+(r[h+2]&255),i.push(rn(n));return i.join("")}function Qr(r){for(var e,t=r.length,n=t%3,i=[],h=16383,a=0,m=t-n;a<m;a+=h)i.push(nn(r,a,a+h>m?m:a+h));return n===1?(e=r[t-1],i.push(Te[e>>2]+Te[e<<4&63]+"==")):n===2&&(e=(r[t-2]<<8)+r[t-1],i.push(Te[e>>10]+Te[e>>4&63]+Te[e<<2&63]+"=")),i.join("")}});var _t=ce(yt=>{yt.read=function(r,e,t,n,i){var h,a,m=i*8-n-1,B=(1<<m)-1,O=B>>1,U=-7,F=t?i-1:0,q=t?-1:1,le=r[e+F];for(F+=q,h=le&(1<<-U)-1,le>>=-U,U+=m;U>0;h=h*256+r[e+F],F+=q,U-=8);for(a=h&(1<<-U)-1,h>>=-U,U+=n;U>0;a=a*256+r[e+F],F+=q,U-=8);if(h===0)h=1-O;else{if(h===B)return a?NaN:(le?-1:1)*Infinity;a=a+Math.pow(2,n),h=h-O}return(le?-1:1)*a*Math.pow(2,h-n)};yt.write=function(r,e,t,n,i,h){var a,m,B,O=h*8-i-1,U=(1<<O)-1,F=U>>1,q=i===23?Math.pow(2,-24)-Math.pow(2,-77):0,le=n?0:h-1,ie=n?1:-1,fe=e<0||e===0&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===Infinity?(m=isNaN(e)?1:0,a=U):(a=Math.floor(Math.log(e)/Math.LN2),e*(B=Math.pow(2,-a))<1&&(a--,B*=2),a+F>=1?e+=q/B:e+=q*Math.pow(2,1-F),e*B>=2&&(a++,B/=2),a+F>=U?(m=0,a=U):a+F>=1?(m=(e*B-1)*Math.pow(2,i),a=a+F):(m=e*Math.pow(2,F-1)*Math.pow(2,i),a=0));i>=8;r[t+le]=m&255,le+=ie,m/=256,i-=8);for(a=a<<i|m,O+=i;O>0;r[t+le]=a&255,le+=ie,a/=256,O-=8);r[t+le-ie]|=fe*128}});var tt=ce(Ye=>{"use strict";var It=$t(),He=_t(),vt=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;Ye.Buffer=I;Ye.SlowBuffer=sn;Ye.INSPECT_MAX_BYTES=50;var at=2147483647;Ye.kMaxLength=at;I.TYPED_ARRAY_SUPPORT=un();!I.TYPED_ARRAY_SUPPORT&&typeof console!="undefined"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function un(){try{let r=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(r,e),r.foo()===42}catch(r){return!1}}Object.defineProperty(I.prototype,"parent",{enumerable:!0,get:function(){if(!!I.isBuffer(this))return this.buffer}});Object.defineProperty(I.prototype,"offset",{enumerable:!0,get:function(){if(!!I.isBuffer(this))return this.byteOffset}});function Re(r){if(r>at)throw new RangeError('The value "'+r+'" is invalid for option "size"');let e=new Uint8Array(r);return Object.setPrototypeOf(e,I.prototype),e}function I(r,e,t){if(typeof r=="number"){if(typeof e=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return Bt(r)}return qt(r,e,t)}I.poolSize=8192;function qt(r,e,t){if(typeof r=="string")return hn(r,e);if(ArrayBuffer.isView(r))return on(r);if(r==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof r);if(Fe(r,ArrayBuffer)||r&&Fe(r.buffer,ArrayBuffer)||typeof SharedArrayBuffer!="undefined"&&(Fe(r,SharedArrayBuffer)||r&&Fe(r.buffer,SharedArrayBuffer)))return At(r,e,t);if(typeof r=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');let n=r.valueOf&&r.valueOf();if(n!=null&&n!==r)return I.from(n,e,t);let i=fn(r);if(i)return i;if(typeof Symbol!="undefined"&&Symbol.toPrimitive!=null&&typeof r[Symbol.toPrimitive]=="function")return I.from(r[Symbol.toPrimitive]("string"),e,t);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof r)}I.from=function(r,e,t){return qt(r,e,t)};Object.setPrototypeOf(I.prototype,Uint8Array.prototype);Object.setPrototypeOf(I,Uint8Array);function Yt(r){if(typeof r!="number")throw new TypeError('"size" argument must be of type number');if(r<0)throw new RangeError('The value "'+r+'" is invalid for option "size"')}function an(r,e,t){return Yt(r),r<=0?Re(r):e!==void 0?typeof t=="string"?Re(r).fill(e,t):Re(r).fill(e):Re(r)}I.alloc=function(r,e,t){return an(r,e,t)};function Bt(r){return Yt(r),Re(r<0?0:mt(r)|0)}I.allocUnsafe=function(r){return Bt(r)};I.allocUnsafeSlow=function(r){return Bt(r)};function hn(r,e){if((typeof e!="string"||e==="")&&(e="utf8"),!I.isEncoding(e))throw new TypeError("Unknown encoding: "+e);let t=Ht(r,e)|0,n=Re(t),i=n.write(r,e);return i!==t&&(n=n.slice(0,i)),n}function Nt(r){let e=r.length<0?0:mt(r.length)|0,t=Re(e);for(let n=0;n<e;n+=1)t[n]=r[n]&255;return t}function on(r){if(Fe(r,Uint8Array)){let e=new Uint8Array(r);return At(e.buffer,e.byteOffset,e.byteLength)}return Nt(r)}function At(r,e,t){if(e<0||r.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(r.byteLength<e+(t||0))throw new RangeError('"length" is outside of buffer bounds');let n;return e===void 0&&t===void 0?n=new Uint8Array(r):t===void 0?n=new Uint8Array(r,e):n=new Uint8Array(r,e,t),Object.setPrototypeOf(n,I.prototype),n}function fn(r){if(I.isBuffer(r)){let e=mt(r.length)|0,t=Re(e);return t.length===0||r.copy(t,0,0,e),t}if(r.length!==void 0)return typeof r.length!="number"||St(r.length)?Re(0):Nt(r);if(r.type==="Buffer"&&Array.isArray(r.data))return Nt(r.data)}function mt(r){if(r>=at)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+at.toString(16)+" bytes");return r|0}function sn(r){return+r!=r&&(r=0),I.alloc(+r)}I.isBuffer=function(e){return e!=null&&e._isBuffer===!0&&e!==I.prototype};I.compare=function(e,t){if(Fe(e,Uint8Array)&&(e=I.from(e,e.offset,e.byteLength)),Fe(t,Uint8Array)&&(t=I.from(t,t.offset,t.byteLength)),!I.isBuffer(e)||!I.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,i=t.length;for(let h=0,a=Math.min(n,i);h<a;++h)if(e[h]!==t[h]){n=e[h],i=t[h];break}return n<i?-1:i<n?1:0};I.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}};I.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(e.length===0)return I.alloc(0);let n;if(t===void 0)for(t=0,n=0;n<e.length;++n)t+=e[n].length;let i=I.allocUnsafe(t),h=0;for(n=0;n<e.length;++n){let a=e[n];if(Fe(a,Uint8Array))h+a.length>i.length?(I.isBuffer(a)||(a=I.from(a)),a.copy(i,h)):Uint8Array.prototype.set.call(i,a,h);else if(I.isBuffer(a))a.copy(i,h);else throw new TypeError('"list" argument must be an Array of Buffers');h+=a.length}return i};function Ht(r,e){if(I.isBuffer(r))return r.length;if(ArrayBuffer.isView(r)||Fe(r,ArrayBuffer))return r.byteLength;if(typeof r!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof r);let t=r.length,n=arguments.length>2&&arguments[2]===!0;if(!n&&t===0)return 0;let i=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return t;case"utf8":case"utf-8":return xt(r).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return t*2;case"hex":return t>>>1;case"base64":return Wt(r).length;default:if(i)return n?-1:xt(r).length;e=(""+e).toLowerCase(),i=!0}}I.byteLength=Ht;function En(r,e,t){let n=!1;if((e===void 0||e<0)&&(e=0),e>this.length||((t===void 0||t>this.length)&&(t=this.length),t<=0)||(t>>>=0,e>>>=0,t<=e))return"";for(r||(r="utf8");;)switch(r){case"hex":return gn(this,e,t);case"utf8":case"utf-8":return zt(this,e,t);case"ascii":return ln(this,e,t);case"latin1":case"binary":return pn(this,e,t);case"base64":return cn(this,e,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return dn(this,e,t);default:if(n)throw new TypeError("Unknown encoding: "+r);r=(r+"").toLowerCase(),n=!0}}I.prototype._isBuffer=!0;function Ge(r,e,t){let n=r[e];r[e]=r[t],r[t]=n}I.prototype.swap16=function(){let e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)Ge(this,t,t+1);return this};I.prototype.swap32=function(){let e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)Ge(this,t,t+3),Ge(this,t+1,t+2);return this};I.prototype.swap64=function(){let e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)Ge(this,t,t+7),Ge(this,t+1,t+6),Ge(this,t+2,t+5),Ge(this,t+3,t+4);return this};I.prototype.toString=function(){let e=this.length;return e===0?"":arguments.length===0?zt(this,0,e):En.apply(this,arguments)};I.prototype.toLocaleString=I.prototype.toString;I.prototype.equals=function(e){if(!I.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e?!0:I.compare(this,e)===0};I.prototype.inspect=function(){let e="",t=Ye.INSPECT_MAX_BYTES;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"};vt&&(I.prototype[vt]=I.prototype.inspect);I.prototype.compare=function(e,t,n,i,h){if(Fe(e,Uint8Array)&&(e=I.from(e,e.offset,e.byteLength)),!I.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(t===void 0&&(t=0),n===void 0&&(n=e?e.length:0),i===void 0&&(i=0),h===void 0&&(h=this.length),t<0||n>e.length||i<0||h>this.length)throw new RangeError("out of range index");if(i>=h&&t>=n)return 0;if(i>=h)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,i>>>=0,h>>>=0,this===e)return 0;let a=h-i,m=n-t,B=Math.min(a,m),O=this.slice(i,h),U=e.slice(t,n);for(let F=0;F<B;++F)if(O[F]!==U[F]){a=O[F],m=U[F];break}return a<m?-1:m<a?1:0};function Xt(r,e,t,n,i){if(r.length===0)return-1;if(typeof t=="string"?(n=t,t=0):t>2147483647?t=2147483647:t<-2147483648&&(t=-2147483648),t=+t,St(t)&&(t=i?0:r.length-1),t<0&&(t=r.length+t),t>=r.length){if(i)return-1;t=r.length-1}else if(t<0)if(i)t=0;else return-1;if(typeof e=="string"&&(e=I.from(e,n)),I.isBuffer(e))return e.length===0?-1:Kt(r,e,t,n,i);if(typeof e=="number")return e=e&255,typeof Uint8Array.prototype.indexOf=="function"?i?Uint8Array.prototype.indexOf.call(r,e,t):Uint8Array.prototype.lastIndexOf.call(r,e,t):Kt(r,[e],t,n,i);throw new TypeError("val must be string, number or Buffer")}function Kt(r,e,t,n,i){let h=1,a=r.length,m=e.length;if(n!==void 0&&(n=String(n).toLowerCase(),n==="ucs2"||n==="ucs-2"||n==="utf16le"||n==="utf-16le")){if(r.length<2||e.length<2)return-1;h=2,a/=2,m/=2,t/=2}function B(U,F){return h===1?U[F]:U.readUInt16BE(F*h)}let O;if(i){let U=-1;for(O=t;O<a;O++)if(B(r,O)===B(e,U===-1?0:O-U)){if(U===-1&&(U=O),O-U+1===m)return U*h}else U!==-1&&(O-=O-U),U=-1}else for(t+m>a&&(t=a-m),O=t;O>=0;O--){let U=!0;for(let F=0;F<m;F++)if(B(r,O+F)!==B(e,F)){U=!1;break}if(U)return O}return-1}I.prototype.includes=function(e,t,n){return this.indexOf(e,t,n)!==-1};I.prototype.indexOf=function(e,t,n){return Xt(this,e,t,n,!0)};I.prototype.lastIndexOf=function(e,t,n){return Xt(this,e,t,n,!1)};function wn(r,e,t,n){t=Number(t)||0;let i=r.length-t;n?(n=Number(n),n>i&&(n=i)):n=i;let h=e.length;n>h/2&&(n=h/2);let a;for(a=0;a<n;++a){let m=parseInt(e.substr(a*2,2),16);if(St(m))return a;r[t+a]=m}return a}function yn(r,e,t,n){return ct(xt(e,r.length-t),r,t,n)}function In(r,e,t,n){return ct(_n(e),r,t,n)}function Bn(r,e,t,n){return ct(Wt(e),r,t,n)}function mn(r,e,t,n){return ct(An(e,r.length-t),r,t,n)}I.prototype.write=function(e,t,n,i){if(t===void 0)i="utf8",n=this.length,t=0;else if(n===void 0&&typeof t=="string")i=t,n=this.length,t=0;else if(isFinite(t))t=t>>>0,isFinite(n)?(n=n>>>0,i===void 0&&(i="utf8")):(i=n,n=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");let h=this.length-t;if((n===void 0||n>h)&&(n=h),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");let a=!1;for(;;)switch(i){case"hex":return wn(this,e,t,n);case"utf8":case"utf-8":return yn(this,e,t,n);case"ascii":case"latin1":case"binary":return In(this,e,t,n);case"base64":return Bn(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return mn(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),a=!0}};I.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function cn(r,e,t){return e===0&&t===r.length?It.fromByteArray(r):It.fromByteArray(r.slice(e,t))}function zt(r,e,t){t=Math.min(r.length,t);let n=[],i=e;for(;i<t;){let h=r[i],a=null,m=h>239?4:h>223?3:h>191?2:1;if(i+m<=t){let B,O,U,F;switch(m){case 1:h<128&&(a=h);break;case 2:B=r[i+1],(B&192)==128&&(F=(h&31)<<6|B&63,F>127&&(a=F));break;case 3:B=r[i+1],O=r[i+2],(B&192)==128&&(O&192)==128&&(F=(h&15)<<12|(B&63)<<6|O&63,F>2047&&(F<55296||F>57343)&&(a=F));break;case 4:B=r[i+1],O=r[i+2],U=r[i+3],(B&192)==128&&(O&192)==128&&(U&192)==128&&(F=(h&15)<<18|(B&63)<<12|(O&63)<<6|U&63,F>65535&&F<1114112&&(a=F))}}a===null?(a=65533,m=1):a>65535&&(a-=65536,n.push(a>>>10&1023|55296),a=56320|a&1023),n.push(a),i+=m}return Nn(n)}var Vt=4096;function Nn(r){let e=r.length;if(e<=Vt)return String.fromCharCode.apply(String,r);let t="",n=0;for(;n<e;)t+=String.fromCharCode.apply(String,r.slice(n,n+=Vt));return t}function ln(r,e,t){let n="";t=Math.min(r.length,t);for(let i=e;i<t;++i)n+=String.fromCharCode(r[i]&127);return n}function pn(r,e,t){let n="";t=Math.min(r.length,t);for(let i=e;i<t;++i)n+=String.fromCharCode(r[i]);return n}function gn(r,e,t){let n=r.length;(!e||e<0)&&(e=0),(!t||t<0||t>n)&&(t=n);let i="";for(let h=e;h<t;++h)i+=Sn[r[h]];return i}function dn(r,e,t){let n=r.slice(e,t),i="";for(let h=0;h<n.length-1;h+=2)i+=String.fromCharCode(n[h]+n[h+1]*256);return i}I.prototype.slice=function(e,t){let n=this.length;e=~~e,t=t===void 0?n:~~t,e<0?(e+=n,e<0&&(e=0)):e>n&&(e=n),t<0?(t+=n,t<0&&(t=0)):t>n&&(t=n),t<e&&(t=e);let i=this.subarray(e,t);return Object.setPrototypeOf(i,I.prototype),i};function ue(r,e,t){if(r%1!=0||r<0)throw new RangeError("offset is not uint");if(r+e>t)throw new RangeError("Trying to access beyond buffer length")}I.prototype.readUintLE=I.prototype.readUIntLE=function(e,t,n){e=e>>>0,t=t>>>0,n||ue(e,t,this.length);let i=this[e],h=1,a=0;for(;++a<t&&(h*=256);)i+=this[e+a]*h;return i};I.prototype.readUintBE=I.prototype.readUIntBE=function(e,t,n){e=e>>>0,t=t>>>0,n||ue(e,t,this.length);let i=this[e+--t],h=1;for(;t>0&&(h*=256);)i+=this[e+--t]*h;return i};I.prototype.readUint8=I.prototype.readUInt8=function(e,t){return e=e>>>0,t||ue(e,1,this.length),this[e]};I.prototype.readUint16LE=I.prototype.readUInt16LE=function(e,t){return e=e>>>0,t||ue(e,2,this.length),this[e]|this[e+1]<<8};I.prototype.readUint16BE=I.prototype.readUInt16BE=function(e,t){return e=e>>>0,t||ue(e,2,this.length),this[e]<<8|this[e+1]};I.prototype.readUint32LE=I.prototype.readUInt32LE=function(e,t){return e=e>>>0,t||ue(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+this[e+3]*16777216};I.prototype.readUint32BE=I.prototype.readUInt32BE=function(e,t){return e=e>>>0,t||ue(e,4,this.length),this[e]*16777216+(this[e+1]<<16|this[e+2]<<8|this[e+3])};I.prototype.readBigUInt64LE=Le(function(e){e=e>>>0,We(e,"offset");let t=this[e],n=this[e+7];(t===void 0||n===void 0)&&et(e,this.length-8);let i=t+this[++e]*2**8+this[++e]*2**16+this[++e]*2**24,h=this[++e]+this[++e]*2**8+this[++e]*2**16+n*2**24;return BigInt(i)+(BigInt(h)<<BigInt(32))});I.prototype.readBigUInt64BE=Le(function(e){e=e>>>0,We(e,"offset");let t=this[e],n=this[e+7];(t===void 0||n===void 0)&&et(e,this.length-8);let i=t*2**24+this[++e]*2**16+this[++e]*2**8+this[++e],h=this[++e]*2**24+this[++e]*2**16+this[++e]*2**8+n;return(BigInt(i)<<BigInt(32))+BigInt(h)});I.prototype.readIntLE=function(e,t,n){e=e>>>0,t=t>>>0,n||ue(e,t,this.length);let i=this[e],h=1,a=0;for(;++a<t&&(h*=256);)i+=this[e+a]*h;return h*=128,i>=h&&(i-=Math.pow(2,8*t)),i};I.prototype.readIntBE=function(e,t,n){e=e>>>0,t=t>>>0,n||ue(e,t,this.length);let i=t,h=1,a=this[e+--i];for(;i>0&&(h*=256);)a+=this[e+--i]*h;return h*=128,a>=h&&(a-=Math.pow(2,8*t)),a};I.prototype.readInt8=function(e,t){return e=e>>>0,t||ue(e,1,this.length),this[e]&128?(255-this[e]+1)*-1:this[e]};I.prototype.readInt16LE=function(e,t){e=e>>>0,t||ue(e,2,this.length);let n=this[e]|this[e+1]<<8;return n&32768?n|4294901760:n};I.prototype.readInt16BE=function(e,t){e=e>>>0,t||ue(e,2,this.length);let n=this[e+1]|this[e]<<8;return n&32768?n|4294901760:n};I.prototype.readInt32LE=function(e,t){return e=e>>>0,t||ue(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24};I.prototype.readInt32BE=function(e,t){return e=e>>>0,t||ue(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]};I.prototype.readBigInt64LE=Le(function(e){e=e>>>0,We(e,"offset");let t=this[e],n=this[e+7];(t===void 0||n===void 0)&&et(e,this.length-8);let i=this[e+4]+this[e+5]*2**8+this[e+6]*2**16+(n<<24);return(BigInt(i)<<BigInt(32))+BigInt(t+this[++e]*2**8+this[++e]*2**16+this[++e]*2**24)});I.prototype.readBigInt64BE=Le(function(e){e=e>>>0,We(e,"offset");let t=this[e],n=this[e+7];(t===void 0||n===void 0)&&et(e,this.length-8);let i=(t<<24)+this[++e]*2**16+this[++e]*2**8+this[++e];return(BigInt(i)<<BigInt(32))+BigInt(this[++e]*2**24+this[++e]*2**16+this[++e]*2**8+n)});I.prototype.readFloatLE=function(e,t){return e=e>>>0,t||ue(e,4,this.length),He.read(this,e,!0,23,4)};I.prototype.readFloatBE=function(e,t){return e=e>>>0,t||ue(e,4,this.length),He.read(this,e,!1,23,4)};I.prototype.readDoubleLE=function(e,t){return e=e>>>0,t||ue(e,8,this.length),He.read(this,e,!0,52,8)};I.prototype.readDoubleBE=function(e,t){return e=e>>>0,t||ue(e,8,this.length),He.read(this,e,!1,52,8)};function de(r,e,t,n,i,h){if(!I.isBuffer(r))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<h)throw new RangeError('"value" argument is out of bounds');if(t+n>r.length)throw new RangeError("Index out of range")}I.prototype.writeUintLE=I.prototype.writeUIntLE=function(e,t,n,i){if(e=+e,t=t>>>0,n=n>>>0,!i){let m=Math.pow(2,8*n)-1;de(this,e,t,n,m,0)}let h=1,a=0;for(this[t]=e&255;++a<n&&(h*=256);)this[t+a]=e/h&255;return t+n};I.prototype.writeUintBE=I.prototype.writeUIntBE=function(e,t,n,i){if(e=+e,t=t>>>0,n=n>>>0,!i){let m=Math.pow(2,8*n)-1;de(this,e,t,n,m,0)}let h=n-1,a=1;for(this[t+h]=e&255;--h>=0&&(a*=256);)this[t+h]=e/a&255;return t+n};I.prototype.writeUint8=I.prototype.writeUInt8=function(e,t,n){return e=+e,t=t>>>0,n||de(this,e,t,1,255,0),this[t]=e&255,t+1};I.prototype.writeUint16LE=I.prototype.writeUInt16LE=function(e,t,n){return e=+e,t=t>>>0,n||de(this,e,t,2,65535,0),this[t]=e&255,this[t+1]=e>>>8,t+2};I.prototype.writeUint16BE=I.prototype.writeUInt16BE=function(e,t,n){return e=+e,t=t>>>0,n||de(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=e&255,t+2};I.prototype.writeUint32LE=I.prototype.writeUInt32LE=function(e,t,n){return e=+e,t=t>>>0,n||de(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=e&255,t+4};I.prototype.writeUint32BE=I.prototype.writeUInt32BE=function(e,t,n){return e=+e,t=t>>>0,n||de(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=e&255,t+4};function Zt(r,e,t,n,i){Jt(e,n,i,r,t,7);let h=Number(e&BigInt(4294967295));r[t++]=h,h=h>>8,r[t++]=h,h=h>>8,r[t++]=h,h=h>>8,r[t++]=h;let a=Number(e>>BigInt(32)&BigInt(4294967295));return r[t++]=a,a=a>>8,r[t++]=a,a=a>>8,r[t++]=a,a=a>>8,r[t++]=a,t}function Qt(r,e,t,n,i){Jt(e,n,i,r,t,7);let h=Number(e&BigInt(4294967295));r[t+7]=h,h=h>>8,r[t+6]=h,h=h>>8,r[t+5]=h,h=h>>8,r[t+4]=h;let a=Number(e>>BigInt(32)&BigInt(4294967295));return r[t+3]=a,a=a>>8,r[t+2]=a,a=a>>8,r[t+1]=a,a=a>>8,r[t]=a,t+8}I.prototype.writeBigUInt64LE=Le(function(e,t=0){return Zt(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))});I.prototype.writeBigUInt64BE=Le(function(e,t=0){return Qt(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))});I.prototype.writeIntLE=function(e,t,n,i){if(e=+e,t=t>>>0,!i){let B=Math.pow(2,8*n-1);de(this,e,t,n,B-1,-B)}let h=0,a=1,m=0;for(this[t]=e&255;++h<n&&(a*=256);)e<0&&m===0&&this[t+h-1]!==0&&(m=1),this[t+h]=(e/a>>0)-m&255;return t+n};I.prototype.writeIntBE=function(e,t,n,i){if(e=+e,t=t>>>0,!i){let B=Math.pow(2,8*n-1);de(this,e,t,n,B-1,-B)}let h=n-1,a=1,m=0;for(this[t+h]=e&255;--h>=0&&(a*=256);)e<0&&m===0&&this[t+h+1]!==0&&(m=1),this[t+h]=(e/a>>0)-m&255;return t+n};I.prototype.writeInt8=function(e,t,n){return e=+e,t=t>>>0,n||de(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=e&255,t+1};I.prototype.writeInt16LE=function(e,t,n){return e=+e,t=t>>>0,n||de(this,e,t,2,32767,-32768),this[t]=e&255,this[t+1]=e>>>8,t+2};I.prototype.writeInt16BE=function(e,t,n){return e=+e,t=t>>>0,n||de(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=e&255,t+2};I.prototype.writeInt32LE=function(e,t,n){return e=+e,t=t>>>0,n||de(this,e,t,4,2147483647,-2147483648),this[t]=e&255,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4};I.prototype.writeInt32BE=function(e,t,n){return e=+e,t=t>>>0,n||de(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=e&255,t+4};I.prototype.writeBigInt64LE=Le(function(e,t=0){return Zt(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});I.prototype.writeBigInt64BE=Le(function(e,t=0){return Qt(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});function jt(r,e,t,n,i,h){if(t+n>r.length)throw new RangeError("Index out of range");if(t<0)throw new RangeError("Index out of range")}function er(r,e,t,n,i){return e=+e,t=t>>>0,i||jt(r,e,t,4,34028234663852886e22,-34028234663852886e22),He.write(r,e,t,n,23,4),t+4}I.prototype.writeFloatLE=function(e,t,n){return er(this,e,t,!0,n)};I.prototype.writeFloatBE=function(e,t,n){return er(this,e,t,!1,n)};function tr(r,e,t,n,i){return e=+e,t=t>>>0,i||jt(r,e,t,8,17976931348623157e292,-17976931348623157e292),He.write(r,e,t,n,52,8),t+8}I.prototype.writeDoubleLE=function(e,t,n){return tr(this,e,t,!0,n)};I.prototype.writeDoubleBE=function(e,t,n){return tr(this,e,t,!1,n)};I.prototype.copy=function(e,t,n,i){if(!I.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),!i&&i!==0&&(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<n&&(i=n),i===n||e.length===0||this.length===0)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-n&&(i=e.length-t+n);let h=i-n;return this===e&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(t,n,i):Uint8Array.prototype.set.call(e,this.subarray(n,i),t),h};I.prototype.fill=function(e,t,n,i){if(typeof e=="string"){if(typeof t=="string"?(i=t,t=0,n=this.length):typeof n=="string"&&(i=n,n=this.length),i!==void 0&&typeof i!="string")throw new TypeError("encoding must be a string");if(typeof i=="string"&&!I.isEncoding(i))throw new TypeError("Unknown encoding: "+i);if(e.length===1){let a=e.charCodeAt(0);(i==="utf8"&&a<128||i==="latin1")&&(e=a)}}else typeof e=="number"?e=e&255:typeof e=="boolean"&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;t=t>>>0,n=n===void 0?this.length:n>>>0,e||(e=0);let h;if(typeof e=="number")for(h=t;h<n;++h)this[h]=e;else{let a=I.isBuffer(e)?e:I.from(e,i),m=a.length;if(m===0)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(h=0;h<n-t;++h)this[h+t]=a[h%m]}return this};var ze={};function Tt(r,e,t){ze[r]=class extends t{constructor(){super();Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${r}]`,this.stack,delete this.name}get code(){return r}set code(i){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:i,writable:!0})}toString(){return`${this.name} [${r}]: ${this.message}`}}}Tt("ERR_BUFFER_OUT_OF_BOUNDS",function(r){return r?`${r} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError);Tt("ERR_INVALID_ARG_TYPE",function(r,e){return`The "${r}" argument must be of type number. Received type ${typeof e}`},TypeError);Tt("ERR_OUT_OF_RANGE",function(r,e,t){let n=`The value of "${r}" is out of range.`,i=t;return Number.isInteger(t)&&Math.abs(t)>2**32?i=rr(String(t)):typeof t=="bigint"&&(i=String(t),(t>BigInt(2)**BigInt(32)||t<-(BigInt(2)**BigInt(32)))&&(i=rr(i)),i+="n"),n+=` It must be ${e}. Received ${i}`,n},RangeError);function rr(r){let e="",t=r.length,n=r[0]==="-"?1:0;for(;t>=n+4;t-=3)e=`_${r.slice(t-3,t)}${e}`;return`${r.slice(0,t)}${e}`}function xn(r,e,t){We(e,"offset"),(r[e]===void 0||r[e+t]===void 0)&&et(e,r.length-(t+1))}function Jt(r,e,t,n,i,h){if(r>t||r<e){let a=typeof e=="bigint"?"n":"",m;throw h>3?e===0||e===BigInt(0)?m=`>= 0${a} and < 2${a} ** ${(h+1)*8}${a}`:m=`>= -(2${a} ** ${(h+1)*8-1}${a}) and < 2 ** ${(h+1)*8-1}${a}`:m=`>= ${e}${a} and <= ${t}${a}`,new ze.ERR_OUT_OF_RANGE("value",m,r)}xn(n,i,h)}function We(r,e){if(typeof r!="number")throw new ze.ERR_INVALID_ARG_TYPE(e,"number",r)}function et(r,e,t){throw Math.floor(r)!==r?(We(r,t),new ze.ERR_OUT_OF_RANGE(t||"offset","an integer",r)):e<0?new ze.ERR_BUFFER_OUT_OF_BOUNDS:new ze.ERR_OUT_OF_RANGE(t||"offset",`>= ${t?1:0} and <= ${e}`,r)}var Tn=/[^+/0-9A-Za-z-_]/g;function Fn(r){if(r=r.split("=")[0],r=r.trim().replace(Tn,""),r.length<2)return"";for(;r.length%4!=0;)r=r+"=";return r}function xt(r,e){e=e||Infinity;let t,n=r.length,i=null,h=[];for(let a=0;a<n;++a){if(t=r.charCodeAt(a),t>55295&&t<57344){if(!i){if(t>56319){(e-=3)>-1&&h.push(239,191,189);continue}else if(a+1===n){(e-=3)>-1&&h.push(239,191,189);continue}i=t;continue}if(t<56320){(e-=3)>-1&&h.push(239,191,189),i=t;continue}t=(i-55296<<10|t-56320)+65536}else i&&(e-=3)>-1&&h.push(239,191,189);if(i=null,t<128){if((e-=1)<0)break;h.push(t)}else if(t<2048){if((e-=2)<0)break;h.push(t>>6|192,t&63|128)}else if(t<65536){if((e-=3)<0)break;h.push(t>>12|224,t>>6&63|128,t&63|128)}else if(t<1114112){if((e-=4)<0)break;h.push(t>>18|240,t>>12&63|128,t>>6&63|128,t&63|128)}else throw new Error("Invalid code point")}return h}function _n(r){let e=[];for(let t=0;t<r.length;++t)e.push(r.charCodeAt(t)&255);return e}function An(r,e){let t,n,i,h=[];for(let a=0;a<r.length&&!((e-=2)<0);++a)t=r.charCodeAt(a),n=t>>8,i=t%256,h.push(i),h.push(n);return h}function Wt(r){return It.toByteArray(Fn(r))}function ct(r,e,t,n){let i;for(i=0;i<n&&!(i+t>=e.length||i>=r.length);++i)e[i+t]=r[i];return i}function Fe(r,e){return r instanceof e||r!=null&&r.constructor!=null&&r.constructor.name!=null&&r.constructor.name===e.name}function St(r){return r!==r}var Sn=function(){let r="0123456789abcdef",e=new Array(256);for(let t=0;t<16;++t){let n=t*16;for(let i=0;i<16;++i)e[n+i]=r[t]+r[i]}return e}();function Le(r){return typeof BigInt=="undefined"?Un:r}function Un(){throw new Error("BigInt not supported")}});var rt=ce((nr,lt)=>{(function(r){"use strict";var e,t=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,n=Math.ceil,i=Math.floor,h="[BigNumber Error] ",a=h+"Number primitive has more than 15 significant digits: ",m=1e14,B=14,O=9007199254740991,U=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],F=1e7,q=1e9;function le(M){var R,z,Z,x=N.prototype={constructor:N,toString:null,valueOf:null},Q=new N(1),H=20,K=4,te=-7,pe=21,ye=-1e7,Ee=1e7,Se=!1,he=1,xe=0,Ve={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:"\xA0",suffix:""},Me="0123456789abcdefghijklmnopqrstuvwxyz";function N(s,u){var o,d,g,E,_,p,c,y,w=this;if(!(w instanceof N))return new N(s,u);if(u==null){if(s&&s._isBigNumber===!0){w.s=s.s,!s.c||s.e>Ee?w.c=w.e=null:s.e<ye?w.c=[w.e=0]:(w.e=s.e,w.c=s.c.slice());return}if((p=typeof s=="number")&&s*0==0){if(w.s=1/s<0?(s=-s,-1):1,s===~~s){for(E=0,_=s;_>=10;_/=10,E++);E>Ee?w.c=w.e=null:(w.e=E,w.c=[s]);return}y=String(s)}else{if(!t.test(y=String(s)))return Z(w,y,p);w.s=y.charCodeAt(0)==45?(y=y.slice(1),-1):1}(E=y.indexOf("."))>-1&&(y=y.replace(".","")),(_=y.search(/e/i))>0?(E<0&&(E=_),E+=+y.slice(_+1),y=y.substring(0,_)):E<0&&(E=y.length)}else{if(W(u,2,Me.length,"Base"),u==10)return w=new N(s),ae(w,H+w.e+1,K);if(y=String(s),p=typeof s=="number"){if(s*0!=0)return Z(w,y,p,u);if(w.s=1/s<0?(y=y.slice(1),-1):1,N.DEBUG&&y.replace(/^0\.0*|\./,"").length>15)throw Error(a+s)}else w.s=y.charCodeAt(0)===45?(y=y.slice(1),-1):1;for(o=Me.slice(0,u),E=_=0,c=y.length;_<c;_++)if(o.indexOf(d=y.charAt(_))<0){if(d=="."){if(_>E){E=c;continue}}else if(!g&&(y==y.toUpperCase()&&(y=y.toLowerCase())||y==y.toLowerCase()&&(y=y.toUpperCase()))){g=!0,_=-1,E=0;continue}return Z(w,String(s),p,u)}p=!1,y=z(y,u,10,w.s),(E=y.indexOf("."))>-1?y=y.replace(".",""):E=y.length}for(_=0;y.charCodeAt(_)===48;_++);for(c=y.length;y.charCodeAt(--c)===48;);if(y=y.slice(_,++c)){if(c-=_,p&&N.DEBUG&&c>15&&(s>O||s!==i(s)))throw Error(a+w.s*s);if((E=E-_-1)>Ee)w.c=w.e=null;else if(E<ye)w.c=[w.e=0];else{if(w.e=E,w.c=[],_=(E+1)%B,E<0&&(_+=B),_<c){for(_&&w.c.push(+y.slice(0,_)),c-=B;_<c;)w.c.push(+y.slice(_,_+=B));_=B-(y=y.slice(_)).length}else _-=c;for(;_--;y+="0");w.c.push(+y)}}else w.c=[w.e=0]}N.clone=le,N.ROUND_UP=0,N.ROUND_DOWN=1,N.ROUND_CEIL=2,N.ROUND_FLOOR=3,N.ROUND_HALF_UP=4,N.ROUND_HALF_DOWN=5,N.ROUND_HALF_EVEN=6,N.ROUND_HALF_CEIL=7,N.ROUND_HALF_FLOOR=8,N.EUCLID=9,N.config=N.set=function(s){var u,o;if(s!=null)if(typeof s=="object"){if(s.hasOwnProperty(u="DECIMAL_PLACES")&&(o=s[u],W(o,0,q,u),H=o),s.hasOwnProperty(u="ROUNDING_MODE")&&(o=s[u],W(o,0,8,u),K=o),s.hasOwnProperty(u="EXPONENTIAL_AT")&&(o=s[u],o&&o.pop?(W(o[0],-q,0,u),W(o[1],0,q,u),te=o[0],pe=o[1]):(W(o,-q,q,u),te=-(pe=o<0?-o:o))),s.hasOwnProperty(u="RANGE"))if(o=s[u],o&&o.pop)W(o[0],-q,-1,u),W(o[1],1,q,u),ye=o[0],Ee=o[1];else if(W(o,-q,q,u),o)ye=-(Ee=o<0?-o:o);else throw Error(h+u+" cannot be zero: "+o);if(s.hasOwnProperty(u="CRYPTO"))if(o=s[u],o===!!o)if(o)if(typeof crypto!="undefined"&&crypto&&(crypto.getRandomValues||crypto.randomBytes))Se=o;else throw Se=!o,Error(h+"crypto unavailable");else Se=o;else throw Error(h+u+" not true or false: "+o);if(s.hasOwnProperty(u="MODULO_MODE")&&(o=s[u],W(o,0,9,u),he=o),s.hasOwnProperty(u="POW_PRECISION")&&(o=s[u],W(o,0,q,u),xe=o),s.hasOwnProperty(u="FORMAT"))if(o=s[u],typeof o=="object")Ve=o;else throw Error(h+u+" not an object: "+o);if(s.hasOwnProperty(u="ALPHABET"))if(o=s[u],typeof o=="string"&&!/^.?$|[+\-.\s]|(.).*\1/.test(o))Me=o;else throw Error(h+u+" invalid: "+o)}else throw Error(h+"Object expected: "+s);return{DECIMAL_PLACES:H,ROUNDING_MODE:K,EXPONENTIAL_AT:[te,pe],RANGE:[ye,Ee],CRYPTO:Se,MODULO_MODE:he,POW_PRECISION:xe,FORMAT:Ve,ALPHABET:Me}},N.isBigNumber=function(s){if(!s||s._isBigNumber!==!0)return!1;if(!N.DEBUG)return!0;var u,o,d=s.c,g=s.e,E=s.s;e:if({}.toString.call(d)=="[object Array]"){if((E===1||E===-1)&&g>=-q&&g<=q&&g===i(g)){if(d[0]===0){if(g===0&&d.length===1)return!0;break e}if(u=(g+1)%B,u<1&&(u+=B),String(d[0]).length==u){for(u=0;u<d.length;u++)if(o=d[u],o<0||o>=m||o!==i(o))break e;if(o!==0)return!0}}}else if(d===null&&g===null&&(E===null||E===1||E===-1))return!0;throw Error(h+"Invalid BigNumber: "+s)},N.maximum=N.max=function(){return l(arguments,x.lt)},N.minimum=N.min=function(){return l(arguments,x.gt)},N.random=function(){var s=9007199254740992,u=Math.random()*s&2097151?function(){return i(Math.random()*s)}:function(){return(Math.random()*1073741824|0)*8388608+(Math.random()*8388608|0)};return function(o){var d,g,E,_,p,c=0,y=[],w=new N(Q);if(o==null?o=H:W(o,0,q),_=n(o/B),Se)if(crypto.getRandomValues){for(d=crypto.getRandomValues(new Uint32Array(_*=2));c<_;)p=d[c]*131072+(d[c+1]>>>11),p>=9e15?(g=crypto.getRandomValues(new Uint32Array(2)),d[c]=g[0],d[c+1]=g[1]):(y.push(p%1e14),c+=2);c=_/2}else if(crypto.randomBytes){for(d=crypto.randomBytes(_*=7);c<_;)p=(d[c]&31)*281474976710656+d[c+1]*1099511627776+d[c+2]*4294967296+d[c+3]*16777216+(d[c+4]<<16)+(d[c+5]<<8)+d[c+6],p>=9e15?crypto.randomBytes(7).copy(d,c):(y.push(p%1e14),c+=7);c=_/7}else throw Se=!1,Error(h+"crypto unavailable");if(!Se)for(;c<_;)p=u(),p<9e15&&(y[c++]=p%1e14);for(_=y[--c],o%=B,_&&o&&(p=U[B-o],y[c]=i(_/p)*p);y[c]===0;y.pop(),c--);if(c<0)y=[E=0];else{for(E=-1;y[0]===0;y.splice(0,1),E-=B);for(c=1,p=y[0];p>=10;p/=10,c++);c<B&&(E-=B-c)}return w.e=E,w.c=y,w}}(),N.sum=function(){for(var s=1,u=arguments,o=new N(u[0]);s<u.length;)o=o.plus(u[s++]);return o},z=function(){var s="0123456789";function u(o,d,g,E){for(var _,p=[0],c,y=0,w=o.length;y<w;){for(c=p.length;c--;p[c]*=d);for(p[0]+=E.indexOf(o.charAt(y++)),_=0;_<p.length;_++)p[_]>g-1&&(p[_+1]==null&&(p[_+1]=0),p[_+1]+=p[_]/g|0,p[_]%=g)}return p.reverse()}return function(o,d,g,E,_){var p,c,y,w,A,T,S,k,X=o.indexOf("."),j=H,G=K;for(X>=0&&(w=xe,xe=0,o=o.replace(".",""),k=new N(d),T=k.pow(o.length-X),xe=w,k.c=u(Ae(fe(T.c),T.e,"0"),10,g,s),k.e=k.c.length),S=u(o,d,g,_?(p=Me,s):(p=s,Me)),y=w=S.length;S[--w]==0;S.pop());if(!S[0])return p.charAt(0);if(X<0?--y:(T.c=S,T.e=y,T.s=E,T=R(T,k,j,G,g),S=T.c,A=T.r,y=T.e),c=y+j+1,X=S[c],w=g/2,A=A||c<0||S[c+1]!=null,A=G<4?(X!=null||A)&&(G==0||G==(T.s<0?3:2)):X>w||X==w&&(G==4||A||G==6&&S[c-1]&1||G==(T.s<0?8:7)),c<1||!S[0])o=A?Ae(p.charAt(1),-j,p.charAt(0)):p.charAt(0);else{if(S.length=c,A)for(--g;++S[--c]>g;)S[c]=0,c||(++y,S=[1].concat(S));for(w=S.length;!S[--w];);for(X=0,o="";X<=w;o+=p.charAt(S[X++]));o=Ae(o,y,p.charAt(0))}return o}}(),R=function(){function s(d,g,E){var _,p,c,y,w=0,A=d.length,T=g%F,S=g/F|0;for(d=d.slice();A--;)c=d[A]%F,y=d[A]/F|0,_=S*c+y*T,p=T*c+_%F*F+w,w=(p/E|0)+(_/F|0)+S*y,d[A]=p%E;return w&&(d=[w].concat(d)),d}function u(d,g,E,_){var p,c;if(E!=_)c=E>_?1:-1;else for(p=c=0;p<E;p++)if(d[p]!=g[p]){c=d[p]>g[p]?1:-1;break}return c}function o(d,g,E,_){for(var p=0;E--;)d[E]-=p,p=d[E]<g[E]?1:0,d[E]=p*_+d[E]-g[E];for(;!d[0]&&d.length>1;d.splice(0,1));}return function(d,g,E,_,p){var c,y,w,A,T,S,k,X,j,G,$,L,$e,Ze,Qe,_e,De,P=d.s==g.s?1:-1,oe=d.c,V=g.c;if(!oe||!oe[0]||!V||!V[0])return new N(!d.s||!g.s||(oe?V&&oe[0]==V[0]:!V)?NaN:oe&&oe[0]==0||!V?P*0:P/0);for(X=new N(P),j=X.c=[],y=d.e-g.e,P=E+y+1,p||(p=m,y=ie(d.e/B)-ie(g.e/B),P=P/B|0),w=0;V[w]==(oe[w]||0);w++);if(V[w]>(oe[w]||0)&&y--,P<0)j.push(1),A=!0;else{for(Ze=oe.length,_e=V.length,w=0,P+=2,T=i(p/(V[0]+1)),T>1&&(V=s(V,T,p),oe=s(oe,T,p),_e=V.length,Ze=oe.length),$e=_e,G=oe.slice(0,_e),$=G.length;$<_e;G[$++]=0);De=V.slice(),De=[0].concat(De),Qe=V[0],V[1]>=p/2&&Qe++;do{if(T=0,c=u(V,G,_e,$),c<0){if(L=G[0],_e!=$&&(L=L*p+(G[1]||0)),T=i(L/Qe),T>1)for(T>=p&&(T=p-1),S=s(V,T,p),k=S.length,$=G.length;u(S,G,k,$)==1;)T--,o(S,_e<k?De:V,k,p),k=S.length,c=1;else T==0&&(c=T=1),S=V.slice(),k=S.length;if(k<$&&(S=[0].concat(S)),o(G,S,$,p),$=G.length,c==-1)for(;u(V,G,_e,$)<1;)T++,o(G,_e<$?De:V,$,p),$=G.length}else c===0&&(T++,G=[0]);j[w++]=T,G[0]?G[$++]=oe[$e]||0:(G=[oe[$e]],$=1)}while(($e++<Ze||G[0]!=null)&&P--);A=G[0]!=null,j[0]||j.splice(0,1)}if(p==m){for(w=1,P=j[0];P>=10;P/=10,w++);ae(X,E+(X.e=w+y*B-1)+1,_,A)}else X.e=y,X.r=+A;return X}}();function Je(s,u,o,d){var g,E,_,p,c;if(o==null?o=K:W(o,0,8),!s.c)return s.toString();if(g=s.c[0],_=s.e,u==null)c=fe(s.c),c=d==1||d==2&&(_<=te||_>=pe)?be(c,_):Ae(c,_,"0");else if(s=ae(new N(s),u,o),E=s.e,c=fe(s.c),p=c.length,d==1||d==2&&(u<=E||E<=te)){for(;p<u;c+="0",p++);c=be(c,E)}else if(u-=_,c=Ae(c,E,"0"),E+1>p){if(--u>0)for(c+=".";u--;c+="0");}else if(u+=E-p,u>0)for(E+1==p&&(c+=".");u--;c+="0");return s.s<0&&g?"-"+c:c}function l(s,u){for(var o,d=1,g=new N(s[0]);d<s.length;d++)if(o=new N(s[d]),o.s)u.call(g,o)&&(g=o);else{g=o;break}return g}function Pe(s,u,o){for(var d=1,g=u.length;!u[--g];u.pop());for(g=u[0];g>=10;g/=10,d++);return(o=d+o*B-1)>Ee?s.c=s.e=null:o<ye?s.c=[s.e=0]:(s.e=o,s.c=u),s}Z=function(){var s=/^(-?)0([xbo])(?=\w[\w.]*$)/i,u=/^([^.]+)\.$/,o=/^\.([^.]+)$/,d=/^-?(Infinity|NaN)$/,g=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(E,_,p,c){var y,w=p?_:_.replace(g,"");if(d.test(w))E.s=isNaN(w)?null:w<0?-1:1;else{if(!p&&(w=w.replace(s,function(A,T,S){return y=(S=S.toLowerCase())=="x"?16:S=="b"?2:8,!c||c==y?T:A}),c&&(y=c,w=w.replace(u,"$1").replace(o,"0.$1")),_!=w))return new N(w,y);if(N.DEBUG)throw Error(h+"Not a"+(c?" base "+c:"")+" number: "+_);E.s=null}E.c=E.e=null}}();function ae(s,u,o,d){var g,E,_,p,c,y,w,A=s.c,T=U;if(A){e:{for(g=1,p=A[0];p>=10;p/=10,g++);if(E=u-g,E<0)E+=B,_=u,c=A[y=0],w=c/T[g-_-1]%10|0;else if(y=n((E+1)/B),y>=A.length)if(d){for(;A.length<=y;A.push(0));c=w=0,g=1,E%=B,_=E-B+1}else break e;else{for(c=p=A[y],g=1;p>=10;p/=10,g++);E%=B,_=E-B+g,w=_<0?0:c/T[g-_-1]%10|0}if(d=d||u<0||A[y+1]!=null||(_<0?c:c%T[g-_-1]),d=o<4?(w||d)&&(o==0||o==(s.s<0?3:2)):w>5||w==5&&(o==4||d||o==6&&(E>0?_>0?c/T[g-_]:0:A[y-1])%10&1||o==(s.s<0?8:7)),u<1||!A[0])return A.length=0,d?(u-=s.e+1,A[0]=T[(B-u%B)%B],s.e=-u||0):A[0]=s.e=0,s;if(E==0?(A.length=y,p=1,y--):(A.length=y+1,p=T[B-E],A[y]=_>0?i(c/T[g-_]%T[_])*p:0),d)for(;;)if(y==0){for(E=1,_=A[0];_>=10;_/=10,E++);for(_=A[0]+=p,p=1;_>=10;_/=10,p++);E!=p&&(s.e++,A[0]==m&&(A[0]=1));break}else{if(A[y]+=p,A[y]!=m)break;A[y--]=0,p=1}for(E=A.length;A[--E]===0;A.pop());}s.e>Ee?s.c=s.e=null:s.e<ye&&(s.c=[s.e=0])}return s}function me(s){var u,o=s.e;return o===null?s.toString():(u=fe(s.c),u=o<=te||o>=pe?be(u,o):Ae(u,o,"0"),s.s<0?"-"+u:u)}return x.absoluteValue=x.abs=function(){var s=new N(this);return s.s<0&&(s.s=1),s},x.comparedTo=function(s,u){return Oe(this,new N(s,u))},x.decimalPlaces=x.dp=function(s,u){var o,d,g,E=this;if(s!=null)return W(s,0,q),u==null?u=K:W(u,0,8),ae(new N(E),s+E.e+1,u);if(!(o=E.c))return null;if(d=((g=o.length-1)-ie(this.e/B))*B,g=o[g])for(;g%10==0;g/=10,d--);return d<0&&(d=0),d},x.dividedBy=x.div=function(s,u){return R(this,new N(s,u),H,K)},x.dividedToIntegerBy=x.idiv=function(s,u){return R(this,new N(s,u),0,1)},x.exponentiatedBy=x.pow=function(s,u){var o,d,g,E,_,p,c,y,w,A=this;if(s=new N(s),s.c&&!s.isInteger())throw Error(h+"Exponent not an integer: "+me(s));if(u!=null&&(u=new N(u)),p=s.e>14,!A.c||!A.c[0]||A.c[0]==1&&!A.e&&A.c.length==1||!s.c||!s.c[0])return w=new N(Math.pow(+me(A),p?2-ke(s):+me(s))),u?w.mod(u):w;if(c=s.s<0,u){if(u.c?!u.c[0]:!u.s)return new N(NaN);d=!c&&A.isInteger()&&u.isInteger(),d&&(A=A.mod(u))}else{if(s.e>9&&(A.e>0||A.e<-1||(A.e==0?A.c[0]>1||p&&A.c[1]>=24e7:A.c[0]<8e13||p&&A.c[0]<=9999975e7)))return E=(A.s<0&&ke(s),-0),A.e>-1&&(E=1/E),new N(c?1/E:E);xe&&(E=n(xe/B+2))}for(p?(o=new N(.5),c&&(s.s=1),y=ke(s)):(g=Math.abs(+me(s)),y=g%2),w=new N(Q);;){if(y){if(w=w.times(A),!w.c)break;E?w.c.length>E&&(w.c.length=E):d&&(w=w.mod(u))}if(g){if(g=i(g/2),g===0)break;y=g%2}else if(s=s.times(o),ae(s,s.e+1,1),s.e>14)y=ke(s);else{if(g=+me(s),g===0)break;y=g%2}A=A.times(A),E?A.c&&A.c.length>E&&(A.c.length=E):d&&(A=A.mod(u))}return d?w:(c&&(w=Q.div(w)),u?w.mod(u):E?ae(w,xe,K,_):w)},x.integerValue=function(s){var u=new N(this);return s==null?s=K:W(s,0,8),ae(u,u.e+1,s)},x.isEqualTo=x.eq=function(s,u){return Oe(this,new N(s,u))===0},x.isFinite=function(){return!!this.c},x.isGreaterThan=x.gt=function(s,u){return Oe(this,new N(s,u))>0},x.isGreaterThanOrEqualTo=x.gte=function(s,u){return(u=Oe(this,new N(s,u)))===1||u===0},x.isInteger=function(){return!!this.c&&ie(this.e/B)>this.c.length-2},x.isLessThan=x.lt=function(s,u){return Oe(this,new N(s,u))<0},x.isLessThanOrEqualTo=x.lte=function(s,u){return(u=Oe(this,new N(s,u)))===-1||u===0},x.isNaN=function(){return!this.s},x.isNegative=function(){return this.s<0},x.isPositive=function(){return this.s>0},x.isZero=function(){return!!this.c&&this.c[0]==0},x.minus=function(s,u){var o,d,g,E,_=this,p=_.s;if(s=new N(s,u),u=s.s,!p||!u)return new N(NaN);if(p!=u)return s.s=-u,_.plus(s);var c=_.e/B,y=s.e/B,w=_.c,A=s.c;if(!c||!y){if(!w||!A)return w?(s.s=-u,s):new N(A?_:NaN);if(!w[0]||!A[0])return A[0]?(s.s=-u,s):new N(w[0]?_:(K==3,-0))}if(c=ie(c),y=ie(y),w=w.slice(),p=c-y){for((E=p<0)?(p=-p,g=w):(y=c,g=A),g.reverse(),u=p;u--;g.push(0));g.reverse()}else for(d=(E=(p=w.length)<(u=A.length))?p:u,p=u=0;u<d;u++)if(w[u]!=A[u]){E=w[u]<A[u];break}if(E&&(g=w,w=A,A=g,s.s=-s.s),u=(d=A.length)-(o=w.length),u>0)for(;u--;w[o++]=0);for(u=m-1;d>p;){if(w[--d]<A[d]){for(o=d;o&&!w[--o];w[o]=u);--w[o],w[d]+=m}w[d]-=A[d]}for(;w[0]==0;w.splice(0,1),--y);return w[0]?Pe(s,w,y):(s.s=K==3?-1:1,s.c=[s.e=0],s)},x.modulo=x.mod=function(s,u){var o,d,g=this;return s=new N(s,u),!g.c||!s.s||s.c&&!s.c[0]?new N(NaN):!s.c||g.c&&!g.c[0]?new N(g):(he==9?(d=s.s,s.s=1,o=R(g,s,0,3),s.s=d,o.s*=d):o=R(g,s,0,he),s=g.minus(o.times(s)),!s.c[0]&&he==1&&(s.s=g.s),s)},x.multipliedBy=x.times=function(s,u){var o,d,g,E,_,p,c,y,w,A,T,S,k,X,j,G=this,$=G.c,L=(s=new N(s,u)).c;if(!$||!L||!$[0]||!L[0])return!G.s||!s.s||$&&!$[0]&&!L||L&&!L[0]&&!$?s.c=s.e=s.s=null:(s.s*=G.s,!$||!L?s.c=s.e=null:(s.c=[0],s.e=0)),s;for(d=ie(G.e/B)+ie(s.e/B),s.s*=G.s,c=$.length,A=L.length,c<A&&(k=$,$=L,L=k,g=c,c=A,A=g),g=c+A,k=[];g--;k.push(0));for(X=m,j=F,g=A;--g>=0;){for(o=0,T=L[g]%j,S=L[g]/j|0,_=c,E=g+_;E>g;)y=$[--_]%j,w=$[_]/j|0,p=S*y+w*T,y=T*y+p%j*j+k[E]+o,o=(y/X|0)+(p/j|0)+S*w,k[E--]=y%X;k[E]=o}return o?++d:k.splice(0,1),Pe(s,k,d)},x.negated=function(){var s=new N(this);return s.s=-s.s||null,s},x.plus=function(s,u){var o,d=this,g=d.s;if(s=new N(s,u),u=s.s,!g||!u)return new N(NaN);if(g!=u)return s.s=-u,d.minus(s);var E=d.e/B,_=s.e/B,p=d.c,c=s.c;if(!E||!_){if(!p||!c)return new N(g/0);if(!p[0]||!c[0])return c[0]?s:new N(p[0]?d:g*0)}if(E=ie(E),_=ie(_),p=p.slice(),g=E-_){for(g>0?(_=E,o=c):(g=-g,o=p),o.reverse();g--;o.push(0));o.reverse()}for(g=p.length,u=c.length,g-u<0&&(o=c,c=p,p=o,u=g),g=0;u;)g=(p[--u]=p[u]+c[u]+g)/m|0,p[u]=m===p[u]?0:p[u]%m;return g&&(p=[g].concat(p),++_),Pe(s,p,_)},x.precision=x.sd=function(s,u){var o,d,g,E=this;if(s!=null&&s!==!!s)return W(s,1,q),u==null?u=K:W(u,0,8),ae(new N(E),s,u);if(!(o=E.c))return null;if(g=o.length-1,d=g*B+1,g=o[g]){for(;g%10==0;g/=10,d--);for(g=o[0];g>=10;g/=10,d++);}return s&&E.e+1>d&&(d=E.e+1),d},x.shiftedBy=function(s){return W(s,-O,O),this.times("1e"+s)},x.squareRoot=x.sqrt=function(){var s,u,o,d,g,E=this,_=E.c,p=E.s,c=E.e,y=H+4,w=new N("0.5");if(p!==1||!_||!_[0])return new N(!p||p<0&&(!_||_[0])?NaN:_?E:1/0);if(p=Math.sqrt(+me(E)),p==0||p==1/0?(u=fe(_),(u.length+c)%2==0&&(u+="0"),p=Math.sqrt(+u),c=ie((c+1)/2)-(c<0||c%2),p==1/0?u="5e"+c:(u=p.toExponential(),u=u.slice(0,u.indexOf("e")+1)+c),o=new N(u)):o=new N(p+""),o.c[0]){for(c=o.e,p=c+y,p<3&&(p=0);;)if(g=o,o=w.times(g.plus(R(E,g,y,1))),fe(g.c).slice(0,p)===(u=fe(o.c)).slice(0,p))if(o.e<c&&--p,u=u.slice(p-3,p+1),u=="9999"||!d&&u=="4999"){if(!d&&(ae(g,g.e+H+2,0),g.times(g).eq(E))){o=g;break}y+=4,p+=4,d=1}else{(!+u||!+u.slice(1)&&u.charAt(0)=="5")&&(ae(o,o.e+H+2,1),s=!o.times(o).eq(E));break}}return ae(o,o.e+H+1,K,s)},x.toExponential=function(s,u){return s!=null&&(W(s,0,q),s++),Je(this,s,u,1)},x.toFixed=function(s,u){return s!=null&&(W(s,0,q),s=s+this.e+1),Je(this,s,u)},x.toFormat=function(s,u,o){var d,g=this;if(o==null)s!=null&&u&&typeof u=="object"?(o=u,u=null):s&&typeof s=="object"?(o=s,s=u=null):o=Ve;else if(typeof o!="object")throw Error(h+"Argument not an object: "+o);if(d=g.toFixed(s,u),g.c){var E,_=d.split("."),p=+o.groupSize,c=+o.secondaryGroupSize,y=o.groupSeparator||"",w=_[0],A=_[1],T=g.s<0,S=T?w.slice(1):w,k=S.length;if(c&&(E=p,p=c,c=E,k-=E),p>0&&k>0){for(E=k%p||p,w=S.substr(0,E);E<k;E+=p)w+=y+S.substr(E,p);c>0&&(w+=y+S.slice(E)),T&&(w="-"+w)}d=A?w+(o.decimalSeparator||"")+((c=+o.fractionGroupSize)?A.replace(new RegExp("\\d{"+c+"}\\B","g"),"$&"+(o.fractionGroupSeparator||"")):A):w}return(o.prefix||"")+d+(o.suffix||"")},x.toFraction=function(s){var u,o,d,g,E,_,p,c,y,w,A,T,S=this,k=S.c;if(s!=null&&(p=new N(s),!p.isInteger()&&(p.c||p.s!==1)||p.lt(Q)))throw Error(h+"Argument "+(p.isInteger()?"out of range: ":"not an integer: ")+me(p));if(!k)return new N(S);for(u=new N(Q),y=o=new N(Q),d=c=new N(Q),T=fe(k),E=u.e=T.length-S.e-1,u.c[0]=U[(_=E%B)<0?B+_:_],s=!s||p.comparedTo(u)>0?E>0?u:y:p,_=Ee,Ee=1/0,p=new N(T),c.c[0]=0;w=R(p,u,0,1),g=o.plus(w.times(d)),g.comparedTo(s)!=1;)o=d,d=g,y=c.plus(w.times(g=y)),c=g,u=p.minus(w.times(g=u)),p=g;return g=R(s.minus(o),d,0,1),c=c.plus(g.times(y)),o=o.plus(g.times(d)),c.s=y.s=S.s,E=E*2,A=R(y,d,E,K).minus(S).abs().comparedTo(R(c,o,E,K).minus(S).abs())<1?[y,d]:[c,o],Ee=_,A},x.toNumber=function(){return+me(this)},x.toPrecision=function(s,u){return s!=null&&W(s,1,q),Je(this,s,u,2)},x.toString=function(s){var u,o=this,d=o.s,g=o.e;return g===null?d?(u="Infinity",d<0&&(u="-"+u)):u="NaN":(s==null?u=g<=te||g>=pe?be(fe(o.c),g):Ae(fe(o.c),g,"0"):s===10?(o=ae(new N(o),H+g+1,K),u=Ae(fe(o.c),o.e,"0")):(W(s,2,Me.length,"Base"),u=z(Ae(fe(o.c),g,"0"),10,s,d,!0)),d<0&&o.c[0]&&(u="-"+u)),u},x.valueOf=x.toJSON=function(){return me(this)},x._isBigNumber=!0,M!=null&&N.set(M),N}function ie(M){var R=M|0;return M>0||M===R?R:R-1}function fe(M){for(var R,z,Z=1,x=M.length,Q=M[0]+"";Z<x;){for(R=M[Z++]+"",z=B-R.length;z--;R="0"+R);Q+=R}for(x=Q.length;Q.charCodeAt(--x)===48;);return Q.slice(0,x+1||1)}function Oe(M,R){var z,Z,x=M.c,Q=R.c,H=M.s,K=R.s,te=M.e,pe=R.e;if(!H||!K)return null;if(z=x&&!x[0],Z=Q&&!Q[0],z||Z)return z?Z?0:-K:H;if(H!=K)return H;if(z=H<0,Z=te==pe,!x||!Q)return Z?0:!x^z?1:-1;if(!Z)return te>pe^z?1:-1;for(K=(te=x.length)<(pe=Q.length)?te:pe,H=0;H<K;H++)if(x[H]!=Q[H])return x[H]>Q[H]^z?1:-1;return te==pe?0:te>pe^z?1:-1}function W(M,R,z,Z){if(M<R||M>z||M!==i(M))throw Error(h+(Z||"Argument")+(typeof M=="number"?M<R||M>z?" out of range: ":" not an integer: ":" not a primitive number: ")+String(M))}function ke(M){var R=M.c.length-1;return ie(M.e/B)==R&&M.c[R]%2!=0}function be(M,R){return(M.length>1?M.charAt(0)+"."+M.slice(1):M)+(R<0?"e":"e+")+R}function Ae(M,R,z){var Z,x;if(R<0){for(x=z+".";++R;x+=z);M=x+M}else if(Z=M.length,++R>Z){for(x=z,R-=Z;--R;x+=z);M+=x}else R<Z&&(M=M.slice(0,R)+"."+M.slice(R));return M}e=le(),e.default=e.BigNumber=e,typeof define=="function"&&define.amd?define(function(){return e}):typeof lt!="undefined"&&lt.exports?lt.exports=e:(r||(r=typeof self!="undefined"&&self?self:window),r.BigNumber=e)})(nr)});var sr=ce((mi,ir)=>{ir.exports=function(e,t,n){var i=new e.Uint8Array(n),h=t.pushInt,a=t.pushInt32,m=t.pushInt32Neg,B=t.pushInt64,O=t.pushInt64Neg,U=t.pushFloat,F=t.pushFloatSingle,q=t.pushFloatDouble,le=t.pushTrue,ie=t.pushFalse,fe=t.pushUndefined,Oe=t.pushNull,W=t.pushInfinity,ke=t.pushInfinityNeg,be=t.pushNaN,Ae=t.pushNaNNeg,M=t.pushArrayStart,R=t.pushArrayStartFixed,z=t.pushArrayStartFixed32,Z=t.pushArrayStartFixed64,x=t.pushObjectStart,Q=t.pushObjectStartFixed,H=t.pushObjectStartFixed32,K=t.pushObjectStartFixed64,te=t.pushByteString,pe=t.pushByteStringStart,ye=t.pushUtf8String,Ee=t.pushUtf8StringStart,Se=t.pushSimpleUnassigned,he=t.pushTagStart,xe=t.pushTagStart4,Ve=t.pushTagStart8,Me=t.pushTagUnassigned,N=t.pushBreak,Je=e.Math.pow,l=0,Pe=0,ae=0;function me(f){for(f=f|0,l=0,Pe=f;(l|0)<(Pe|0)&&(ae=Vr[i[l]&255](i[l]|0)|0,!((ae|0)>0)););return ae|0}function s(f){return f=f|0,((l|0)+(f|0)|0)<(Pe|0)?0:1}function u(f){return f=f|0,i[f|0]<<8|i[f+1|0]|0}function o(f){return f=f|0,i[f|0]<<24|i[f+1|0]<<16|i[f+2|0]<<8|i[f+3|0]|0}function d(f){return f=f|0,h(f|0),l=l+1|0,0}function g(f){return f=f|0,s(1)|0?1:(h(i[l+1|0]|0),l=l+2|0,0)}function E(f){return f=f|0,s(2)|0?1:(h(u(l+1|0)|0),l=l+3|0,0)}function _(f){return f=f|0,s(4)|0?1:(a(u(l+1|0)|0,u(l+3|0)|0),l=l+5|0,0)}function p(f){return f=f|0,s(8)|0?1:(B(u(l+1|0)|0,u(l+3|0)|0,u(l+5|0)|0,u(l+7|0)|0),l=l+9|0,0)}function c(f){return f=f|0,h(-1-(f-32|0)|0),l=l+1|0,0}function y(f){return f=f|0,s(1)|0?1:(h(-1-(i[l+1|0]|0)|0),l=l+2|0,0)}function w(f){f=f|0;var C=0;return s(2)|0?1:(C=u(l+1|0)|0,h(-1-(C|0)|0),l=l+3|0,0)}function A(f){return f=f|0,s(4)|0?1:(m(u(l+1|0)|0,u(l+3|0)|0),l=l+5|0,0)}function T(f){return f=f|0,s(8)|0?1:(O(u(l+1|0)|0,u(l+3|0)|0,u(l+5|0)|0,u(l+7|0)|0),l=l+9|0,0)}function S(f){f=f|0;var C=0,b=0,D=0;return D=f-64|0,s(D|0)|0?1:(C=l+1|0,b=(l+1|0)+(D|0)|0,te(C|0,b|0),l=b|0,0)}function k(f){f=f|0;var C=0,b=0,D=0;return s(1)|0||(D=i[l+1|0]|0,C=l+2|0,b=(l+2|0)+(D|0)|0,s(D+1|0)|0)?1:(te(C|0,b|0),l=b|0,0)}function X(f){f=f|0;var C=0,b=0,D=0;return s(2)|0||(D=u(l+1|0)|0,C=l+3|0,b=(l+3|0)+(D|0)|0,s(D+2|0)|0)?1:(te(C|0,b|0),l=b|0,0)}function j(f){f=f|0;var C=0,b=0,D=0;return s(4)|0||(D=o(l+1|0)|0,C=l+5|0,b=(l+5|0)+(D|0)|0,s(D+4|0)|0)?1:(te(C|0,b|0),l=b|0,0)}function G(f){return f=f|0,1}function $(f){return f=f|0,pe(),l=l+1|0,0}function L(f){f=f|0;var C=0,b=0,D=0;return D=f-96|0,s(D|0)|0?1:(C=l+1|0,b=(l+1|0)+(D|0)|0,ye(C|0,b|0),l=b|0,0)}function $e(f){f=f|0;var C=0,b=0,D=0;return s(1)|0||(D=i[l+1|0]|0,C=l+2|0,b=(l+2|0)+(D|0)|0,s(D+1|0)|0)?1:(ye(C|0,b|0),l=b|0,0)}function Ze(f){f=f|0;var C=0,b=0,D=0;return s(2)|0||(D=u(l+1|0)|0,C=l+3|0,b=(l+3|0)+(D|0)|0,s(D+2|0)|0)?1:(ye(C|0,b|0),l=b|0,0)}function Qe(f){f=f|0;var C=0,b=0,D=0;return s(4)|0||(D=o(l+1|0)|0,C=l+5|0,b=(l+5|0)+(D|0)|0,s(D+4|0)|0)?1:(ye(C|0,b|0),l=b|0,0)}function _e(f){return f=f|0,1}function De(f){return f=f|0,Ee(),l=l+1|0,0}function P(f){return f=f|0,R(f-128|0),l=l+1|0,0}function oe(f){return f=f|0,s(1)|0?1:(R(i[l+1|0]|0),l=l+2|0,0)}function V(f){return f=f|0,s(2)|0?1:(R(u(l+1|0)|0),l=l+3|0,0)}function Fr(f){return f=f|0,s(4)|0?1:(z(u(l+1|0)|0,u(l+3|0)|0),l=l+5|0,0)}function Ur(f){return f=f|0,s(8)|0?1:(Z(u(l+1|0)|0,u(l+3|0)|0,u(l+5|0)|0,u(l+7|0)|0),l=l+9|0,0)}function Rr(f){return f=f|0,M(),l=l+1|0,0}function J(f){f=f|0;var C=0;return C=f-160|0,s(C|0)|0?1:(Q(C|0),l=l+1|0,0)}function Or(f){return f=f|0,s(1)|0?1:(Q(i[l+1|0]|0),l=l+2|0,0)}function Mr(f){return f=f|0,s(2)|0?1:(Q(u(l+1|0)|0),l=l+3|0,0)}function Lr(f){return f=f|0,s(4)|0?1:(H(u(l+1|0)|0,u(l+3|0)|0),l=l+5|0,0)}function Pr(f){return f=f|0,s(8)|0?1:(K(u(l+1|0)|0,u(l+3|0)|0,u(l+5|0)|0,u(l+7|0)|0),l=l+9|0,0)}function Dr(f){return f=f|0,x(),l=l+1|0,0}function ve(f){return f=f|0,he(f-192|0|0),l=l+1|0,0}function ai(f){return f=f|0,he(f|0),l=l+1|0,0}function ci(f){return f=f|0,he(f|0),l=l+1|0,0}function li(f){return f=f|0,he(f|0),l=l+1|0,0}function pi(f){return f=f|0,he(f|0),l=l+1|0,0}function se(f){return f=f|0,he(f-192|0|0),l=l+1|0,0}function gi(f){return f=f|0,he(f|0),l=l+1|0,0}function di(f){return f=f|0,he(f|0),l=l+1|0,0}function Ei(f){return f=f|0,he(f|0),l=l+1|0,0}function Gr(f){return f=f|0,s(1)|0?1:(he(i[l+1|0]|0),l=l+2|0,0)}function Cr(f){return f=f|0,s(2)|0?1:(he(u(l+1|0)|0),l=l+3|0,0)}function kr(f){return f=f|0,s(4)|0?1:(xe(u(l+1|0)|0,u(l+3|0)|0),l=l+5|0,0)}function br(f){return f=f|0,s(8)|0?1:(Ve(u(l+1|0)|0,u(l+3|0)|0,u(l+5|0)|0,u(l+7|0)|0),l=l+9|0,0)}function ee(f){return f=f|0,Se((f|0)-224|0),l=l+1|0,0}function $r(f){return f=f|0,ie(),l=l+1|0,0}function vr(f){return f=f|0,le(),l=l+1|0,0}function qr(f){return f=f|0,Oe(),l=l+1|0,0}function Yr(f){return f=f|0,fe(),l=l+1|0,0}function Hr(f){return f=f|0,s(1)|0?1:(Se(i[l+1|0]|0),l=l+2|0,0)}function Wr(f){f=f|0;var C=0,b=0,D=1,ot=0,je=0,wi=0;return s(2)|0?1:(C=i[l+1|0]|0,b=i[l+2|0]|0,(C|0)&128&&(D=-1),ot=+(((C|0)&124)>>2),je=+(((C|0)&3)<<8|b),+ot==0?U(+(+D*5960464477539063e-23*+je)):+ot==31?+D==1?+je>0?be():W():+je>0?Ae():ke():U(+(+D*Je(2,+(+ot-25))*+(1024+je))),l=l+3|0,0)}function zr(f){return f=f|0,s(4)|0?1:(F(i[l+1|0]|0,i[l+2|0]|0,i[l+3|0]|0,i[l+4|0]|0),l=l+5|0,0)}function Kr(f){return f=f|0,s(8)|0?1:(q(i[l+1|0]|0,i[l+2|0]|0,i[l+3|0]|0,i[l+4|0]|0,i[l+5|0]|0,i[l+6|0]|0,i[l+7|0]|0,i[l+8|0]|0),l=l+9|0,0)}function Y(f){return f=f|0,1}function Xr(f){return f=f|0,N(),l=l+1|0,0}var Vr=[d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,g,E,_,p,Y,Y,Y,Y,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,y,w,A,T,Y,Y,Y,Y,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,k,X,j,G,Y,Y,Y,$,L,L,L,L,L,L,L,L,L,L,L,L,L,L,L,L,L,L,L,L,L,L,L,L,$e,Ze,Qe,_e,Y,Y,Y,De,P,P,P,P,P,P,P,P,P,P,P,P,P,P,P,P,P,P,P,P,P,P,P,P,oe,V,Fr,Ur,Y,Y,Y,Rr,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,J,Or,Mr,Lr,Pr,Y,Y,Y,Dr,ve,ve,ve,ve,ve,ve,se,se,se,se,se,se,se,se,se,se,se,se,se,se,se,se,se,se,Gr,Cr,kr,br,Y,Y,Y,Y,ee,ee,ee,ee,ee,ee,ee,ee,ee,ee,ee,ee,ee,ee,ee,ee,ee,ee,ee,ee,$r,vr,qr,Yr,Hr,Wr,zr,Kr,Y,Y,Y,Xr];return{parse:me}}});var nt=ce(we=>{"use strict";var Ft=rt().BigNumber;we.MT={POS_INT:0,NEG_INT:1,BYTE_STRING:2,UTF8_STRING:3,ARRAY:4,MAP:5,TAG:6,SIMPLE_FLOAT:7};we.TAG={DATE_STRING:0,DATE_EPOCH:1,POS_BIGINT:2,NEG_BIGINT:3,DECIMAL_FRAC:4,BIGFLOAT:5,BASE64URL_EXPECTED:21,BASE64_EXPECTED:22,BASE16_EXPECTED:23,CBOR:24,URI:32,BASE64URL:33,BASE64:34,REGEXP:35,MIME:36};we.NUMBYTES={ZERO:0,ONE:24,TWO:25,FOUR:26,EIGHT:27,INDEFINITE:31};we.SIMPLE={FALSE:20,TRUE:21,NULL:22,UNDEFINED:23};we.SYMS={NULL:Symbol("null"),UNDEFINED:Symbol("undef"),PARENT:Symbol("parent"),BREAK:Symbol("break"),STREAM:Symbol("stream")};we.SHIFT32=Math.pow(2,32);we.SHIFT16=Math.pow(2,16);we.MAX_SAFE_HIGH=2097151;we.NEG_ONE=new Ft(-1);we.TEN=new Ft(10);we.TWO=new Ft(2);we.PARENT={ARRAY:0,OBJECT:1,MAP:2,TAG:3,BYTE_STRING:4,UTF8_STRING:5}});var pt=ce(Be=>{"use strict";var{Buffer:Rn}=tt(),ur=rt().BigNumber,hr=nt(),or=hr.SHIFT32,On=hr.SHIFT16,Mn=2097151;Be.parseHalf=function(e){let t=e[0]&128?-1:1,n=(e[0]&124)>>2,i=(e[0]&3)<<8|e[1];return n?n===31?t*(i?0/0:Infinity):t*Math.pow(2,n-25)*(1024+i):t*5960464477539063e-23*i};function Ln(r){return r<16?"0"+r.toString(16):r.toString(16)}Be.arrayBufferToBignumber=function(r){let e=r.byteLength,t="";for(let n=0;n<e;n++)t+=Ln(r[n]);return new ur(t,16)};Be.buildMap=r=>{let e=new Map,t=Object.keys(r),n=t.length;for(let i=0;i<n;i++)e.set(t[i],r[t[i]]);return e};Be.buildInt32=(r,e)=>r*On+e;Be.buildInt64=(r,e,t,n)=>{let i=Be.buildInt32(r,e),h=Be.buildInt32(t,n);return i>Mn?new ur(i).times(or).plus(h):i*or+h};Be.writeHalf=function(e,t){let n=Rn.allocUnsafe(4);n.writeFloatBE(t,0);let i=n.readUInt32BE(0);if((i&8191)!=0)return!1;let h=i>>16&32768,a=i>>23&255,m=i&8388607;if(a>=113&&a<=142)h+=(a-112<<10)+(m>>13);else if(a>=103&&a<113){if(m&(1<<126-a)-1)return!1;h+=m+8388608>>126-a}else return!1;return e.writeUInt16BE(h,0),!0};Be.keySorter=function(r,e){let t=r[0].byteLength,n=e[0].byteLength;return t>n?1:n>t?-1:r[0].compare(e[0])};Be.isNegativeZero=r=>r===0&&1/r<0;Be.nextPowerOf2=r=>{let e=0;if(r&&!(r&r-1))return r;for(;r!==0;)r>>=1,e+=1;return 1<<e}});var Ot=ce((xi,fr)=>{"use strict";var Ut=nt(),Pn=Ut.MT,gt=Ut.SIMPLE,Rt=Ut.SYMS,it=class{constructor(e){if(typeof e!="number")throw new Error("Invalid Simple type: "+typeof e);if(e<0||e>255||(e|0)!==e)throw new Error("value must be a small positive integer: "+e);this.value=e}toString(){return"simple("+this.value+")"}inspect(){return"simple("+this.value+")"}encodeCBOR(e){return e._pushInt(this.value,Pn.SIMPLE_FLOAT)}static isSimple(e){return e instanceof it}static decode(e,t){switch(t==null&&(t=!0),e){case gt.FALSE:return!1;case gt.TRUE:return!0;case gt.NULL:return t?null:Rt.NULL;case gt.UNDEFINED:return t?void 0:Rt.UNDEFINED;case-1:if(!t)throw new Error("Invalid BREAK");return Rt.BREAK;default:return new it(e)}}};fr.exports=it});var Mt=ce((Ti,ar)=>{"use strict";var st=class{constructor(e,t,n){if(this.tag=e,this.value=t,this.err=n,typeof this.tag!="number")throw new Error("Invalid tag type ("+typeof this.tag+")");if(this.tag<0||(this.tag|0)!==this.tag)throw new Error("Tag must be a positive integer: "+this.tag)}toString(){return`${this.tag}(${JSON.stringify(this.value)})`}encodeCBOR(e){return e._pushTag(this.tag),e.pushAny(this.value)}convert(e){let t,n;if(n=e!=null?e[this.tag]:void 0,typeof n!="function"&&(n=st["_tag"+this.tag],typeof n!="function"))return this;try{return n.call(st,this.value)}catch(i){return t=i,this.err=t,this}}};ar.exports=st});var Lt=ce((Fi,cr)=>{"use strict";var Dn=typeof navigator!="undefined"&&navigator.product==="ReactNative";function Gn(){return Dn?"http://localhost":self.location.protocol+"//"+self.location.host}var ut=self.URL,lr=Gn(),pr=class{constructor(e="",t=lr){this.super=new ut(e,t),this.path=this.pathname+this.search,this.auth=this.username&&this.password?this.username+":"+this.password:null,this.query=this.search&&this.search.startsWith("?")?this.search.slice(1):null}get hash(){return this.super.hash}get host(){return this.super.host}get hostname(){return this.super.hostname}get href(){return this.super.href}get origin(){return this.super.origin}get password(){return this.super.password}get pathname(){return this.super.pathname}get port(){return this.super.port}get protocol(){return this.super.protocol}get search(){return this.super.search}get searchParams(){return this.super.searchParams}get username(){return this.super.username}set hash(e){this.super.hash=e}set host(e){this.super.host=e}set hostname(e){this.super.hostname=e}set href(e){this.super.href=e}set password(e){this.super.password=e}set pathname(e){this.super.pathname=e}set port(e){this.super.port=e}set protocol(e){this.super.protocol=e}set search(e){this.super.search=e}set username(e){this.super.username=e}static createObjectURL(e){return ut.createObjectURL(e)}static revokeObjectURL(e){ut.revokeObjectURL(e)}toJSON(){return this.super.toJSON()}toString(){return this.super.toString()}format(){return this.toString()}};function Cn(r){if(typeof r=="string")return new ut(r).toString();if(!(r instanceof ut)){let e=r.username&&r.password?`${r.username}:${r.password}@`:"",t=r.auth?r.auth+"@":"",n=r.port?":"+r.port:"",i=r.protocol?r.protocol+"//":"",h=r.host||"",a=r.hostname||"",m=r.search||(r.query?"?"+r.query:""),B=r.hash||"",O=r.pathname||"",U=r.path||O+m;return`${i}${e||t}${h||a+n}${U}${B}`}}cr.exports={URLWithLegacySupport:pr,URLSearchParams:self.URLSearchParams,defaultBase:lr,format:Cn}});var Er=ce((Ui,gr)=>{"use strict";var{URLWithLegacySupport:dr,format:kn}=Lt();gr.exports=(r,e={},t={},n)=>{let i=e.protocol?e.protocol.replace(":",""):"http";i=(t[i]||n||i)+":";let h;try{h=new dr(r)}catch(m){h={}}let a=Object.assign({},e,{protocol:i||h.protocol,host:e.host||h.host});return new dr(r,kn(a)).toString()}});var Pt=ce((Ri,wr)=>{"use strict";var{URLWithLegacySupport:bn,format:$n,URLSearchParams:vn,defaultBase:qn}=Lt(),Yn=Er();wr.exports={URL:bn,URLSearchParams:vn,format:$n,relative:Yn,defaultBase:qn}});var Dt=ce((Oi,yr)=>{"use strict";var{Buffer:Ke}=tt(),_r=_t(),Hn=rt().BigNumber,Wn=sr(),ge=pt(),v=nt(),zn=Ot(),Kn=Mt(),{URL:Xn}=Pt(),Ce=class{constructor(e){e=e||{},!e.size||e.size<65536?e.size=65536:e.size=ge.nextPowerOf2(e.size),this._heap=new ArrayBuffer(e.size),this._heap8=new Uint8Array(this._heap),this._buffer=Ke.from(this._heap),this._reset(),this._knownTags=Object.assign({0:t=>new Date(t),1:t=>new Date(t*1e3),2:t=>ge.arrayBufferToBignumber(t),3:t=>v.NEG_ONE.minus(ge.arrayBufferToBignumber(t)),4:t=>v.TEN.pow(t[0]).times(t[1]),5:t=>v.TWO.pow(t[0]).times(t[1]),32:t=>new Xn(t),35:t=>new RegExp(t)},e.tags),this.parser=Wn(globalThis,{log:console.log.bind(console),pushInt:this.pushInt.bind(this),pushInt32:this.pushInt32.bind(this),pushInt32Neg:this.pushInt32Neg.bind(this),pushInt64:this.pushInt64.bind(this),pushInt64Neg:this.pushInt64Neg.bind(this),pushFloat:this.pushFloat.bind(this),pushFloatSingle:this.pushFloatSingle.bind(this),pushFloatDouble:this.pushFloatDouble.bind(this),pushTrue:this.pushTrue.bind(this),pushFalse:this.pushFalse.bind(this),pushUndefined:this.pushUndefined.bind(this),pushNull:this.pushNull.bind(this),pushInfinity:this.pushInfinity.bind(this),pushInfinityNeg:this.pushInfinityNeg.bind(this),pushNaN:this.pushNaN.bind(this),pushNaNNeg:this.pushNaNNeg.bind(this),pushArrayStart:this.pushArrayStart.bind(this),pushArrayStartFixed:this.pushArrayStartFixed.bind(this),pushArrayStartFixed32:this.pushArrayStartFixed32.bind(this),pushArrayStartFixed64:this.pushArrayStartFixed64.bind(this),pushObjectStart:this.pushObjectStart.bind(this),pushObjectStartFixed:this.pushObjectStartFixed.bind(this),pushObjectStartFixed32:this.pushObjectStartFixed32.bind(this),pushObjectStartFixed64:this.pushObjectStartFixed64.bind(this),pushByteString:this.pushByteString.bind(this),pushByteStringStart:this.pushByteStringStart.bind(this),pushUtf8String:this.pushUtf8String.bind(this),pushUtf8StringStart:this.pushUtf8StringStart.bind(this),pushSimpleUnassigned:this.pushSimpleUnassigned.bind(this),pushTagUnassigned:this.pushTagUnassigned.bind(this),pushTagStart:this.pushTagStart.bind(this),pushTagStart4:this.pushTagStart4.bind(this),pushTagStart8:this.pushTagStart8.bind(this),pushBreak:this.pushBreak.bind(this)},this._heap)}get _depth(){return this._parents.length}get _currentParent(){return this._parents[this._depth-1]}get _ref(){return this._currentParent.ref}_closeParent(){let e=this._parents.pop();if(e.length>0)throw new Error(`Missing ${e.length} elements`);switch(e.type){case v.PARENT.TAG:this._push(this.createTag(e.ref[0],e.ref[1]));break;case v.PARENT.BYTE_STRING:this._push(this.createByteString(e.ref,e.length));break;case v.PARENT.UTF8_STRING:this._push(this.createUtf8String(e.ref,e.length));break;case v.PARENT.MAP:if(e.values%2>0)throw new Error("Odd number of elements in the map");this._push(this.createMap(e.ref,e.length));break;case v.PARENT.OBJECT:if(e.values%2>0)throw new Error("Odd number of elements in the map");this._push(this.createObject(e.ref,e.length));break;case v.PARENT.ARRAY:this._push(this.createArray(e.ref,e.length));break;default:break}this._currentParent&&this._currentParent.type===v.PARENT.TAG&&this._dec()}_dec(){let e=this._currentParent;e.length<0||(e.length--,e.length===0&&this._closeParent())}_push(e,t){let n=this._currentParent;switch(n.values++,n.type){case v.PARENT.ARRAY:case v.PARENT.BYTE_STRING:case v.PARENT.UTF8_STRING:n.length>-1?this._ref[this._ref.length-n.length]=e:this._ref.push(e),this._dec();break;case v.PARENT.OBJECT:n.tmpKey!=null?(this._ref[n.tmpKey]=e,n.tmpKey=null,this._dec()):(n.tmpKey=e,typeof n.tmpKey!="string"&&(n.type=v.PARENT.MAP,n.ref=ge.buildMap(n.ref)));break;case v.PARENT.MAP:n.tmpKey!=null?(this._ref.set(n.tmpKey,e),n.tmpKey=null,this._dec()):n.tmpKey=e;break;case v.PARENT.TAG:this._ref.push(e),t||this._dec();break;default:throw new Error("Unknown parent type")}}_createParent(e,t,n){this._parents[this._depth]={type:t,length:n,ref:e,values:0,tmpKey:null}}_reset(){this._res=[],this._parents=[{type:v.PARENT.ARRAY,length:-1,ref:this._res,values:0,tmpKey:null}]}createTag(e,t){let n=this._knownTags[e];return n?n(t):new Kn(e,t)}createMap(e,t){return e}createObject(e,t){return e}createArray(e,t){return e}createByteString(e,t){return Ke.concat(e)}createByteStringFromHeap(e,t){return e===t?Ke.alloc(0):Ke.from(this._heap.slice(e,t))}createInt(e){return e}createInt32(e,t){return ge.buildInt32(e,t)}createInt64(e,t,n,i){return ge.buildInt64(e,t,n,i)}createFloat(e){return e}createFloatSingle(e,t,n,i){return _r.read([e,t,n,i],0,!1,23,4)}createFloatDouble(e,t,n,i,h,a,m,B){return _r.read([e,t,n,i,h,a,m,B],0,!1,52,8)}createInt32Neg(e,t){return-1-ge.buildInt32(e,t)}createInt64Neg(e,t,n,i){let h=ge.buildInt32(e,t),a=ge.buildInt32(n,i);return h>v.MAX_SAFE_HIGH?v.NEG_ONE.minus(new Hn(h).times(v.SHIFT32).plus(a)):-1-(h*v.SHIFT32+a)}createTrue(){return!0}createFalse(){return!1}createNull(){return null}createUndefined(){}createInfinity(){return Infinity}createInfinityNeg(){return-Infinity}createNaN(){return NaN}createNaNNeg(){return NaN}createUtf8String(e,t){return e.join("")}createUtf8StringFromHeap(e,t){return e===t?"":this._buffer.toString("utf8",e,t)}createSimpleUnassigned(e){return new zn(e)}pushInt(e){this._push(this.createInt(e))}pushInt32(e,t){this._push(this.createInt32(e,t))}pushInt64(e,t,n,i){this._push(this.createInt64(e,t,n,i))}pushFloat(e){this._push(this.createFloat(e))}pushFloatSingle(e,t,n,i){this._push(this.createFloatSingle(e,t,n,i))}pushFloatDouble(e,t,n,i,h,a,m,B){this._push(this.createFloatDouble(e,t,n,i,h,a,m,B))}pushInt32Neg(e,t){this._push(this.createInt32Neg(e,t))}pushInt64Neg(e,t,n,i){this._push(this.createInt64Neg(e,t,n,i))}pushTrue(){this._push(this.createTrue())}pushFalse(){this._push(this.createFalse())}pushNull(){this._push(this.createNull())}pushUndefined(){this._push(this.createUndefined())}pushInfinity(){this._push(this.createInfinity())}pushInfinityNeg(){this._push(this.createInfinityNeg())}pushNaN(){this._push(this.createNaN())}pushNaNNeg(){this._push(this.createNaNNeg())}pushArrayStart(){this._createParent([],v.PARENT.ARRAY,-1)}pushArrayStartFixed(e){this._createArrayStartFixed(e)}pushArrayStartFixed32(e,t){let n=ge.buildInt32(e,t);this._createArrayStartFixed(n)}pushArrayStartFixed64(e,t,n,i){let h=ge.buildInt64(e,t,n,i);this._createArrayStartFixed(h)}pushObjectStart(){this._createObjectStartFixed(-1)}pushObjectStartFixed(e){this._createObjectStartFixed(e)}pushObjectStartFixed32(e,t){let n=ge.buildInt32(e,t);this._createObjectStartFixed(n)}pushObjectStartFixed64(e,t,n,i){let h=ge.buildInt64(e,t,n,i);this._createObjectStartFixed(h)}pushByteStringStart(){this._parents[this._depth]={type:v.PARENT.BYTE_STRING,length:-1,ref:[],values:0,tmpKey:null}}pushByteString(e,t){this._push(this.createByteStringFromHeap(e,t))}pushUtf8StringStart(){this._parents[this._depth]={type:v.PARENT.UTF8_STRING,length:-1,ref:[],values:0,tmpKey:null}}pushUtf8String(e,t){this._push(this.createUtf8StringFromHeap(e,t))}pushSimpleUnassigned(e){this._push(this.createSimpleUnassigned(e))}pushTagStart(e){this._parents[this._depth]={type:v.PARENT.TAG,length:1,ref:[e]}}pushTagStart4(e,t){this.pushTagStart(ge.buildInt32(e,t))}pushTagStart8(e,t,n,i){this.pushTagStart(ge.buildInt64(e,t,n,i))}pushTagUnassigned(e){this._push(this.createTag(e))}pushBreak(){if(this._currentParent.length>-1)throw new Error("Unexpected break");this._closeParent()}_createObjectStartFixed(e){if(e===0){this._push(this.createObject({}));return}this._createParent({},v.PARENT.OBJECT,e)}_createArrayStartFixed(e){if(e===0){this._push(this.createArray([]));return}this._createParent(new Array(e),v.PARENT.ARRAY,e)}_decode(e){if(e.byteLength===0)throw new Error("Input too short");this._reset(),this._heap8.set(e);let t=this.parser.parse(e.byteLength);if(this._depth>1){for(;this._currentParent.length===0;)this._closeParent();if(this._depth>1)throw new Error("Undeterminated nesting")}if(t>0)throw new Error("Failed to parse");if(this._res.length===0)throw new Error("No valid result")}decodeFirst(e){return this._decode(e),this._res[0]}decodeAll(e){return this._decode(e),this._res}static decode(e,t){return typeof e=="string"&&(e=Ke.from(e,t||"hex")),new Ce({size:e.length}).decodeFirst(e)}static decodeAll(e,t){return typeof e=="string"&&(e=Ke.from(e,t||"hex")),new Ce({size:e.length}).decodeAll(e)}};Ce.decodeFirst=Ce.decode;yr.exports=Ce});var Ar=ce((Mi,Ir)=>{"use strict";var{Buffer:Gt}=tt(),Vn=Dt(),Jn=pt(),dt=class extends Vn{createTag(e,t){return`${e}(${t})`}createInt(e){return super.createInt(e).toString()}createInt32(e,t){return super.createInt32(e,t).toString()}createInt64(e,t,n,i){return super.createInt64(e,t,n,i).toString()}createInt32Neg(e,t){return super.createInt32Neg(e,t).toString()}createInt64Neg(e,t,n,i){return super.createInt64Neg(e,t,n,i).toString()}createTrue(){return"true"}createFalse(){return"false"}createFloat(e){let t=super.createFloat(e);return Jn.isNegativeZero(e)?"-0_1":`${t}_1`}createFloatSingle(e,t,n,i){return`${super.createFloatSingle(e,t,n,i)}_2`}createFloatDouble(e,t,n,i,h,a,m,B){return`${super.createFloatDouble(e,t,n,i,h,a,m,B)}_3`}createByteString(e,t){let n=e.join(", ");return t===-1?`(_ ${n})`:`h'${n}`}createByteStringFromHeap(e,t){return`h'${Gt.from(super.createByteStringFromHeap(e,t)).toString("hex")}'`}createInfinity(){return"Infinity_1"}createInfinityNeg(){return"-Infinity_1"}createNaN(){return"NaN_1"}createNaNNeg(){return"-NaN_1"}createNull(){return"null"}createUndefined(){return"undefined"}createSimpleUnassigned(e){return`simple(${e})`}createArray(e,t){let n=super.createArray(e,t);return t===-1?`[_ ${n.join(", ")}]`:`[${n.join(", ")}]`}createMap(e,t){let n=super.createMap(e),i=Array.from(n.keys()).reduce(Br(n),"");return t===-1?`{_ ${i}}`:`{${i}}`}createObject(e,t){let n=super.createObject(e),i=Object.keys(n).reduce(Br(n),"");return t===-1?`{_ ${i}}`:`{${i}}`}createUtf8String(e,t){let n=e.join(", ");return t===-1?`(_ ${n})`:`"${n}"`}createUtf8StringFromHeap(e,t){return`"${Gt.from(super.createUtf8StringFromHeap(e,t)).toString("utf8")}"`}static diagnose(e,t){return typeof e=="string"&&(e=Gt.from(e,t||"hex")),new dt().decodeFirst(e)}};Ir.exports=dt;function Br(r){return(e,t)=>e?`${e}, ${t}: ${r[t]}`:`${t}: ${r[t]}`}});var Tr=ce((Li,mr)=>{"use strict";var{Buffer:Ue}=tt(),{URL:Zn}=Pt(),Ct=rt().BigNumber,kt=pt(),re=nt(),Ne=re.MT,Et=re.NUMBYTES,Nr=re.SHIFT32,Sr=re.SYMS,Xe=re.TAG,Qn=re.MT.SIMPLE_FLOAT<<5|re.NUMBYTES.TWO,jn=re.MT.SIMPLE_FLOAT<<5|re.NUMBYTES.FOUR,ei=re.MT.SIMPLE_FLOAT<<5|re.NUMBYTES.EIGHT,ti=re.MT.SIMPLE_FLOAT<<5|re.SIMPLE.TRUE,ri=re.MT.SIMPLE_FLOAT<<5|re.SIMPLE.FALSE,ni=re.MT.SIMPLE_FLOAT<<5|re.SIMPLE.UNDEFINED,xr=re.MT.SIMPLE_FLOAT<<5|re.SIMPLE.NULL,ii=new Ct("0x20000000000000"),si=Ue.from("f97e00","hex"),ui=Ue.from("f9fc00","hex"),hi=Ue.from("f97c00","hex");function oi(r){return{}.toString.call(r).slice(8,-1)}var ht=class{constructor(e){e=e||{},this.streaming=typeof e.stream=="function",this.onData=e.stream,this.semanticTypes=[[Zn,this._pushUrl],[Ct,this._pushBigNumber]];let t=e.genTypes||[],n=t.length;for(let i=0;i<n;i++)this.addSemanticType(t[i][0],t[i][1]);this._reset()}addSemanticType(e,t){let n=this.semanticTypes.length;for(let i=0;i<n;i++)if(this.semanticTypes[i][0]===e){let a=this.semanticTypes[i][1];return this.semanticTypes[i][1]=t,a}return this.semanticTypes.push([e,t]),null}push(e){return e&&(this.result[this.offset]=e,this.resultMethod[this.offset]=0,this.resultLength[this.offset]=e.length,this.offset++,this.streaming&&this.onData(this.finalize())),!0}pushWrite(e,t,n){return this.result[this.offset]=e,this.resultMethod[this.offset]=t,this.resultLength[this.offset]=n,this.offset++,this.streaming&&this.onData(this.finalize()),!0}_pushUInt8(e){return this.pushWrite(e,1,1)}_pushUInt16BE(e){return this.pushWrite(e,2,2)}_pushUInt32BE(e){return this.pushWrite(e,3,4)}_pushDoubleBE(e){return this.pushWrite(e,4,8)}_pushNaN(){return this.push(si)}_pushInfinity(e){let t=e<0?ui:hi;return this.push(t)}_pushFloat(e){let t=Ue.allocUnsafe(2);if(kt.writeHalf(t,e)&&kt.parseHalf(t)===e)return this._pushUInt8(Qn)&&this.push(t);let n=Ue.allocUnsafe(4);return n.writeFloatBE(e,0),n.readFloatBE(0)===e?this._pushUInt8(jn)&&this.push(n):this._pushUInt8(ei)&&this._pushDoubleBE(e)}_pushInt(e,t,n){let i=t<<5;return e<24?this._pushUInt8(i|e):e<=255?this._pushUInt8(i|Et.ONE)&&this._pushUInt8(e):e<=65535?this._pushUInt8(i|Et.TWO)&&this._pushUInt16BE(e):e<=4294967295?this._pushUInt8(i|Et.FOUR)&&this._pushUInt32BE(e):e<=Number.MAX_SAFE_INTEGER?this._pushUInt8(i|Et.EIGHT)&&this._pushUInt32BE(Math.floor(e/Nr))&&this._pushUInt32BE(e%Nr):t===Ne.NEG_INT?this._pushFloat(n):this._pushFloat(e)}_pushIntNum(e){return e<0?this._pushInt(-e-1,Ne.NEG_INT,e):this._pushInt(e,Ne.POS_INT)}_pushNumber(e){switch(!1){case e===e:return this._pushNaN(e);case isFinite(e):return this._pushInfinity(e);case e%1!=0:return this._pushIntNum(e);default:return this._pushFloat(e)}}_pushString(e){let t=Ue.byteLength(e,"utf8");return this._pushInt(t,Ne.UTF8_STRING)&&this.pushWrite(e,5,t)}_pushBoolean(e){return this._pushUInt8(e?ti:ri)}_pushUndefined(e){return this._pushUInt8(ni)}_pushArray(e,t){let n=t.length;if(!e._pushInt(n,Ne.ARRAY))return!1;for(let i=0;i<n;i++)if(!e.pushAny(t[i]))return!1;return!0}_pushTag(e){return this._pushInt(e,Ne.TAG)}_pushDate(e,t){return e._pushTag(Xe.DATE_EPOCH)&&e.pushAny(Math.round(t/1e3))}_pushBuffer(e,t){return e._pushInt(t.length,Ne.BYTE_STRING)&&e.push(t)}_pushNoFilter(e,t){return e._pushBuffer(e,t.slice())}_pushRegexp(e,t){return e._pushTag(Xe.REGEXP)&&e.pushAny(t.source)}_pushSet(e,t){if(!e._pushInt(t.size,Ne.ARRAY))return!1;for(let n of t)if(!e.pushAny(n))return!1;return!0}_pushUrl(e,t){return e._pushTag(Xe.URI)&&e.pushAny(t.format())}_pushBigint(e){let t=Xe.POS_BIGINT;e.isNegative()&&(e=e.negated().minus(1),t=Xe.NEG_BIGINT);let n=e.toString(16);n.length%2&&(n="0"+n);let i=Ue.from(n,"hex");return this._pushTag(t)&&this._pushBuffer(this,i)}_pushBigNumber(e,t){if(t.isNaN())return e._pushNaN();if(!t.isFinite())return e._pushInfinity(t.isNegative()?-Infinity:Infinity);if(t.isInteger())return e._pushBigint(t);if(!(e._pushTag(Xe.DECIMAL_FRAC)&&e._pushInt(2,Ne.ARRAY)))return!1;let n=t.decimalPlaces(),i=t.multipliedBy(new Ct(10).pow(n));return e._pushIntNum(-n)?i.abs().isLessThan(ii)?e._pushIntNum(i.toNumber()):e._pushBigint(i):!1}_pushMap(e,t){return e._pushInt(t.size,Ne.MAP)?this._pushRawMap(t.size,Array.from(t)):!1}_pushObject(e){if(!e)return this._pushUInt8(xr);let t=this.semanticTypes.length;for(let a=0;a<t;a++)if(e instanceof this.semanticTypes[a][0])return this.semanticTypes[a][1].call(e,this,e);let n=e.encodeCBOR;if(typeof n=="function")return n.call(e,this);let i=Object.keys(e),h=i.length;return this._pushInt(h,Ne.MAP)?this._pushRawMap(h,i.map(a=>[a,e[a]])):!1}_pushRawMap(e,t){t=t.map(function(n){return n[0]=ht.encode(n[0]),n}).sort(kt.keySorter);for(let n=0;n<e;n++)if(!this.push(t[n][0])||!this.pushAny(t[n][1]))return!1;return!0}write(e){return this.pushAny(e)}pushAny(e){switch(oi(e)){case"Number":return this._pushNumber(e);case"String":return this._pushString(e);case"Boolean":return this._pushBoolean(e);case"Object":return this._pushObject(e);case"Array":return this._pushArray(this,e);case"Uint8Array":return this._pushBuffer(this,Ue.isBuffer(e)?e:Ue.from(e));case"Null":return this._pushUInt8(xr);case"Undefined":return this._pushUndefined(e);case"Map":return this._pushMap(this,e);case"Set":return this._pushSet(this,e);case"URL":return this._pushUrl(this,e);case"BigNumber":return this._pushBigNumber(this,e);case"Date":return this._pushDate(this,e);case"RegExp":return this._pushRegexp(this,e);case"Symbol":switch(e){case Sr.NULL:return this._pushObject(null);case Sr.UNDEFINED:return this._pushUndefined(void 0);default:throw new Error("Unknown symbol: "+e.toString())}default:throw new Error("Unknown type: "+typeof e+", "+(e?e.toString():""))}}finalize(){if(this.offset===0)return null;let e=this.result,t=this.resultLength,n=this.resultMethod,i=this.offset,h=0,a=0;for(;a<i;a++)h+=t[a];let m=Ue.allocUnsafe(h),B=0,O=0;for(a=0;a<i;a++){switch(O=t[a],n[a]){case 0:e[a].copy(m,B);break;case 1:m.writeUInt8(e[a],B,!0);break;case 2:m.writeUInt16BE(e[a],B,!0);break;case 3:m.writeUInt32BE(e[a],B,!0);break;case 4:m.writeDoubleBE(e[a],B,!0);break;case 5:m.write(e[a],B,O,"utf8");break;default:throw new Error("unkown method")}B+=O}let U=m;return this._reset(),U}_reset(){this.result=[],this.resultMethod=[],this.resultLength=[],this.offset=0}static encode(e){let t=new ht;if(!t.pushAny(e))throw new Error("Failed to encode input");return t.finalize()}};mr.exports=ht});var fi=ce(ne=>{"use strict";ne.Diagnose=Ar();ne.Decoder=Dt();ne.Encoder=Tr();ne.Simple=Ot();ne.Tagged=Mt();ne.decodeAll=ne.Decoder.decodeAll;ne.decodeFirst=ne.Decoder.decodeFirst;ne.diagnose=ne.Diagnose.diagnose;ne.encode=ne.Encoder.encode;ne.decode=ne.Decoder.decode;ne.leveldb={decode:ne.Decoder.decodeAll,encode:ne.Encoder.encode,buffer:!0,name:"cbor"}});return fi();})();
+/*!
+ * The buffer module from node.js, for the browser.
+ *
+ * @author   Feross Aboukhadijeh <https://feross.org>
+ * @license  MIT
+ */
+/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
+return Borc}));
diff --git a/node_modules/borc/dist/index.min.js.LICENSE.txt b/node_modules/borc/dist/index.min.js.LICENSE.txt
deleted file mode 100644
index e874b73..0000000
--- a/node_modules/borc/dist/index.min.js.LICENSE.txt
+++ /dev/null
@@ -1,6 +0,0 @@
-/*!
- * The buffer module from node.js, for the browser.
- *
- * @author   Feross Aboukhadijeh <http://feross.org>
- * @license  MIT
- */
diff --git a/node_modules/borc/dist/index.min.js.map b/node_modules/borc/dist/index.min.js.map
deleted file mode 100644
index 09d26be..0000000
--- a/node_modules/borc/dist/index.min.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["/Users/dignifiedquire/opensource/borc/webpack/universalModuleDefinition","/Users/dignifiedquire/opensource/borc/webpack/bootstrap","/Users/dignifiedquire/opensource/borc/node_modules/node-libs-browser/node_modules/buffer/index.js","/Users/dignifiedquire/opensource/borc/node_modules/bignumber.js/bignumber.js","/Users/dignifiedquire/opensource/borc/src/constants.js","/Users/dignifiedquire/opensource/borc/src/utils.js","/Users/dignifiedquire/opensource/borc/node_modules/webpack/buildin/global.js","/Users/dignifiedquire/opensource/borc/node_modules/ieee754/index.js","/Users/dignifiedquire/opensource/borc/src/decoder.js","/Users/dignifiedquire/opensource/borc/src/simple.js","/Users/dignifiedquire/opensource/borc/src/tagged.js","/Users/dignifiedquire/opensource/borc/node_modules/iso-url/index.js","/Users/dignifiedquire/opensource/borc/node_modules/iso-url/src/url-browser.js","/Users/dignifiedquire/opensource/borc/src/index.js","/Users/dignifiedquire/opensource/borc/src/diagnose.js","/Users/dignifiedquire/opensource/borc/node_modules/base64-js/index.js","/Users/dignifiedquire/opensource/borc/node_modules/isarray/index.js","/Users/dignifiedquire/opensource/borc/src/decoder.asm.js","/Users/dignifiedquire/opensource/borc/node_modules/iso-url/src/relative.js","/Users/dignifiedquire/opensource/borc/src/encoder.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","base64","ieee754","isArray","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","length","RangeError","Uint8Array","__proto__","arg","encodingOrOffset","this","Error","allocUnsafe","from","TypeError","ArrayBuffer","array","byteOffset","byteLength","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","slice","fromString","obj","isBuffer","len","checked","copy","buffer","val","type","data","fromObject","assertSize","size","toString","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","start","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","fromByteArray","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","global","foo","subarray","e","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","arguments","equals","inspect","max","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","Array","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","globalObject","BigNumber","isNumeric","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","BASE","POWS_TEN","MAX","bitFloor","coeffToString","z","xc","yc","k","intCheck","isOdd","toExponential","charAt","toFixedPoint","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","constructor","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","alphabet","caseChanged","isNum","_isBigNumber","test","search","substring","round","DEBUG","toUpperCase","format","rm","id","c0","ne","maxOrMin","args","method","normalise","pop","sd","ni","rd","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","lt","minimum","gt","random","dp","rand","Uint32Array","splice","sum","plus","toBaseOut","baseIn","baseOut","arrL","reverse","sign","callerIsToString","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","Bignumber","require","MT","POS_INT","NEG_INT","BYTE_STRING","UTF8_STRING","ARRAY","MAP","TAG","SIMPLE_FLOAT","DATE_STRING","DATE_EPOCH","POS_BIGINT","NEG_BIGINT","DECIMAL_FRAC","BIGFLOAT","BASE64URL_EXPECTED","BASE64_EXPECTED","BASE16_EXPECTED","CBOR","URI","BASE64URL","BASE64","REGEXP","MIME","NUMBYTES","ZERO","TWO","FOUR","EIGHT","INDEFINITE","SIMPLE","FALSE","TRUE","NULL","UNDEFINED","SYMS","PARENT","BREAK","STREAM","SHIFT32","SHIFT16","MAX_SAFE_HIGH","NEG_ONE","TEN","OBJECT","constants","parseHalf","mant","arrayBufferToBignumber","buildMap","Map","keys","buildInt32","f","g","buildInt64","f1","f2","writeHalf","u32","u","s16","keySorter","lenA","lenB","isNegativeZero","nextPowerOf2","count","Function","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","rt","log","LN2","parser","utils","Simple","Tagged","URL","Decoder","opts","_heap","_heap8","_buffer","_reset","_knownTags","assign","0","Date","1","2","3","4","5","32","35","tags","console","pushInt","pushInt32","pushInt32Neg","pushInt64","pushInt64Neg","pushFloat","pushFloatSingle","pushFloatDouble","pushTrue","pushFalse","pushUndefined","pushNull","pushInfinity","pushInfinityNeg","pushNaN","pushNaNNeg","pushArrayStart","pushArrayStartFixed","pushArrayStartFixed32","pushArrayStartFixed64","pushObjectStart","pushObjectStartFixed","pushObjectStartFixed32","pushObjectStartFixed64","pushByteString","pushByteStringStart","pushUtf8String","pushUtf8StringStart","pushSimpleUnassigned","pushTagUnassigned","pushTagStart","pushTagStart4","pushTagStart8","pushBreak","_parents","_depth","_currentParent","ref","_closeParent","_push","createTag","createByteString","createUtf8String","values","createMap","createObject","createArray","_dec","hasChildren","_ref","tmpKey","_createParent","_res","tagNumber","typ","raw","createByteStringFromHeap","createInt","createInt32","createInt64","createFloat","createFloatSingle","createFloatDouble","h","createInt32Neg","createInt64Neg","createTrue","createFalse","createNull","createUndefined","createInfinity","createInfinityNeg","createNaN","createNaNNeg","createUtf8StringFromHeap","createSimpleUnassigned","_createArrayStartFixed","len1","len2","len3","len4","_createObjectStartFixed","tag","_decode","input","parse","decodeFirst","decodeAll","enc","decode","encodeCBOR","gen","_pushInt","hasParent","err","JSON","stringify","_pushTag","pushAny","convert","converters","er","error","URLWithLegacySupport","URLSearchParams","defaultBase","relative","self","location","protocol","host","url","super","path","pathname","auth","username","password","query","startsWith","hash","hostname","href","origin","port","searchParams","createObjectURL","revokeObjectURL","userPass","Diagnose","Encoder","diagnose","encode","leveldb","fl","map","reduce","collectObject","acc","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","encodeChunk","lookup","num","output","stdlib","foreign","heap","inputLength","jumpTable","readUInt16","readUInt32","INT_P","octet","UINT_P_8","UINT_P_16","UINT_P_32","UINT_P_64","INT_N","UINT_N_8","UINT_N_16","UINT_N_32","UINT_N_64","step","BYTE_STRING_8","BYTE_STRING_16","BYTE_STRING_32","BYTE_STRING_64","BYTE_STRING_BREAK","UTF8_STRING_8","UTF8_STRING_16","UTF8_STRING_32","UTF8_STRING_64","UTF8_STRING_BREAK","ARRAY_8","ARRAY_16","ARRAY_32","ARRAY_64","ARRAY_BREAK","MAP_8","MAP_16","MAP_32","MAP_64","MAP_BREAK","TAG_KNOWN","TAG_BIGNUM_POS","TAG_BIGNUM_NEG","TAG_FRAC","TAG_BIGNUM_FLOAT","TAG_UNASSIGNED","TAG_BASE64_URL","TAG_BASE64","TAG_BASE16","TAG_MORE_1","TAG_MORE_2","TAG_MORE_4","TAG_MORE_8","SIMPLE_UNASSIGNED","SIMPLE_FALSE","SIMPLE_TRUE","SIMPLE_NULL","SIMPLE_UNDEFINED","SIMPLE_BYTE","SIMPLE_FLOAT_HALF","SIMPLE_FLOAT_SINGLE","SIMPLE_FLOAT_DOUBLE","ERROR","protocolMap","defaultProtocol","urlParsed","HALF","FLOAT","DOUBLE","MAXINT_BN","BUF_NAN","BUF_INF_NEG","BUF_INF_POS","options","streaming","stream","onData","semanticTypes","_pushUrl","_pushBigNumber","addTypes","genTypes","addSemanticType","fun","old","result","resultMethod","resultLength","finalize","pushWrite","_pushUInt8","_pushUInt16BE","_pushUInt32BE","_pushDoubleBE","_pushNaN","_pushInfinity","_pushFloat","b2","b4","mt","orig","MAX_SAFE_INTEGER","_pushIntNum","_pushNumber","_pushString","_pushBoolean","_pushUndefined","_pushArray","_pushDate","_pushBuffer","_pushNoFilter","_pushRegexp","source","_pushSet","_pushBigint","dec","slide","_pushMap","_pushRawMap","_pushObject","keyLength","sort","toType","index"],"mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAc,KAAID,IAElBD,EAAW,KAAIC,IARjB,CASGK,QAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,I,gCClFrD,YAUA,IAAIC,EAAS,EAAQ,IAEjBC,EAAU,EAAQ,GAElBC,EAAU,EAAQ,IAsDtB,SAASC,IACP,OAAOC,EAAOC,oBAAsB,WAAa,WAGnD,SAASC,EAAaC,EAAMC,GAC1B,GAAIL,IAAeK,EACjB,MAAM,IAAIC,WAAW,8BAgBvB,OAbIL,EAAOC,qBAETE,EAAO,IAAIG,WAAWF,IACjBG,UAAYP,EAAOR,WAGX,OAATW,IACFA,EAAO,IAAIH,EAAOI,IAGpBD,EAAKC,OAASA,GAGTD,EAaT,SAASH,EAAOQ,EAAKC,EAAkBL,GACrC,KAAKJ,EAAOC,qBAAyBS,gBAAgBV,GACnD,OAAO,IAAIA,EAAOQ,EAAKC,EAAkBL,GAI3C,GAAmB,iBAARI,EAAkB,CAC3B,GAAgC,iBAArBC,EACT,MAAM,IAAIE,MAAM,qEAGlB,OAAOC,EAAYF,KAAMF,GAG3B,OAAOK,EAAKH,KAAMF,EAAKC,EAAkBL,GAW3C,SAASS,EAAKV,EAAMtB,EAAO4B,EAAkBL,GAC3C,GAAqB,iBAAVvB,EACT,MAAM,IAAIiC,UAAU,yCAGtB,MAA2B,oBAAhBC,aAA+BlC,aAAiBkC,YAsI7D,SAAyBZ,EAAMa,EAAOC,EAAYb,GAGhD,GAFAY,EAAME,WAEFD,EAAa,GAAKD,EAAME,WAAaD,EACvC,MAAM,IAAIZ,WAAW,6BAGvB,GAAIW,EAAME,WAAaD,GAAcb,GAAU,GAC7C,MAAM,IAAIC,WAAW,6BAIrBW,OADiBG,IAAfF,QAAuCE,IAAXf,EACtB,IAAIE,WAAWU,QACHG,IAAXf,EACD,IAAIE,WAAWU,EAAOC,GAEtB,IAAIX,WAAWU,EAAOC,EAAYb,GAGxCJ,EAAOC,qBAETE,EAAOa,GACFT,UAAYP,EAAOR,UAGxBW,EAAOiB,EAAcjB,EAAMa,GAG7B,OAAOb,EAjKEkB,CAAgBlB,EAAMtB,EAAO4B,EAAkBL,GAGnC,iBAAVvB,EAgGb,SAAoBsB,EAAMmB,EAAQC,GACR,iBAAbA,GAAsC,KAAbA,IAClCA,EAAW,QAGb,IAAKvB,EAAOwB,WAAWD,GACrB,MAAM,IAAIT,UAAU,8CAGtB,IAAIV,EAAwC,EAA/Bc,EAAWI,EAAQC,GAE5BE,GADJtB,EAAOD,EAAaC,EAAMC,IACRsB,MAAMJ,EAAQC,GAE5BE,IAAWrB,IAIbD,EAAOA,EAAKwB,MAAM,EAAGF,IAGvB,OAAOtB,EAnHEyB,CAAWzB,EAAMtB,EAAO4B,GAgKnC,SAAoBN,EAAM0B,GACxB,GAAI7B,EAAO8B,SAASD,GAAM,CACxB,IAAIE,EAA4B,EAAtBC,EAAQH,EAAIzB,QAGtB,OAAoB,KAFpBD,EAAOD,EAAaC,EAAM4B,IAEjB3B,QAITyB,EAAII,KAAK9B,EAAM,EAAG,EAAG4B,GAHZ5B,EAOX,GAAI0B,EAAK,CACP,GAA2B,oBAAhBd,aAA+Bc,EAAIK,kBAAkBnB,aAAe,WAAYc,EACzF,MAA0B,iBAAfA,EAAIzB,SAigDN+B,EAjgDmCN,EAAIzB,SAkgDrC+B,EAjgDFjC,EAAaC,EAAM,GAGrBiB,EAAcjB,EAAM0B,GAG7B,GAAiB,WAAbA,EAAIO,MAAqBtC,EAAQ+B,EAAIQ,MACvC,OAAOjB,EAAcjB,EAAM0B,EAAIQ,MAy/CrC,IAAeF,EAr/Cb,MAAM,IAAIrB,UAAU,sFAxLbwB,CAAWnC,EAAMtB,GA6B1B,SAAS0D,EAAWC,GAClB,GAAoB,iBAATA,EACT,MAAM,IAAI1B,UAAU,oCACf,GAAI0B,EAAO,EAChB,MAAM,IAAInC,WAAW,wCA8BzB,SAASO,EAAYT,EAAMqC,GAIzB,GAHAD,EAAWC,GACXrC,EAAOD,EAAaC,EAAMqC,EAAO,EAAI,EAAoB,EAAhBR,EAAQQ,KAE5CxC,EAAOC,oBACV,IAAK,IAAIrC,EAAI,EAAGA,EAAI4E,IAAQ5E,EAC1BuC,EAAKvC,GAAK,EAId,OAAOuC,EA0CT,SAASiB,EAAcjB,EAAMa,GAC3B,IAAIZ,EAASY,EAAMZ,OAAS,EAAI,EAA4B,EAAxB4B,EAAQhB,EAAMZ,QAClDD,EAAOD,EAAaC,EAAMC,GAE1B,IAAK,IAAIxC,EAAI,EAAGA,EAAIwC,EAAQxC,GAAK,EAC/BuC,EAAKvC,GAAgB,IAAXoD,EAAMpD,GAGlB,OAAOuC,EAgET,SAAS6B,EAAQ5B,GAGf,GAAIA,GAAUL,IACZ,MAAM,IAAIM,WAAW,0DAAiEN,IAAa0C,SAAS,IAAM,UAGpH,OAAgB,EAATrC,EA8FT,SAASc,EAAWI,EAAQC,GAC1B,GAAIvB,EAAO8B,SAASR,GAClB,OAAOA,EAAOlB,OAGhB,GAA2B,oBAAhBW,aAA6D,mBAAvBA,YAAY2B,SAA0B3B,YAAY2B,OAAOpB,IAAWA,aAAkBP,aACrI,OAAOO,EAAOJ,WAGM,iBAAXI,IACTA,EAAS,GAAKA,GAGhB,IAAIS,EAAMT,EAAOlB,OACjB,GAAY,IAAR2B,EAAW,OAAO,EAItB,IAFA,IAAIY,GAAc,IAGhB,OAAQpB,GACN,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAOQ,EAET,IAAK,OACL,IAAK,QACL,UAAKZ,EACH,OAAOyB,EAAYtB,GAAQlB,OAE7B,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAa,EAAN2B,EAET,IAAK,MACH,OAAOA,IAAQ,EAEjB,IAAK,SACH,OAAOc,EAAcvB,GAAQlB,OAE/B,QACE,GAAIuC,EAAa,OAAOC,EAAYtB,GAAQlB,OAE5CmB,GAAY,GAAKA,GAAUuB,cAC3BH,GAAc,GAOtB,SAASI,EAAaxB,EAAUyB,EAAOC,GACrC,IAAIN,GAAc,EAalB,SANcxB,IAAV6B,GAAuBA,EAAQ,KACjCA,EAAQ,GAKNA,EAAQtC,KAAKN,OACf,MAAO,GAOT,SAJYe,IAAR8B,GAAqBA,EAAMvC,KAAKN,UAClC6C,EAAMvC,KAAKN,QAGT6C,GAAO,EACT,MAAO,GAOT,IAHAA,KAAS,KACTD,KAAW,GAGT,MAAO,GAKT,IAFKzB,IAAUA,EAAW,UAGxB,OAAQA,GACN,IAAK,MACH,OAAO2B,EAASxC,KAAMsC,EAAOC,GAE/B,IAAK,OACL,IAAK,QACH,OAAOE,EAAUzC,KAAMsC,EAAOC,GAEhC,IAAK,QACH,OAAOG,EAAW1C,KAAMsC,EAAOC,GAEjC,IAAK,SACL,IAAK,SACH,OAAOI,EAAY3C,KAAMsC,EAAOC,GAElC,IAAK,SACH,OAAOK,EAAY5C,KAAMsC,EAAOC,GAElC,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOM,EAAa7C,KAAMsC,EAAOC,GAEnC,QACE,GAAIN,EAAa,MAAM,IAAI7B,UAAU,qBAAuBS,GAC5DA,GAAYA,EAAW,IAAIuB,cAC3BH,GAAc,GAStB,SAASa,EAAKC,EAAGpE,EAAGrB,GAClB,IAAIJ,EAAI6F,EAAEpE,GACVoE,EAAEpE,GAAKoE,EAAEzF,GACTyF,EAAEzF,GAAKJ,EAgJT,SAAS8F,EAAqBxB,EAAQC,EAAKlB,EAAYM,EAAUoC,GAE/D,GAAsB,IAAlBzB,EAAO9B,OAAc,OAAQ,EAqBjC,GAnB0B,iBAAfa,GACTM,EAAWN,EACXA,EAAa,GACJA,EAAa,WACtBA,EAAa,WACJA,GAAc,aACvBA,GAAc,YAGhBA,GAAcA,EAEV2C,MAAM3C,KAERA,EAAa0C,EAAM,EAAIzB,EAAO9B,OAAS,GAIrCa,EAAa,IAAGA,EAAaiB,EAAO9B,OAASa,GAE7CA,GAAciB,EAAO9B,OAAQ,CAC/B,GAAIuD,EAAK,OAAQ,EAAO1C,EAAaiB,EAAO9B,OAAS,OAChD,GAAIa,EAAa,EAAG,CACzB,IAAI0C,EAAyB,OAAQ,EAA5B1C,EAAa,EASxB,GALmB,iBAARkB,IACTA,EAAMnC,EAAOa,KAAKsB,EAAKZ,IAIrBvB,EAAO8B,SAASK,GAElB,OAAmB,IAAfA,EAAI/B,QACE,EAGHyD,EAAa3B,EAAQC,EAAKlB,EAAYM,EAAUoC,GAClD,GAAmB,iBAARxB,EAGhB,OAFAA,GAAY,IAERnC,EAAOC,qBAA+D,mBAAjCK,WAAWd,UAAUsE,QACxDH,EACKrD,WAAWd,UAAUsE,QAAQ/F,KAAKmE,EAAQC,EAAKlB,GAE/CX,WAAWd,UAAUuE,YAAYhG,KAAKmE,EAAQC,EAAKlB,GAIvD4C,EAAa3B,EAAQ,CAACC,GAAMlB,EAAYM,EAAUoC,GAG3D,MAAM,IAAI7C,UAAU,wCAGtB,SAAS+C,EAAaG,EAAK7B,EAAKlB,EAAYM,EAAUoC,GACpD,IA2BI/F,EA3BAqG,EAAY,EACZC,EAAYF,EAAI5D,OAChB+D,EAAYhC,EAAI/B,OAEpB,QAAiBe,IAAbI,IAGe,UAFjBA,EAAW6C,OAAO7C,GAAUuB,gBAEY,UAAbvB,GAAqC,YAAbA,GAAuC,aAAbA,GAAyB,CACpG,GAAIyC,EAAI5D,OAAS,GAAK+B,EAAI/B,OAAS,EACjC,OAAQ,EAGV6D,EAAY,EACZC,GAAa,EACbC,GAAa,EACblD,GAAc,EAIlB,SAASoD,EAAKC,EAAK1G,GACjB,OAAkB,IAAdqG,EACKK,EAAI1G,GAEJ0G,EAAIC,aAAa3G,EAAIqG,GAMhC,GAAIN,EAAK,CACP,IAAIa,GAAc,EAElB,IAAK5G,EAAIqD,EAAYrD,EAAIsG,EAAWtG,IAClC,GAAIyG,EAAKL,EAAKpG,KAAOyG,EAAKlC,GAAqB,IAAhBqC,EAAoB,EAAI5G,EAAI4G,IAEzD,IADoB,IAAhBA,IAAmBA,EAAa5G,GAChCA,EAAI4G,EAAa,IAAML,EAAW,OAAOK,EAAaP,OAEtC,IAAhBO,IAAmB5G,GAAKA,EAAI4G,GAChCA,GAAc,OAMlB,IAFIvD,EAAakD,EAAYD,IAAWjD,EAAaiD,EAAYC,GAE5DvG,EAAIqD,EAAYrD,GAAK,EAAGA,IAAK,CAGhC,IAFA,IAAI6G,GAAQ,EAEHC,EAAI,EAAGA,EAAIP,EAAWO,IAC7B,GAAIL,EAAKL,EAAKpG,EAAI8G,KAAOL,EAAKlC,EAAKuC,GAAI,CACrCD,GAAQ,EACR,MAIJ,GAAIA,EAAO,OAAO7G,EAItB,OAAQ,EAeV,SAAS+G,EAASL,EAAKhD,EAAQsD,EAAQxE,GACrCwE,EAASC,OAAOD,IAAW,EAC3B,IAAIE,EAAYR,EAAIlE,OAASwE,EAExBxE,GAGHA,EAASyE,OAAOzE,IAEH0E,IACX1E,EAAS0E,GALX1E,EAAS0E,EAUX,IAAIC,EAASzD,EAAOlB,OACpB,GAAI2E,EAAS,GAAM,EAAG,MAAM,IAAIjE,UAAU,sBAEtCV,EAAS2E,EAAS,IACpB3E,EAAS2E,EAAS,GAGpB,IAAK,IAAInH,EAAI,EAAGA,EAAIwC,IAAUxC,EAAG,CAC/B,IAAIoH,EAASC,SAAS3D,EAAO4D,OAAW,EAAJtH,EAAO,GAAI,IAC/C,GAAIgG,MAAMoB,GAAS,OAAOpH,EAC1B0G,EAAIM,EAAShH,GAAKoH,EAGpB,OAAOpH,EAGT,SAASuH,EAAUb,EAAKhD,EAAQsD,EAAQxE,GACtC,OAAOgF,EAAWxC,EAAYtB,EAAQgD,EAAIlE,OAASwE,GAASN,EAAKM,EAAQxE,GAG3E,SAASiF,EAAWf,EAAKhD,EAAQsD,EAAQxE,GACvC,OAAOgF,EA26BT,SAAsBE,GAGpB,IAFA,IAAIC,EAAY,GAEP3H,EAAI,EAAGA,EAAI0H,EAAIlF,SAAUxC,EAEhC2H,EAAUC,KAAyB,IAApBF,EAAIG,WAAW7H,IAGhC,OAAO2H,EAn7BWG,CAAapE,GAASgD,EAAKM,EAAQxE,GAGvD,SAASuF,EAAYrB,EAAKhD,EAAQsD,EAAQxE,GACxC,OAAOiF,EAAWf,EAAKhD,EAAQsD,EAAQxE,GAGzC,SAASwF,EAAYtB,EAAKhD,EAAQsD,EAAQxE,GACxC,OAAOgF,EAAWvC,EAAcvB,GAASgD,EAAKM,EAAQxE,GAGxD,SAASyF,EAAUvB,EAAKhD,EAAQsD,EAAQxE,GACtC,OAAOgF,EA06BT,SAAwBE,EAAKQ,GAI3B,IAHA,IAAI7H,EAAG8H,EAAIC,EACPT,EAAY,GAEP3H,EAAI,EAAGA,EAAI0H,EAAIlF,WACjB0F,GAAS,GAAK,KADalI,EAEhCK,EAAIqH,EAAIG,WAAW7H,GACnBmI,EAAK9H,GAAK,EACV+H,EAAK/H,EAAI,IACTsH,EAAUC,KAAKQ,GACfT,EAAUC,KAAKO,GAGjB,OAAOR,EAv7BWU,CAAe3E,EAAQgD,EAAIlE,OAASwE,GAASN,EAAKM,EAAQxE,GA+E9E,SAASkD,EAAYgB,EAAKtB,EAAOC,GAC/B,OAAc,IAAVD,GAAeC,IAAQqB,EAAIlE,OACtBR,EAAOsG,cAAc5B,GAErB1E,EAAOsG,cAAc5B,EAAI3C,MAAMqB,EAAOC,IAIjD,SAASE,EAAUmB,EAAKtB,EAAOC,GAC7BA,EAAMkD,KAAKC,IAAI9B,EAAIlE,OAAQ6C,GAI3B,IAHA,IAAIoD,EAAM,GACNzI,EAAIoF,EAEDpF,EAAIqF,GAAK,CACd,IAKMqD,EAAYC,EAAWC,EAAYC,EALrCC,EAAYpC,EAAI1G,GAChB+I,EAAY,KACZC,EAAmBF,EAAY,IAAO,EAAIA,EAAY,IAAO,EAAIA,EAAY,IAAO,EAAI,EAE5F,GAAI9I,EAAIgJ,GAAoB3D,EAG1B,OAAQ2D,GACN,KAAK,EACCF,EAAY,MACdC,EAAYD,GAGd,MAEF,KAAK,EAGyB,MAAV,KAFlBJ,EAAahC,EAAI1G,EAAI,OAGnB6I,GAA6B,GAAZC,IAAqB,EAAmB,GAAbJ,GAExB,MAClBK,EAAYF,GAIhB,MAEF,KAAK,EACHH,EAAahC,EAAI1G,EAAI,GACrB2I,EAAYjC,EAAI1G,EAAI,GAEQ,MAAV,IAAb0I,IAAsD,MAAV,IAAZC,KACnCE,GAA6B,GAAZC,IAAoB,IAAoB,GAAbJ,IAAsB,EAAkB,GAAZC,GAEpD,OAAUE,EAAgB,OAAUA,EAAgB,SACtEE,EAAYF,GAIhB,MAEF,KAAK,EACHH,EAAahC,EAAI1G,EAAI,GACrB2I,EAAYjC,EAAI1G,EAAI,GACpB4I,EAAalC,EAAI1G,EAAI,GAEO,MAAV,IAAb0I,IAAsD,MAAV,IAAZC,IAAsD,MAAV,IAAbC,KAClEC,GAA6B,GAAZC,IAAoB,IAAqB,GAAbJ,IAAsB,IAAmB,GAAZC,IAAqB,EAAmB,GAAbC,GAEjF,OAAUC,EAAgB,UAC5CE,EAAYF,GAOJ,OAAdE,GAGFA,EAAY,MACZC,EAAmB,GACVD,EAAY,QAErBA,GAAa,MACbN,EAAIb,KAAKmB,IAAc,GAAK,KAAQ,OACpCA,EAAY,MAAqB,KAAZA,GAGvBN,EAAIb,KAAKmB,GACT/I,GAAKgJ,EAGP,OAQF,SAA+BC,GAC7B,IAAI9E,EAAM8E,EAAWzG,OAErB,GAAI2B,GALqB,KAMvB,OAAOqC,OAAO0C,aAAaC,MAAM3C,OAAQyC,GAI3C,IAAIR,EAAM,GACNzI,EAAI,EAER,KAAOA,EAAImE,GACTsE,GAAOjC,OAAO0C,aAAaC,MAAM3C,OAAQyC,EAAWlF,MAAM/D,EAAGA,GAdtC,OAiBzB,OAAOyI,EAvBAW,CAAsBX,GA1gC/BjJ,EAAQ4C,OAASA,EACjB5C,EAAQ6J,WAiUR,SAAoB7G,IACbA,GAAUA,IAEbA,EAAS,GAGX,OAAOJ,EAAOkH,OAAO9G,IAtUvBhD,EAAQ+J,kBAAoB,GA0B5BnH,EAAOC,yBAAqDkB,IAA/BiG,EAAOnH,oBAAoCmH,EAAOnH,oBAO/E,WACE,IACE,IAAI+D,EAAM,IAAI1D,WAAW,GAOzB,OANA0D,EAAIzD,UAAY,CACdA,UAAWD,WAAWd,UACtB6H,IAAK,WACH,OAAO,KAGU,KAAdrD,EAAIqD,OACa,mBAAjBrD,EAAIsD,UACuB,IAAlCtD,EAAIsD,SAAS,EAAG,GAAGpG,WACnB,MAAOqG,GACP,OAAO,GApB0FC,GAKrGpK,EAAQ2C,WAAaA,IAuErBC,EAAOyH,SAAW,KAGlBzH,EAAO0H,SAAW,SAAU1D,GAE1B,OADAA,EAAIzD,UAAYP,EAAOR,UAChBwE,GA4BThE,EAAOa,KAAO,SAAUhC,EAAO4B,EAAkBL,GAC/C,OAAOS,EAAK,KAAMhC,EAAO4B,EAAkBL,IAGzCJ,EAAOC,sBACTD,EAAOR,UAAUe,UAAYD,WAAWd,UACxCQ,EAAOO,UAAYD,WAEG,oBAAX3B,QAA0BA,OAAOgJ,SAAW3H,EAAOrB,OAAOgJ,WAAa3H,GAEhF1B,OAAOC,eAAeyB,EAAQrB,OAAOgJ,QAAS,CAC5C9I,MAAO,KACP+I,cAAc,KAmCpB5H,EAAOkH,MAAQ,SAAU1E,EAAMqF,EAAMtG,GACnC,OAvBF,SAAepB,EAAMqC,EAAMqF,EAAMtG,GAG/B,OAFAgB,EAAWC,GAEPA,GAAQ,EACHtC,EAAaC,EAAMqC,QAGfrB,IAAT0G,EAIyB,iBAAbtG,EAAwBrB,EAAaC,EAAMqC,GAAMqF,KAAKA,EAAMtG,GAAYrB,EAAaC,EAAMqC,GAAMqF,KAAKA,GAG/G3H,EAAaC,EAAMqC,GASnB0E,CAAM,KAAM1E,EAAMqF,EAAMtG,IAoBjCvB,EAAOY,YAAc,SAAU4B,GAC7B,OAAO5B,EAAY,KAAM4B,IAO3BxC,EAAO8H,gBAAkB,SAAUtF,GACjC,OAAO5B,EAAY,KAAM4B,IAqH3BxC,EAAO8B,SAAW,SAAkB2B,GAClC,QAAe,MAALA,IAAaA,EAAEsE,YAG3B/H,EAAOgI,QAAU,SAAiBC,EAAGxE,GACnC,IAAKzD,EAAO8B,SAASmG,KAAOjI,EAAO8B,SAAS2B,GAC1C,MAAM,IAAI3C,UAAU,6BAGtB,GAAImH,IAAMxE,EAAG,OAAO,EAIpB,IAHA,IAAIyE,EAAID,EAAE7H,OACN+H,EAAI1E,EAAErD,OAEDxC,EAAI,EAAGmE,EAAMoE,KAAKC,IAAI8B,EAAGC,GAAIvK,EAAImE,IAAOnE,EAC/C,GAAIqK,EAAErK,KAAO6F,EAAE7F,GAAI,CACjBsK,EAAID,EAAErK,GACNuK,EAAI1E,EAAE7F,GACN,MAIJ,OAAIsK,EAAIC,GAAW,EACfA,EAAID,EAAU,EACX,GAGTlI,EAAOwB,WAAa,SAAoBD,GACtC,OAAQ6C,OAAO7C,GAAUuB,eACvB,IAAK,MACL,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAO,EAET,QACE,OAAO,IAIb9C,EAAOoI,OAAS,SAAgBC,EAAMjI,GACpC,IAAKN,EAAQuI,GACX,MAAM,IAAIvH,UAAU,+CAGtB,GAAoB,IAAhBuH,EAAKjI,OACP,OAAOJ,EAAOkH,MAAM,GAGtB,IAAItJ,EAEJ,QAAeuD,IAAXf,EAGF,IAFAA,EAAS,EAEJxC,EAAI,EAAGA,EAAIyK,EAAKjI,SAAUxC,EAC7BwC,GAAUiI,EAAKzK,GAAGwC,OAItB,IAAI8B,EAASlC,EAAOY,YAAYR,GAC5BkI,EAAM,EAEV,IAAK1K,EAAI,EAAGA,EAAIyK,EAAKjI,SAAUxC,EAAG,CAChC,IAAI0G,EAAM+D,EAAKzK,GAEf,IAAKoC,EAAO8B,SAASwC,GACnB,MAAM,IAAIxD,UAAU,+CAGtBwD,EAAIrC,KAAKC,EAAQoG,GACjBA,GAAOhE,EAAIlE,OAGb,OAAO8B,GAsDTlC,EAAOkB,WAAaA,EAyEpBlB,EAAOR,UAAUuI,WAAY,EAQ7B/H,EAAOR,UAAU+I,OAAS,WACxB,IAAIxG,EAAMrB,KAAKN,OAEf,GAAI2B,EAAM,GAAM,EACd,MAAM,IAAI1B,WAAW,6CAGvB,IAAK,IAAIzC,EAAI,EAAGA,EAAImE,EAAKnE,GAAK,EAC5B4F,EAAK9C,KAAM9C,EAAGA,EAAI,GAGpB,OAAO8C,MAGTV,EAAOR,UAAUgJ,OAAS,WACxB,IAAIzG,EAAMrB,KAAKN,OAEf,GAAI2B,EAAM,GAAM,EACd,MAAM,IAAI1B,WAAW,6CAGvB,IAAK,IAAIzC,EAAI,EAAGA,EAAImE,EAAKnE,GAAK,EAC5B4F,EAAK9C,KAAM9C,EAAGA,EAAI,GAClB4F,EAAK9C,KAAM9C,EAAI,EAAGA,EAAI,GAGxB,OAAO8C,MAGTV,EAAOR,UAAUiJ,OAAS,WACxB,IAAI1G,EAAMrB,KAAKN,OAEf,GAAI2B,EAAM,GAAM,EACd,MAAM,IAAI1B,WAAW,6CAGvB,IAAK,IAAIzC,EAAI,EAAGA,EAAImE,EAAKnE,GAAK,EAC5B4F,EAAK9C,KAAM9C,EAAGA,EAAI,GAClB4F,EAAK9C,KAAM9C,EAAI,EAAGA,EAAI,GACtB4F,EAAK9C,KAAM9C,EAAI,EAAGA,EAAI,GACtB4F,EAAK9C,KAAM9C,EAAI,EAAGA,EAAI,GAGxB,OAAO8C,MAGTV,EAAOR,UAAUiD,SAAW,WAC1B,IAAIrC,EAAuB,EAAdM,KAAKN,OAClB,OAAe,IAAXA,EAAqB,GACA,IAArBsI,UAAUtI,OAAqB+C,EAAUzC,KAAM,EAAGN,GAC/C2C,EAAagE,MAAMrG,KAAMgI,YAGlC1I,EAAOR,UAAUmJ,OAAS,SAAgBlF,GACxC,IAAKzD,EAAO8B,SAAS2B,GAAI,MAAM,IAAI3C,UAAU,6BAC7C,OAAIJ,OAAS+C,GACsB,IAA5BzD,EAAOgI,QAAQtH,KAAM+C,IAG9BzD,EAAOR,UAAUoJ,QAAU,WACzB,IAAItD,EAAM,GACNuD,EAAMzL,EAAQ+J,kBAOlB,OALIzG,KAAKN,OAAS,IAChBkF,EAAM5E,KAAK+B,SAAS,MAAO,EAAGoG,GAAKC,MAAM,SAASC,KAAK,KACnDrI,KAAKN,OAASyI,IAAKvD,GAAO,UAGzB,WAAaA,EAAM,KAG5BtF,EAAOR,UAAUwI,QAAU,SAAiBgB,EAAQhG,EAAOC,EAAKgG,EAAWC,GACzE,IAAKlJ,EAAO8B,SAASkH,GACnB,MAAM,IAAIlI,UAAU,6BAmBtB,QAhBcK,IAAV6B,IACFA,EAAQ,QAGE7B,IAAR8B,IACFA,EAAM+F,EAASA,EAAO5I,OAAS,QAGfe,IAAd8H,IACFA,EAAY,QAGE9H,IAAZ+H,IACFA,EAAUxI,KAAKN,QAGb4C,EAAQ,GAAKC,EAAM+F,EAAO5I,QAAU6I,EAAY,GAAKC,EAAUxI,KAAKN,OACtE,MAAM,IAAIC,WAAW,sBAGvB,GAAI4I,GAAaC,GAAWlG,GAASC,EACnC,OAAO,EAGT,GAAIgG,GAAaC,EACf,OAAQ,EAGV,GAAIlG,GAASC,EACX,OAAO,EAOT,GAAIvC,OAASsI,EAAQ,OAAO,EAO5B,IANA,IAAId,GAFJgB,KAAa,IADbD,KAAe,GAIXd,GALJlF,KAAS,IADTD,KAAW,GAOPjB,EAAMoE,KAAKC,IAAI8B,EAAGC,GAClBgB,EAAWzI,KAAKiB,MAAMsH,EAAWC,GACjCE,EAAaJ,EAAOrH,MAAMqB,EAAOC,GAE5BrF,EAAI,EAAGA,EAAImE,IAAOnE,EACzB,GAAIuL,EAASvL,KAAOwL,EAAWxL,GAAI,CACjCsK,EAAIiB,EAASvL,GACbuK,EAAIiB,EAAWxL,GACf,MAIJ,OAAIsK,EAAIC,GAAW,EACfA,EAAID,EAAU,EACX,GAqITlI,EAAOR,UAAU6J,SAAW,SAAkBlH,EAAKlB,EAAYM,GAC7D,OAAoD,IAA7Cb,KAAKoD,QAAQ3B,EAAKlB,EAAYM,IAGvCvB,EAAOR,UAAUsE,QAAU,SAAiB3B,EAAKlB,EAAYM,GAC3D,OAAOmC,EAAqBhD,KAAMyB,EAAKlB,EAAYM,GAAU,IAG/DvB,EAAOR,UAAUuE,YAAc,SAAqB5B,EAAKlB,EAAYM,GACnE,OAAOmC,EAAqBhD,KAAMyB,EAAKlB,EAAYM,GAAU,IAsD/DvB,EAAOR,UAAUkC,MAAQ,SAAeJ,EAAQsD,EAAQxE,EAAQmB,GAE9D,QAAeJ,IAAXyD,EACFrD,EAAW,OACXnB,EAASM,KAAKN,OACdwE,EAAS,OACJ,QAAezD,IAAXf,GAA0C,iBAAXwE,EACxCrD,EAAWqD,EACXxE,EAASM,KAAKN,OACdwE,EAAS,MACJ,KAAI0E,SAAS1E,GAYlB,MAAM,IAAIjE,MAAM,2EAXhBiE,GAAkB,EAEd0E,SAASlJ,IACXA,GAAkB,OACDe,IAAbI,IAAwBA,EAAW,UAEvCA,EAAWnB,EACXA,OAASe,GAOb,IAAI2D,EAAYpE,KAAKN,OAASwE,EAG9B,SAFezD,IAAXf,GAAwBA,EAAS0E,KAAW1E,EAAS0E,GAErDxD,EAAOlB,OAAS,IAAMA,EAAS,GAAKwE,EAAS,IAAMA,EAASlE,KAAKN,OACnE,MAAM,IAAIC,WAAW,0CAGlBkB,IAAUA,EAAW,QAG1B,IAFA,IAAIoB,GAAc,IAGhB,OAAQpB,GACN,IAAK,MACH,OAAOoD,EAASjE,KAAMY,EAAQsD,EAAQxE,GAExC,IAAK,OACL,IAAK,QACH,OAAO+E,EAAUzE,KAAMY,EAAQsD,EAAQxE,GAEzC,IAAK,QACH,OAAOiF,EAAW3E,KAAMY,EAAQsD,EAAQxE,GAE1C,IAAK,SACL,IAAK,SACH,OAAOuF,EAAYjF,KAAMY,EAAQsD,EAAQxE,GAE3C,IAAK,SAEH,OAAOwF,EAAYlF,KAAMY,EAAQsD,EAAQxE,GAE3C,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOyF,EAAUnF,KAAMY,EAAQsD,EAAQxE,GAEzC,QACE,GAAIuC,EAAa,MAAM,IAAI7B,UAAU,qBAAuBS,GAC5DA,GAAY,GAAKA,GAAUuB,cAC3BH,GAAc,IAKtB3C,EAAOR,UAAU+J,OAAS,WACxB,MAAO,CACLnH,KAAM,SACNC,KAAMmH,MAAMhK,UAAUmC,MAAM5D,KAAK2C,KAAK+I,MAAQ/I,KAAM,KAsHxD,SAAS0C,EAAWkB,EAAKtB,EAAOC,GAC9B,IAAIyG,EAAM,GACVzG,EAAMkD,KAAKC,IAAI9B,EAAIlE,OAAQ6C,GAE3B,IAAK,IAAIrF,EAAIoF,EAAOpF,EAAIqF,IAAOrF,EAC7B8L,GAAOtF,OAAO0C,aAAsB,IAATxC,EAAI1G,IAGjC,OAAO8L,EAGT,SAASrG,EAAYiB,EAAKtB,EAAOC,GAC/B,IAAIyG,EAAM,GACVzG,EAAMkD,KAAKC,IAAI9B,EAAIlE,OAAQ6C,GAE3B,IAAK,IAAIrF,EAAIoF,EAAOpF,EAAIqF,IAAOrF,EAC7B8L,GAAOtF,OAAO0C,aAAaxC,EAAI1G,IAGjC,OAAO8L,EAGT,SAASxG,EAASoB,EAAKtB,EAAOC,GAC5B,IAAIlB,EAAMuC,EAAIlE,SACT4C,GAASA,EAAQ,KAAGA,EAAQ,KAC5BC,GAAOA,EAAM,GAAKA,EAAMlB,KAAKkB,EAAMlB,GAGxC,IAFA,IAAI4H,EAAM,GAED/L,EAAIoF,EAAOpF,EAAIqF,IAAOrF,EAC7B+L,GAAOC,EAAMtF,EAAI1G,IAGnB,OAAO+L,EAGT,SAASpG,EAAae,EAAKtB,EAAOC,GAIhC,IAHA,IAAI4G,EAAQvF,EAAI3C,MAAMqB,EAAOC,GACzBoD,EAAM,GAEDzI,EAAI,EAAGA,EAAIiM,EAAMzJ,OAAQxC,GAAK,EACrCyI,GAAOjC,OAAO0C,aAAa+C,EAAMjM,GAAoB,IAAfiM,EAAMjM,EAAI,IAGlD,OAAOyI,EA4CT,SAASyD,EAAYlF,EAAQmF,EAAK3J,GAChC,GAAIwE,EAAS,GAAM,GAAKA,EAAS,EAAG,MAAM,IAAIvE,WAAW,sBACzD,GAAIuE,EAASmF,EAAM3J,EAAQ,MAAM,IAAIC,WAAW,yCA+IlD,SAAS2J,EAAS1F,EAAKzF,EAAO+F,EAAQmF,EAAKlB,EAAKzC,GAC9C,IAAKpG,EAAO8B,SAASwC,GAAM,MAAM,IAAIxD,UAAU,+CAC/C,GAAIjC,EAAQgK,GAAOhK,EAAQuH,EAAK,MAAM,IAAI/F,WAAW,qCACrD,GAAIuE,EAASmF,EAAMzF,EAAIlE,OAAQ,MAAM,IAAIC,WAAW,sBAsDtD,SAAS4J,EAAkB3F,EAAKzF,EAAO+F,EAAQsF,GACzCrL,EAAQ,IAAGA,EAAQ,MAASA,EAAQ,GAExC,IAAK,IAAIjB,EAAI,EAAG8G,EAAIyB,KAAKC,IAAI9B,EAAIlE,OAASwE,EAAQ,GAAIhH,EAAI8G,IAAK9G,EAC7D0G,EAAIM,EAAShH,IAAMiB,EAAQ,KAAQ,GAAKqL,EAAetM,EAAI,EAAIA,MAAqC,GAA5BsM,EAAetM,EAAI,EAAIA,GAkCnG,SAASuM,EAAkB7F,EAAKzF,EAAO+F,EAAQsF,GACzCrL,EAAQ,IAAGA,EAAQ,WAAaA,EAAQ,GAE5C,IAAK,IAAIjB,EAAI,EAAG8G,EAAIyB,KAAKC,IAAI9B,EAAIlE,OAASwE,EAAQ,GAAIhH,EAAI8G,IAAK9G,EAC7D0G,EAAIM,EAAShH,GAAKiB,IAAuC,GAA5BqL,EAAetM,EAAI,EAAIA,GAAS,IAmKjE,SAASwM,EAAa9F,EAAKzF,EAAO+F,EAAQmF,EAAKlB,EAAKzC,GAClD,GAAIxB,EAASmF,EAAMzF,EAAIlE,OAAQ,MAAM,IAAIC,WAAW,sBACpD,GAAIuE,EAAS,EAAG,MAAM,IAAIvE,WAAW,sBAGvC,SAASgK,EAAW/F,EAAKzF,EAAO+F,EAAQsF,EAAcI,GAMpD,OALKA,GACHF,EAAa9F,EAAKzF,EAAO+F,EAAQ,GAGnC/E,EAAQ6B,MAAM4C,EAAKzF,EAAO+F,EAAQsF,EAAc,GAAI,GAC7CtF,EAAS,EAWlB,SAAS2F,EAAYjG,EAAKzF,EAAO+F,EAAQsF,EAAcI,GAMrD,OALKA,GACHF,EAAa9F,EAAKzF,EAAO+F,EAAQ,GAGnC/E,EAAQ6B,MAAM4C,EAAKzF,EAAO+F,EAAQsF,EAAc,GAAI,GAC7CtF,EAAS,EA5dlB5E,EAAOR,UAAUmC,MAAQ,SAAeqB,EAAOC,GAC7C,IAmBIuH,EAnBAzI,EAAMrB,KAAKN,OAqBf,IApBA4C,IAAUA,GAGE,GACVA,GAASjB,GACG,IAAGiB,EAAQ,GACdA,EAAQjB,IACjBiB,EAAQjB,IANVkB,OAAc9B,IAAR8B,EAAoBlB,IAAQkB,GASxB,GACRA,GAAOlB,GACG,IAAGkB,EAAM,GACVA,EAAMlB,IACfkB,EAAMlB,GAGJkB,EAAMD,IAAOC,EAAMD,GAGnBhD,EAAOC,qBACTuK,EAAS9J,KAAK4G,SAAStE,EAAOC,IACvB1C,UAAYP,EAAOR,cACrB,CACL,IAAIiL,EAAWxH,EAAMD,EACrBwH,EAAS,IAAIxK,EAAOyK,OAAUtJ,GAE9B,IAAK,IAAIvD,EAAI,EAAGA,EAAI6M,IAAY7M,EAC9B4M,EAAO5M,GAAK8C,KAAK9C,EAAIoF,GAIzB,OAAOwH,GAYTxK,EAAOR,UAAUkL,WAAa,SAAoB9F,EAAQ1D,EAAYoJ,GACpE1F,GAAkB,EAClB1D,GAA0B,EACrBoJ,GAAUR,EAAYlF,EAAQ1D,EAAYR,KAAKN,QAKpD,IAJA,IAAI+B,EAAMzB,KAAKkE,GACX+F,EAAM,EACN/M,EAAI,IAECA,EAAIsD,IAAeyJ,GAAO,MACjCxI,GAAOzB,KAAKkE,EAAShH,GAAK+M,EAG5B,OAAOxI,GAGTnC,EAAOR,UAAUoL,WAAa,SAAoBhG,EAAQ1D,EAAYoJ,GACpE1F,GAAkB,EAClB1D,GAA0B,EAErBoJ,GACHR,EAAYlF,EAAQ1D,EAAYR,KAAKN,QAMvC,IAHA,IAAI+B,EAAMzB,KAAKkE,IAAW1D,GACtByJ,EAAM,EAEHzJ,EAAa,IAAMyJ,GAAO,MAC/BxI,GAAOzB,KAAKkE,IAAW1D,GAAcyJ,EAGvC,OAAOxI,GAGTnC,EAAOR,UAAUqL,UAAY,SAAmBjG,EAAQ0F,GAEtD,OADKA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QACpCM,KAAKkE,IAGd5E,EAAOR,UAAUsL,aAAe,SAAsBlG,EAAQ0F,GAE5D,OADKA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QACpCM,KAAKkE,GAAUlE,KAAKkE,EAAS,IAAM,GAG5C5E,EAAOR,UAAU+E,aAAe,SAAsBK,EAAQ0F,GAE5D,OADKA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QACpCM,KAAKkE,IAAW,EAAIlE,KAAKkE,EAAS,IAG3C5E,EAAOR,UAAUuL,aAAe,SAAsBnG,EAAQ0F,GAE5D,OADKA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,SACnCM,KAAKkE,GAAUlE,KAAKkE,EAAS,IAAM,EAAIlE,KAAKkE,EAAS,IAAM,IAAyB,SAAnBlE,KAAKkE,EAAS,IAGzF5E,EAAOR,UAAUwL,aAAe,SAAsBpG,EAAQ0F,GAE5D,OADKA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QACrB,SAAfM,KAAKkE,IAAuBlE,KAAKkE,EAAS,IAAM,GAAKlE,KAAKkE,EAAS,IAAM,EAAIlE,KAAKkE,EAAS,KAGpG5E,EAAOR,UAAUyL,UAAY,SAAmBrG,EAAQ1D,EAAYoJ,GAClE1F,GAAkB,EAClB1D,GAA0B,EACrBoJ,GAAUR,EAAYlF,EAAQ1D,EAAYR,KAAKN,QAKpD,IAJA,IAAI+B,EAAMzB,KAAKkE,GACX+F,EAAM,EACN/M,EAAI,IAECA,EAAIsD,IAAeyJ,GAAO,MACjCxI,GAAOzB,KAAKkE,EAAShH,GAAK+M,EAK5B,OADIxI,IADJwI,GAAO,OACSxI,GAAOgE,KAAK+E,IAAI,EAAG,EAAIhK,IAChCiB,GAGTnC,EAAOR,UAAU2L,UAAY,SAAmBvG,EAAQ1D,EAAYoJ,GAClE1F,GAAkB,EAClB1D,GAA0B,EACrBoJ,GAAUR,EAAYlF,EAAQ1D,EAAYR,KAAKN,QAKpD,IAJA,IAAIxC,EAAIsD,EACJyJ,EAAM,EACNxI,EAAMzB,KAAKkE,IAAWhH,GAEnBA,EAAI,IAAM+M,GAAO,MACtBxI,GAAOzB,KAAKkE,IAAWhH,GAAK+M,EAK9B,OADIxI,IADJwI,GAAO,OACSxI,GAAOgE,KAAK+E,IAAI,EAAG,EAAIhK,IAChCiB,GAGTnC,EAAOR,UAAU4L,SAAW,SAAkBxG,EAAQ0F,GAEpD,OADKA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QACtB,IAAfM,KAAKkE,IACyB,GAA5B,IAAOlE,KAAKkE,GAAU,GADKlE,KAAKkE,IAI1C5E,EAAOR,UAAU6L,YAAc,SAAqBzG,EAAQ0F,GACrDA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QAC3C,IAAI+B,EAAMzB,KAAKkE,GAAUlE,KAAKkE,EAAS,IAAM,EAC7C,OAAa,MAANzC,EAAqB,WAANA,EAAmBA,GAG3CnC,EAAOR,UAAU8L,YAAc,SAAqB1G,EAAQ0F,GACrDA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QAC3C,IAAI+B,EAAMzB,KAAKkE,EAAS,GAAKlE,KAAKkE,IAAW,EAC7C,OAAa,MAANzC,EAAqB,WAANA,EAAmBA,GAG3CnC,EAAOR,UAAU+L,YAAc,SAAqB3G,EAAQ0F,GAE1D,OADKA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QACpCM,KAAKkE,GAAUlE,KAAKkE,EAAS,IAAM,EAAIlE,KAAKkE,EAAS,IAAM,GAAKlE,KAAKkE,EAAS,IAAM,IAG7F5E,EAAOR,UAAUgM,YAAc,SAAqB5G,EAAQ0F,GAE1D,OADKA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QACpCM,KAAKkE,IAAW,GAAKlE,KAAKkE,EAAS,IAAM,GAAKlE,KAAKkE,EAAS,IAAM,EAAIlE,KAAKkE,EAAS,IAG7F5E,EAAOR,UAAUiM,YAAc,SAAqB7G,EAAQ0F,GAE1D,OADKA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QACpCP,EAAQwE,KAAK3D,KAAMkE,GAAQ,EAAM,GAAI,IAG9C5E,EAAOR,UAAUkM,YAAc,SAAqB9G,EAAQ0F,GAE1D,OADKA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QACpCP,EAAQwE,KAAK3D,KAAMkE,GAAQ,EAAO,GAAI,IAG/C5E,EAAOR,UAAUmM,aAAe,SAAsB/G,EAAQ0F,GAE5D,OADKA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QACpCP,EAAQwE,KAAK3D,KAAMkE,GAAQ,EAAM,GAAI,IAG9C5E,EAAOR,UAAUoM,aAAe,SAAsBhH,EAAQ0F,GAE5D,OADKA,GAAUR,EAAYlF,EAAQ,EAAGlE,KAAKN,QACpCP,EAAQwE,KAAK3D,KAAMkE,GAAQ,EAAO,GAAI,IAS/C5E,EAAOR,UAAUqM,YAAc,SAAqBhN,EAAO+F,EAAQ1D,EAAYoJ,IAC7EzL,GAASA,EACT+F,GAAkB,EAClB1D,GAA0B,EAErBoJ,IAEHN,EAAStJ,KAAM7B,EAAO+F,EAAQ1D,EADfiF,KAAK+E,IAAI,EAAG,EAAIhK,GAAc,EACO,GAGtD,IAAIyJ,EAAM,EACN/M,EAAI,EAGR,IAFA8C,KAAKkE,GAAkB,IAAR/F,IAENjB,EAAIsD,IAAeyJ,GAAO,MACjCjK,KAAKkE,EAAShH,GAAKiB,EAAQ8L,EAAM,IAGnC,OAAO/F,EAAS1D,GAGlBlB,EAAOR,UAAUsM,YAAc,SAAqBjN,EAAO+F,EAAQ1D,EAAYoJ,IAC7EzL,GAASA,EACT+F,GAAkB,EAClB1D,GAA0B,EAErBoJ,IAEHN,EAAStJ,KAAM7B,EAAO+F,EAAQ1D,EADfiF,KAAK+E,IAAI,EAAG,EAAIhK,GAAc,EACO,GAGtD,IAAItD,EAAIsD,EAAa,EACjByJ,EAAM,EAGV,IAFAjK,KAAKkE,EAAShH,GAAa,IAARiB,IAEVjB,GAAK,IAAM+M,GAAO,MACzBjK,KAAKkE,EAAShH,GAAKiB,EAAQ8L,EAAM,IAGnC,OAAO/F,EAAS1D,GAGlBlB,EAAOR,UAAUuM,WAAa,SAAoBlN,EAAO+F,EAAQ0F,GAM/D,OALAzL,GAASA,EACT+F,GAAkB,EACb0F,GAAUN,EAAStJ,KAAM7B,EAAO+F,EAAQ,EAAG,IAAM,GACjD5E,EAAOC,sBAAqBpB,EAAQsH,KAAK6F,MAAMnN,IACpD6B,KAAKkE,GAAkB,IAAR/F,EACR+F,EAAS,GAWlB5E,EAAOR,UAAUyM,cAAgB,SAAuBpN,EAAO+F,EAAQ0F,GAYrE,OAXAzL,GAASA,EACT+F,GAAkB,EACb0F,GAAUN,EAAStJ,KAAM7B,EAAO+F,EAAQ,EAAG,MAAQ,GAEpD5E,EAAOC,qBACTS,KAAKkE,GAAkB,IAAR/F,EACf6B,KAAKkE,EAAS,GAAK/F,IAAU,GAE7BoL,EAAkBvJ,KAAM7B,EAAO+F,GAAQ,GAGlCA,EAAS,GAGlB5E,EAAOR,UAAU0M,cAAgB,SAAuBrN,EAAO+F,EAAQ0F,GAYrE,OAXAzL,GAASA,EACT+F,GAAkB,EACb0F,GAAUN,EAAStJ,KAAM7B,EAAO+F,EAAQ,EAAG,MAAQ,GAEpD5E,EAAOC,qBACTS,KAAKkE,GAAU/F,IAAU,EACzB6B,KAAKkE,EAAS,GAAa,IAAR/F,GAEnBoL,EAAkBvJ,KAAM7B,EAAO+F,GAAQ,GAGlCA,EAAS,GAWlB5E,EAAOR,UAAU2M,cAAgB,SAAuBtN,EAAO+F,EAAQ0F,GAcrE,OAbAzL,GAASA,EACT+F,GAAkB,EACb0F,GAAUN,EAAStJ,KAAM7B,EAAO+F,EAAQ,EAAG,WAAY,GAExD5E,EAAOC,qBACTS,KAAKkE,EAAS,GAAK/F,IAAU,GAC7B6B,KAAKkE,EAAS,GAAK/F,IAAU,GAC7B6B,KAAKkE,EAAS,GAAK/F,IAAU,EAC7B6B,KAAKkE,GAAkB,IAAR/F,GAEfsL,EAAkBzJ,KAAM7B,EAAO+F,GAAQ,GAGlCA,EAAS,GAGlB5E,EAAOR,UAAU4M,cAAgB,SAAuBvN,EAAO+F,EAAQ0F,GAcrE,OAbAzL,GAASA,EACT+F,GAAkB,EACb0F,GAAUN,EAAStJ,KAAM7B,EAAO+F,EAAQ,EAAG,WAAY,GAExD5E,EAAOC,qBACTS,KAAKkE,GAAU/F,IAAU,GACzB6B,KAAKkE,EAAS,GAAK/F,IAAU,GAC7B6B,KAAKkE,EAAS,GAAK/F,IAAU,EAC7B6B,KAAKkE,EAAS,GAAa,IAAR/F,GAEnBsL,EAAkBzJ,KAAM7B,EAAO+F,GAAQ,GAGlCA,EAAS,GAGlB5E,EAAOR,UAAU6M,WAAa,SAAoBxN,EAAO+F,EAAQ1D,EAAYoJ,GAI3E,GAHAzL,GAASA,EACT+F,GAAkB,GAEb0F,EAAU,CACb,IAAIgC,EAAQnG,KAAK+E,IAAI,EAAG,EAAIhK,EAAa,GACzC8I,EAAStJ,KAAM7B,EAAO+F,EAAQ1D,EAAYoL,EAAQ,GAAIA,GAGxD,IAAI1O,EAAI,EACJ+M,EAAM,EACN4B,EAAM,EAGV,IAFA7L,KAAKkE,GAAkB,IAAR/F,IAENjB,EAAIsD,IAAeyJ,GAAO,MAC7B9L,EAAQ,GAAa,IAAR0N,GAAsC,IAAzB7L,KAAKkE,EAAShH,EAAI,KAC9C2O,EAAM,GAGR7L,KAAKkE,EAAShH,IAAMiB,EAAQ8L,GAAO,GAAK4B,EAAM,IAGhD,OAAO3H,EAAS1D,GAGlBlB,EAAOR,UAAUgN,WAAa,SAAoB3N,EAAO+F,EAAQ1D,EAAYoJ,GAI3E,GAHAzL,GAASA,EACT+F,GAAkB,GAEb0F,EAAU,CACb,IAAIgC,EAAQnG,KAAK+E,IAAI,EAAG,EAAIhK,EAAa,GACzC8I,EAAStJ,KAAM7B,EAAO+F,EAAQ1D,EAAYoL,EAAQ,GAAIA,GAGxD,IAAI1O,EAAIsD,EAAa,EACjByJ,EAAM,EACN4B,EAAM,EAGV,IAFA7L,KAAKkE,EAAShH,GAAa,IAARiB,IAEVjB,GAAK,IAAM+M,GAAO,MACrB9L,EAAQ,GAAa,IAAR0N,GAAsC,IAAzB7L,KAAKkE,EAAShH,EAAI,KAC9C2O,EAAM,GAGR7L,KAAKkE,EAAShH,IAAMiB,EAAQ8L,GAAO,GAAK4B,EAAM,IAGhD,OAAO3H,EAAS1D,GAGlBlB,EAAOR,UAAUiN,UAAY,SAAmB5N,EAAO+F,EAAQ0F,GAO7D,OANAzL,GAASA,EACT+F,GAAkB,EACb0F,GAAUN,EAAStJ,KAAM7B,EAAO+F,EAAQ,EAAG,KAAO,KAClD5E,EAAOC,sBAAqBpB,EAAQsH,KAAK6F,MAAMnN,IAChDA,EAAQ,IAAGA,EAAQ,IAAOA,EAAQ,GACtC6B,KAAKkE,GAAkB,IAAR/F,EACR+F,EAAS,GAGlB5E,EAAOR,UAAUkN,aAAe,SAAsB7N,EAAO+F,EAAQ0F,GAYnE,OAXAzL,GAASA,EACT+F,GAAkB,EACb0F,GAAUN,EAAStJ,KAAM7B,EAAO+F,EAAQ,EAAG,OAAS,OAErD5E,EAAOC,qBACTS,KAAKkE,GAAkB,IAAR/F,EACf6B,KAAKkE,EAAS,GAAK/F,IAAU,GAE7BoL,EAAkBvJ,KAAM7B,EAAO+F,GAAQ,GAGlCA,EAAS,GAGlB5E,EAAOR,UAAUmN,aAAe,SAAsB9N,EAAO+F,EAAQ0F,GAYnE,OAXAzL,GAASA,EACT+F,GAAkB,EACb0F,GAAUN,EAAStJ,KAAM7B,EAAO+F,EAAQ,EAAG,OAAS,OAErD5E,EAAOC,qBACTS,KAAKkE,GAAU/F,IAAU,EACzB6B,KAAKkE,EAAS,GAAa,IAAR/F,GAEnBoL,EAAkBvJ,KAAM7B,EAAO+F,GAAQ,GAGlCA,EAAS,GAGlB5E,EAAOR,UAAUoN,aAAe,SAAsB/N,EAAO+F,EAAQ0F,GAcnE,OAbAzL,GAASA,EACT+F,GAAkB,EACb0F,GAAUN,EAAStJ,KAAM7B,EAAO+F,EAAQ,EAAG,YAAa,YAEzD5E,EAAOC,qBACTS,KAAKkE,GAAkB,IAAR/F,EACf6B,KAAKkE,EAAS,GAAK/F,IAAU,EAC7B6B,KAAKkE,EAAS,GAAK/F,IAAU,GAC7B6B,KAAKkE,EAAS,GAAK/F,IAAU,IAE7BsL,EAAkBzJ,KAAM7B,EAAO+F,GAAQ,GAGlCA,EAAS,GAGlB5E,EAAOR,UAAUqN,aAAe,SAAsBhO,EAAO+F,EAAQ0F,GAenE,OAdAzL,GAASA,EACT+F,GAAkB,EACb0F,GAAUN,EAAStJ,KAAM7B,EAAO+F,EAAQ,EAAG,YAAa,YACzD/F,EAAQ,IAAGA,EAAQ,WAAaA,EAAQ,GAExCmB,EAAOC,qBACTS,KAAKkE,GAAU/F,IAAU,GACzB6B,KAAKkE,EAAS,GAAK/F,IAAU,GAC7B6B,KAAKkE,EAAS,GAAK/F,IAAU,EAC7B6B,KAAKkE,EAAS,GAAa,IAAR/F,GAEnBsL,EAAkBzJ,KAAM7B,EAAO+F,GAAQ,GAGlCA,EAAS,GAiBlB5E,EAAOR,UAAUsN,aAAe,SAAsBjO,EAAO+F,EAAQ0F,GACnE,OAAOD,EAAW3J,KAAM7B,EAAO+F,GAAQ,EAAM0F,IAG/CtK,EAAOR,UAAUuN,aAAe,SAAsBlO,EAAO+F,EAAQ0F,GACnE,OAAOD,EAAW3J,KAAM7B,EAAO+F,GAAQ,EAAO0F,IAYhDtK,EAAOR,UAAUwN,cAAgB,SAAuBnO,EAAO+F,EAAQ0F,GACrE,OAAOC,EAAY7J,KAAM7B,EAAO+F,GAAQ,EAAM0F,IAGhDtK,EAAOR,UAAUyN,cAAgB,SAAuBpO,EAAO+F,EAAQ0F,GACrE,OAAOC,EAAY7J,KAAM7B,EAAO+F,GAAQ,EAAO0F,IAIjDtK,EAAOR,UAAUyC,KAAO,SAAc+G,EAAQkE,EAAalK,EAAOC,GAOhE,GANKD,IAAOA,EAAQ,GACfC,GAAe,IAARA,IAAWA,EAAMvC,KAAKN,QAC9B8M,GAAelE,EAAO5I,SAAQ8M,EAAclE,EAAO5I,QAClD8M,IAAaA,EAAc,GAC5BjK,EAAM,GAAKA,EAAMD,IAAOC,EAAMD,GAE9BC,IAAQD,EAAO,OAAO,EAC1B,GAAsB,IAAlBgG,EAAO5I,QAAgC,IAAhBM,KAAKN,OAAc,OAAO,EAErD,GAAI8M,EAAc,EAChB,MAAM,IAAI7M,WAAW,6BAGvB,GAAI2C,EAAQ,GAAKA,GAAStC,KAAKN,OAAQ,MAAM,IAAIC,WAAW,6BAC5D,GAAI4C,EAAM,EAAG,MAAM,IAAI5C,WAAW,2BAE9B4C,EAAMvC,KAAKN,SAAQ6C,EAAMvC,KAAKN,QAE9B4I,EAAO5I,OAAS8M,EAAcjK,EAAMD,IACtCC,EAAM+F,EAAO5I,OAAS8M,EAAclK,GAGtC,IACIpF,EADAmE,EAAMkB,EAAMD,EAGhB,GAAItC,OAASsI,GAAUhG,EAAQkK,GAAeA,EAAcjK,EAE1D,IAAKrF,EAAImE,EAAM,EAAGnE,GAAK,IAAKA,EAC1BoL,EAAOpL,EAAIsP,GAAexM,KAAK9C,EAAIoF,QAEhC,GAAIjB,EAAM,MAAS/B,EAAOC,oBAE/B,IAAKrC,EAAI,EAAGA,EAAImE,IAAOnE,EACrBoL,EAAOpL,EAAIsP,GAAexM,KAAK9C,EAAIoF,QAGrC1C,WAAWd,UAAU2N,IAAIpP,KAAKiL,EAAQtI,KAAK4G,SAAStE,EAAOA,EAAQjB,GAAMmL,GAG3E,OAAOnL,GAOT/B,EAAOR,UAAUqI,KAAO,SAAc1F,EAAKa,EAAOC,EAAK1B,GAErD,GAAmB,iBAARY,EAAkB,CAU3B,GATqB,iBAAVa,GACTzB,EAAWyB,EACXA,EAAQ,EACRC,EAAMvC,KAAKN,QACa,iBAAR6C,IAChB1B,EAAW0B,EACXA,EAAMvC,KAAKN,QAGM,IAAf+B,EAAI/B,OAAc,CACpB,IAAIgN,EAAOjL,EAAIsD,WAAW,GAEtB2H,EAAO,MACTjL,EAAMiL,GAIV,QAAiBjM,IAAbI,GAA8C,iBAAbA,EACnC,MAAM,IAAIT,UAAU,6BAGtB,GAAwB,iBAAbS,IAA0BvB,EAAOwB,WAAWD,GACrD,MAAM,IAAIT,UAAU,qBAAuBS,OAErB,iBAARY,IAChBA,GAAY,KAId,GAAIa,EAAQ,GAAKtC,KAAKN,OAAS4C,GAAStC,KAAKN,OAAS6C,EACpD,MAAM,IAAI5C,WAAW,sBAGvB,GAAI4C,GAAOD,EACT,OAAOtC,KAMT,IAAI9C,EAEJ,GALAoF,KAAkB,EAClBC,OAAc9B,IAAR8B,EAAoBvC,KAAKN,OAAS6C,IAAQ,EAC3Cd,IAAKA,EAAM,GAGG,iBAARA,EACT,IAAKvE,EAAIoF,EAAOpF,EAAIqF,IAAOrF,EACzB8C,KAAK9C,GAAKuE,MAEP,CACL,IAAI0H,EAAQ7J,EAAO8B,SAASK,GAAOA,EAAMS,EAAY,IAAI5C,EAAOmC,EAAKZ,GAAUkB,YAC3EV,EAAM8H,EAAMzJ,OAEhB,IAAKxC,EAAI,EAAGA,EAAIqF,EAAMD,IAASpF,EAC7B8C,KAAK9C,EAAIoF,GAAS6G,EAAMjM,EAAImE,GAIhC,OAAOrB,MAKT,IAAI2M,EAAoB,qBAoBxB,SAASzD,EAAMvK,GACb,OAAIA,EAAI,GAAW,IAAMA,EAAEoD,SAAS,IAC7BpD,EAAEoD,SAAS,IAGpB,SAASG,EAAYtB,EAAQwE,GAE3B,IAAIa,EADJb,EAAQA,GAASwH,IAMjB,IAJA,IAAIlN,EAASkB,EAAOlB,OAChBmN,EAAgB,KAChB1D,EAAQ,GAEHjM,EAAI,EAAGA,EAAIwC,IAAUxC,EAAG,CAG/B,IAFA+I,EAAYrF,EAAOmE,WAAW7H,IAEd,OAAU+I,EAAY,MAAQ,CAE5C,IAAK4G,EAAe,CAElB,GAAI5G,EAAY,MAAQ,EAEjBb,GAAS,IAAM,GAAG+D,EAAMrE,KAAK,IAAM,IAAM,KAC9C,SACK,GAAI5H,EAAI,IAAMwC,EAAQ,EAEtB0F,GAAS,IAAM,GAAG+D,EAAMrE,KAAK,IAAM,IAAM,KAC9C,SAIF+H,EAAgB5G,EAChB,SAIF,GAAIA,EAAY,MAAQ,EACjBb,GAAS,IAAM,GAAG+D,EAAMrE,KAAK,IAAM,IAAM,KAC9C+H,EAAgB5G,EAChB,SAIFA,EAAkE,OAArD4G,EAAgB,OAAU,GAAK5G,EAAY,YAC/C4G,IAEJzH,GAAS,IAAM,GAAG+D,EAAMrE,KAAK,IAAM,IAAM,KAKhD,GAFA+H,EAAgB,KAEZ5G,EAAY,IAAM,CACpB,IAAKb,GAAS,GAAK,EAAG,MACtB+D,EAAMrE,KAAKmB,QACN,GAAIA,EAAY,KAAO,CAC5B,IAAKb,GAAS,GAAK,EAAG,MACtB+D,EAAMrE,KAAKmB,GAAa,EAAM,IAAkB,GAAZA,EAAmB,UAClD,GAAIA,EAAY,MAAS,CAC9B,IAAKb,GAAS,GAAK,EAAG,MACtB+D,EAAMrE,KAAKmB,GAAa,GAAM,IAAMA,GAAa,EAAM,GAAO,IAAkB,GAAZA,EAAmB,SAClF,MAAIA,EAAY,SAIrB,MAAM,IAAIhG,MAAM,sBAHhB,IAAKmF,GAAS,GAAK,EAAG,MACtB+D,EAAMrE,KAAKmB,GAAa,GAAO,IAAMA,GAAa,GAAM,GAAO,IAAMA,GAAa,EAAM,GAAO,IAAkB,GAAZA,EAAmB,MAM5H,OAAOkD,EA8BT,SAAShH,EAAcyC,GACrB,OAAO1F,EAAO4N,YApHhB,SAAqBlI,GAInB,IAFAA,EAWF,SAAoBA,GAClB,OAAIA,EAAImI,KAAanI,EAAImI,OAClBnI,EAAIoI,QAAQ,aAAc,IAb3BC,CAAWrI,GAAKoI,QAAQL,EAAmB,KAEzCjN,OAAS,EAAG,MAAO,GAE3B,KAAOkF,EAAIlF,OAAS,GAAM,GACxBkF,GAAY,IAGd,OAAOA,EA0GmBsI,CAAYtI,IAGxC,SAASF,EAAWyI,EAAKC,EAAKlJ,EAAQxE,GACpC,IAAK,IAAIxC,EAAI,EAAGA,EAAIwC,KACdxC,EAAIgH,GAAUkJ,EAAI1N,QAAUxC,GAAKiQ,EAAIzN,UADbxC,EAE5BkQ,EAAIlQ,EAAIgH,GAAUiJ,EAAIjQ,GAGxB,OAAOA,K,8CCvzDT,OAIA,SAAWmQ,GAiDT,IAAIC,EACAC,EAAY,6CACZC,EAAW/H,KAAKgI,KAChBC,EAAYjI,KAAK6F,MACjBqC,EAAiB,qBACjBC,EAAgBD,EAAiB,yDACjCE,EAAO,KAKXC,EAAW,CAAC,EAAG,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,MAK7EC,EAAM,IAi7EN,SAASC,EAASrP,GAChB,IAAIzB,EAAQ,EAAJyB,EACR,OAAOA,EAAI,GAAKA,IAAMzB,EAAIA,EAAIA,EAAI,EAIpC,SAAS+Q,EAAc1G,GAOrB,IANA,IAAItI,EACAiP,EACAhR,EAAI,EACJ8G,EAAIuD,EAAE7H,OACN1B,EAAIuJ,EAAE,GAAK,GAERrK,EAAI8G,GAAI,CAIb,IAFAkK,EAz8EW,IAw8EXjP,EAAIsI,EAAErK,KAAO,IACIwC,OAEVwO,IAAKjP,EAAI,IAAMA,GAEtBjB,GAAKiB,EAIP,IAAK+E,EAAIhG,EAAE0B,OAA8B,KAAtB1B,EAAE+G,aAAaf,KAElC,OAAOhG,EAAEiD,MAAM,EAAG+C,EAAI,GAAK,GAI7B,SAASsD,EAAQE,EAAGC,GAClB,IAAIF,EACAxE,EACAoL,EAAK3G,EAAEjK,EACP6Q,EAAK3G,EAAElK,EACPL,EAAIsK,EAAEvI,EACN+E,EAAIyD,EAAExI,EACNoP,EAAI7G,EAAEX,EACN1J,EAAIsK,EAAEZ,EAEV,IAAK3J,IAAM8G,EAAG,OAAO,KAIrB,GAHAuD,EAAI4G,IAAOA,EAAG,GACdpL,EAAIqL,IAAOA,EAAG,GAEV7G,GAAKxE,EAAG,OAAOwE,EAAIxE,EAAI,GAAKiB,EAAI9G,EAEpC,GAAIA,GAAK8G,EAAG,OAAO9G,EAInB,GAHAqK,EAAIrK,EAAI,EACR6F,EAAIsL,GAAKlR,GAEJgR,IAAOC,EAAI,OAAOrL,EAAI,GAAKoL,EAAK5G,EAAI,GAAK,EAE9C,IAAKxE,EAAG,OAAOsL,EAAIlR,EAAIoK,EAAI,GAAK,EAGhC,IAFAvD,GAAKqK,EAAIF,EAAGzO,SAAWvC,EAAIiR,EAAG1O,QAAU2O,EAAIlR,EAEvCD,EAAI,EAAGA,EAAI8G,EAAG9G,IAAK,GAAIiR,EAAGjR,IAAMkR,EAAGlR,GAAI,OAAOiR,EAAGjR,GAAKkR,EAAGlR,GAAKqK,EAAI,GAAK,EAG5E,OAAO8G,GAAKlR,EAAI,EAAIkR,EAAIlR,EAAIoK,EAAI,GAAK,EAOvC,SAAS+G,EAAS3P,EAAG+G,EAAKyC,EAAK1K,GAC7B,GAAIkB,EAAI+G,GAAO/G,EAAIwJ,GAAOxJ,IAAM+O,EAAU/O,GACxC,MAAMsB,MAAM0N,GAAkBlQ,GAAQ,aAA2B,iBAALkB,EAAgBA,EAAI+G,GAAO/G,EAAIwJ,EAAM,kBAAoB,oBAAsB,6BAA+BzE,OAAO/E,IAKrL,SAAS4P,EAAM5P,GACb,IAAI0P,EAAI1P,EAAEpB,EAAEmC,OAAS,EACrB,OAAOsO,EAASrP,EAAEkI,EAngFL,KAmgFsBwH,GAAK1P,EAAEpB,EAAE8Q,GAAK,GAAK,EAGxD,SAASG,EAAc5J,EAAKiC,GAC1B,OAAQjC,EAAIlF,OAAS,EAAIkF,EAAI6J,OAAO,GAAK,IAAM7J,EAAI3D,MAAM,GAAK2D,IAAQiC,EAAI,EAAI,IAAM,MAAQA,EAG9F,SAAS6H,EAAa9J,EAAKiC,EAAGqH,GAC5B,IAAI7M,EAAKsN,EAET,GAAI9H,EAAI,EAAG,CAET,IAAK8H,EAAKT,EAAI,MAAOrH,EAAG8H,GAAMT,GAE9BtJ,EAAM+J,EAAK/J,OAIX,KAAMiC,GAFNxF,EAAMuD,EAAIlF,QAEK,CACb,IAAKiP,EAAKT,EAAGrH,GAAKxF,IAAOwF,EAAG8H,GAAMT,GAElCtJ,GAAO+J,OACE9H,EAAIxF,IACbuD,EAAMA,EAAI3D,MAAM,EAAG4F,GAAK,IAAMjC,EAAI3D,MAAM4F,IAI5C,OAAOjC,GAIT0I,EAnhFA,SAASsB,EAAMC,GACb,IAAIC,EACAC,EACAC,EA2hBEC,EAimBAC,EACAC,EACAC,EACAC,EACAC,EA/nCFC,EAAIjC,EAAUxO,UAAY,CAC5B0Q,YAAalC,EACbvL,SAAU,KACV0N,QAAS,MAEPC,EAAM,IAAIpC,EAAU,GAKxBqC,EAAiB,GAajBC,EAAgB,EAKhBC,GAAc,EAIdC,EAAa,GAKbC,GAAW,IAKXC,EAAU,IAGVC,GAAS,EAkBTC,EAAc,EAIdC,EAAgB,EAGhBC,EAAS,CACPC,OAAQ,GACRC,UAAW,EACXC,mBAAoB,EACpBC,eAAgB,IAChBC,iBAAkB,IAClBC,kBAAmB,EACnBC,uBAAwB,IAExBC,OAAQ,IAKVC,EAAW,uCAWX,SAASvD,EAAUwD,EAAG/N,GACpB,IAAIgO,EACAxT,EACAyT,EACAnK,EACA3J,EACA+T,EACA5P,EACAuD,EACA4C,EAAIxH,KAER,KAAMwH,aAAa8F,GAAY,OAAO,IAAIA,EAAUwD,EAAG/N,GAEvD,GAAS,MAALA,EAAW,CACb,GAAI+N,IAAwB,IAAnBA,EAAEI,aAYT,OAXA1J,EAAEvI,EAAI6R,EAAE7R,QAEH6R,EAAEvT,GAAKuT,EAAEjK,EAAImJ,EAChBxI,EAAEjK,EAAIiK,EAAEX,EAAI,KACHiK,EAAEjK,EAAIkJ,EACfvI,EAAEjK,EAAI,CAACiK,EAAEX,EAAI,IAEbW,EAAEX,EAAIiK,EAAEjK,EACRW,EAAEjK,EAAIuT,EAAEvT,EAAE0D,UAMd,IAAKgQ,EAAoB,iBAALH,IAAsB,EAAJA,GAAS,EAAG,CAIhD,GAFAtJ,EAAEvI,EAAI,EAAI6R,EAAI,GAAKA,GAAKA,GAAI,GAAK,EAE7BA,MAAQA,EAAG,CACb,IAAKjK,EAAI,EAAG3J,EAAI4T,EAAG5T,GAAK,GAAIA,GAAK,GAAI2J,KASrC,YAPIA,EAAImJ,EACNxI,EAAEjK,EAAIiK,EAAEX,EAAI,MAEZW,EAAEX,EAAIA,EACNW,EAAEjK,EAAI,CAACuT,KAMXlM,EAAMlB,OAAOoN,OACR,CACL,IAAKvD,EAAU4D,KAAKvM,EAAMlB,OAAOoN,IAAK,OAAO9B,EAAaxH,EAAG5C,EAAKqM,GAClEzJ,EAAEvI,EAAyB,IAArB2F,EAAIG,WAAW,IAAYH,EAAMA,EAAI3D,MAAM,IAAK,GAAK,GAIxD4F,EAAIjC,EAAIxB,QAAQ,OAAS,IAAGwB,EAAMA,EAAIoI,QAAQ,IAAK,MAEnD9P,EAAI0H,EAAIwM,OAAO,OAAS,GAEvBvK,EAAI,IAAGA,EAAI3J,GACf2J,IAAMjC,EAAI3D,MAAM/D,EAAI,GACpB0H,EAAMA,EAAIyM,UAAU,EAAGnU,IACd2J,EAAI,IAEbA,EAAIjC,EAAIlF,YAEL,CAKL,GAHA4O,EAASvL,EAAG,EAAG8N,EAASnR,OAAQ,QAGvB,IAALqD,EAEF,OAAOuO,EADP9J,EAAI,IAAI8F,EAAUwD,GACFnB,EAAiBnI,EAAEX,EAAI,EAAG+I,GAK5C,GAFAhL,EAAMlB,OAAOoN,GAETG,EAAoB,iBAALH,EAAe,CAEhC,GAAQ,EAAJA,GAAS,EAAG,OAAO9B,EAAaxH,EAAG5C,EAAKqM,EAAOlO,GAGnD,GAFAyE,EAAEvI,EAAI,EAAI6R,EAAI,GAAKlM,EAAMA,EAAI3D,MAAM,IAAK,GAAK,EAEzCqM,EAAUiE,OAAS3M,EAAIoI,QAAQ,YAAa,IAAItN,OAAS,GAC3D,MAAMO,MAAM2N,EAAgBkD,QAG9BtJ,EAAEvI,EAA0B,KAAtB2F,EAAIG,WAAW,IAAaH,EAAMA,EAAI3D,MAAM,IAAK,GAAK,EAO9D,IAJA8P,EAAWF,EAAS5P,MAAM,EAAG8B,GAC7B8D,EAAI3J,EAAI,EAGHmE,EAAMuD,EAAIlF,OAAQxC,EAAImE,EAAKnE,IAC9B,GAAI6T,EAAS3N,QAAQ7F,EAAIqH,EAAI6J,OAAOvR,IAAM,EAAG,CAC3C,GAAS,KAALK,GAEF,GAAIL,EAAI2J,EAAG,CACTA,EAAIxF,EACJ,eAEG,IAAK2P,IAENpM,GAAOA,EAAI4M,gBAAkB5M,EAAMA,EAAIxC,gBAAkBwC,GAAOA,EAAIxC,gBAAkBwC,EAAMA,EAAI4M,gBAAgB,CAClHR,GAAc,EACd9T,GAAK,EACL2J,EAAI,EACJ,SAIJ,OAAOmI,EAAaxH,EAAG9D,OAAOoN,GAAIG,EAAOlO,GAK7CkO,GAAQ,GAGHpK,GAFLjC,EAAMmK,EAAYnK,EAAK7B,EAAG,GAAIyE,EAAEvI,IAEnBmE,QAAQ,OAAS,EAAGwB,EAAMA,EAAIoI,QAAQ,IAAK,IAASnG,EAAIjC,EAAIlF,OAI3E,IAAKxC,EAAI,EAAyB,KAAtB0H,EAAIG,WAAW7H,GAAWA,KAGtC,IAAKmE,EAAMuD,EAAIlF,OAAkC,KAA1BkF,EAAIG,aAAa1D,KAExC,GAAIuD,EAAMA,EAAI3D,MAAM/D,IAAKmE,GAAM,CAG7B,GAFAA,GAAOnE,EAEH+T,GAAS3D,EAAUiE,OAASlQ,EAAM,KAAOyP,EAnP5B,kBAmPoDA,IAAMpD,EAAUoD,IACnF,MAAM7Q,MAAM2N,EAAgBpG,EAAEvI,EAAI6R,GAIpC,IAAKjK,EAAIA,EAAI3J,EAAI,GAAK8S,EAEpBxI,EAAEjK,EAAIiK,EAAEX,EAAI,UACP,GAAIA,EAAIkJ,EAEbvI,EAAEjK,EAAI,CAACiK,EAAEX,EAAI,OACR,CASL,GARAW,EAAEX,EAAIA,EACNW,EAAEjK,EAAI,GAINL,GAAK2J,EAAI,GArQF,GAsQHA,EAAI,IAAG3J,GAtQJ,IAwQHA,EAAImE,EAAK,CAGX,IAFInE,GAAGsK,EAAEjK,EAAEuH,MAAMF,EAAI3D,MAAM,EAAG/D,IAEzBmE,GA3QA,GA2QiBnE,EAAImE,GACxBmG,EAAEjK,EAAEuH,MAAMF,EAAI3D,MAAM/D,EAAGA,GA5QpB,KA+QLA,EA/QK,IA+QW0H,EAAMA,EAAI3D,MAAM/D,IAAIwC,YAEpCxC,GAAKmE,EAGP,KAAOnE,IAAK0H,GAAO,KAEnB4C,EAAEjK,EAAEuH,MAAMF,SAIZ4C,EAAEjK,EAAI,CAACiK,EAAEX,EAAI,GAmxBjB,SAAS4K,EAAO9S,EAAGzB,EAAGwU,EAAIC,GACxB,IAAIC,EAAI/K,EAAGgL,EAAIxQ,EAAKuD,EAEpB,GADU,MAAN8M,EAAYA,EAAK9B,EAAmBtB,EAASoD,EAAI,EAAG,IACnD/S,EAAEpB,EAAG,OAAOoB,EAAEoD,WAInB,GAHA6P,EAAKjT,EAAEpB,EAAE,GACTsU,EAAKlT,EAAEkI,EAEE,MAAL3J,EACF0H,EAAMqJ,EAActP,EAAEpB,GACtBqH,EAAY,GAAN+M,GAAiB,GAANA,IAAYE,GAAMhC,GAAcgC,GAAM/B,GAActB,EAAc5J,EAAKiN,GAAMnD,EAAa9J,EAAKiN,EAAI,UAWpH,GAPAhL,GAFAlI,EAAI2S,EAAM,IAAIhE,EAAU3O,GAAIzB,EAAGwU,IAEzB7K,EAENxF,GADAuD,EAAMqJ,EAActP,EAAEpB,IACZmC,OAKA,GAANiS,GAAiB,GAANA,IAAYzU,GAAK2J,GAAKA,GAAKgJ,GAAa,CAErD,KAAOxO,EAAMnE,EAAG0H,GAAO,IAAKvD,KAE5BuD,EAAM4J,EAAc5J,EAAKiC,QAKzB,GAHA3J,GAAK2U,EACLjN,EAAM8J,EAAa9J,EAAKiC,EAAG,KAEvBA,EAAI,EAAIxF,GACV,KAAMnE,EAAI,EAAG,IAAK0H,GAAO,IAAK1H,IAAK0H,GAAO,WAI1C,IAFA1H,GAAK2J,EAAIxF,GAED,EAGN,IAFIwF,EAAI,GAAKxF,IAAKuD,GAAO,KAElB1H,IAAK0H,GAAO,KAM3B,OAAOjG,EAAEM,EAAI,GAAK2S,EAAK,IAAMhN,EAAMA,EAIrC,SAASkN,EAASC,EAAMC,GAKtB,IAJA,IAAIrT,EACAzB,EAAI,EACJI,EAAI,IAAIgQ,EAAUyE,EAAK,IAEpB7U,EAAI6U,EAAKrS,OAAQxC,IAAK,CAG3B,KAFAyB,EAAI,IAAI2O,EAAUyE,EAAK7U,KAEhB+B,EAAG,CACR3B,EAAIqB,EACJ,MACSqT,EAAO3U,KAAKC,EAAGqB,KACxBrB,EAAIqB,GAIR,OAAOrB,EAQT,SAAS2U,EAAUtT,EAAGpB,EAAGsJ,GAIvB,IAHA,IAAI3J,EAAI,EACJ8G,EAAIzG,EAAEmC,QAEFnC,IAAIyG,GAAIzG,EAAE2U,OAGlB,IAAKlO,EAAIzG,EAAE,GAAIyG,GAAK,GAAIA,GAAK,GAAI9G,KAcjC,OAXK2J,EAAI3J,EA9nCE,GA8nCE2J,EAAe,GAAKmJ,EAE/BrR,EAAEpB,EAAIoB,EAAEkI,EAAI,KACHA,EAAIkJ,EAEbpR,EAAEpB,EAAI,CAACoB,EAAEkI,EAAI,IAEblI,EAAEkI,EAAIA,EACNlI,EAAEpB,EAAIA,GAGDoB,EAoDT,SAAS2S,EAAM9J,EAAG2K,EAAIT,EAAI1T,GACxB,IAAIR,EACAN,EACA8G,EACAqK,EACA1P,EACAyT,EACAC,EACAlE,EAAK3G,EAAEjK,EACP+U,EAASxE,EAEb,GAAIK,EAAI,CAONlF,EAAK,CAEH,IAAKzL,EAAI,EAAG6Q,EAAIF,EAAG,GAAIE,GAAK,GAAIA,GAAK,GAAI7Q,KAIzC,IAFAN,EAAIiV,EAAK3U,GAED,EACNN,GAttCK,GAutCL8G,EAAImO,EAGJE,GAFA1T,EAAIwP,EAAGiE,EAAK,IAEHE,EAAO9U,EAAIwG,EAAI,GAAK,GAAK,OAIlC,IAFAoO,EAAK5E,GAAUtQ,EAAI,GA5tCd,MA8tCKiR,EAAGzO,OAAQ,CACnB,IAAI1B,EASF,MAAMiL,EAPN,KAAOkF,EAAGzO,QAAU0S,EAAIjE,EAAGrJ,KAAK,IAEhCnG,EAAI0T,EAAK,EACT7U,EAAI,EAEJwG,GADA9G,GAruCC,OAsuCkB,MAIhB,CAGL,IAFAyB,EAAI0P,EAAIF,EAAGiE,GAEN5U,EAAI,EAAG6Q,GAAK,GAAIA,GAAK,GAAI7Q,KAQ9B6U,GAFArO,GAHA9G,GAhvCG,OAmvCgBM,GAEV,EAAI,EAAImB,EAAI2T,EAAO9U,EAAIwG,EAAI,GAAK,GAAK,EAWlD,GAPAhG,EAAIA,GAAKmU,EAAK,GAGA,MAAdhE,EAAGiE,EAAK,KAAepO,EAAI,EAAIrF,EAAIA,EAAI2T,EAAO9U,EAAIwG,EAAI,IACtDhG,EAAI0T,EAAK,GAAKW,GAAMrU,KAAa,GAAN0T,GAAWA,IAAOlK,EAAEvI,EAAI,EAAI,EAAI,IAAMoT,EAAK,GAAW,GAANA,IAAkB,GAANX,GAAW1T,GAAW,GAAN0T,IACtGxU,EAAI,EAAI8G,EAAI,EAAIrF,EAAI2T,EAAO9U,EAAIwG,GAAK,EAAImK,EAAGiE,EAAK,IAAM,GAAK,GAAKV,IAAOlK,EAAEvI,EAAI,EAAI,EAAI,IAElFkT,EAAK,IAAMhE,EAAG,GAchB,OAbAA,EAAGzO,OAAS,EAER1B,GAEFmU,GAAM3K,EAAEX,EAAI,EAEZsH,EAAG,GAAKmE,GAvwCL,GAuwCwBH,EAvwCxB,QAwwCH3K,EAAEX,GAAKsL,GAAM,GAGbhE,EAAG,GAAK3G,EAAEX,EAAI,EAGTW,EAiBT,GAbS,GAALtK,GACFiR,EAAGzO,OAAS0S,EACZ/D,EAAI,EACJ+D,MAEAjE,EAAGzO,OAAS0S,EAAK,EACjB/D,EAAIiE,EAxxCC,GAwxCiBpV,GAGtBiR,EAAGiE,GAAMpO,EAAI,EAAI0J,EAAU/O,EAAI2T,EAAO9U,EAAIwG,GAAKsO,EAAOtO,IAAMqK,EAAI,GAI9DrQ,EACF,OAAS,CAEP,GAAU,GAANoU,EAAS,CAEX,IAAKlV,EAAI,EAAG8G,EAAImK,EAAG,GAAInK,GAAK,GAAIA,GAAK,GAAI9G,KAIzC,IAFA8G,EAAImK,EAAG,IAAME,EAERA,EAAI,EAAGrK,GAAK,GAAIA,GAAK,GAAIqK,KAG1BnR,GAAKmR,IACP7G,EAAEX,IACEsH,EAAG,IAAMN,IAAMM,EAAG,GAAK,IAG7B,MAGA,GADAA,EAAGiE,IAAO/D,EACNF,EAAGiE,IAAOvE,EAAM,MACpBM,EAAGiE,KAAQ,EACX/D,EAAI,EAMV,IAAKnR,EAAIiR,EAAGzO,OAAoB,IAAZyO,IAAKjR,GAAUiR,EAAG+D,QAIpC1K,EAAEX,EAAImJ,EACRxI,EAAEjK,EAAIiK,EAAEX,EAAI,KACHW,EAAEX,EAAIkJ,IACfvI,EAAEjK,EAAI,CAACiK,EAAEX,EAAI,IAIjB,OAAOW,EAGT,SAASiI,EAAQ9Q,GACf,IAAIiG,EACAiC,EAAIlI,EAAEkI,EACV,OAAU,OAANA,EAAmBlI,EAAEoD,YACzB6C,EAAMqJ,EAActP,EAAEpB,GACtBqH,EAAMiC,GAAKgJ,GAAchJ,GAAKiJ,EAAatB,EAAc5J,EAAKiC,GAAK6H,EAAa9J,EAAKiC,EAAG,KACjFlI,EAAEM,EAAI,EAAI,IAAM2F,EAAMA,GAqmC/B,OArpEA0I,EAAUsB,MAAQA,EAClBtB,EAAUiF,SAAW,EACrBjF,EAAUkF,WAAa,EACvBlF,EAAUmF,WAAa,EACvBnF,EAAUoF,YAAc,EACxBpF,EAAUqF,cAAgB,EAC1BrF,EAAUsF,gBAAkB,EAC5BtF,EAAUuF,gBAAkB,EAC5BvF,EAAUwF,gBAAkB,EAC5BxF,EAAUyF,iBAAmB,EAC7BzF,EAAU0F,OAAS,EAoCnB1F,EAAU2F,OAAS3F,EAAUb,IAAM,SAAUtL,GAC3C,IAAInC,EAAG8R,EAEP,GAAW,MAAP3P,EAAa,CACf,GAAkB,iBAAPA,EAoHT,MAAMlB,MAAM0N,EAAiB,oBAAsBxM,GA9EnD,GAnCIA,EAAIpC,eAAeC,EAAI,oBAEzBsP,EADAwC,EAAI3P,EAAInC,GACI,EAAG+O,EAAK/O,GACpB2Q,EAAiBmB,GAKf3P,EAAIpC,eAAeC,EAAI,mBAEzBsP,EADAwC,EAAI3P,EAAInC,GACI,EAAG,EAAGA,GAClB4Q,EAAgBkB,GAOd3P,EAAIpC,eAAeC,EAAI,qBACzB8R,EAAI3P,EAAInC,KAEC8R,EAAEoB,KACT5D,EAASwC,EAAE,IAAK/C,EAAK,EAAG/O,GACxBsP,EAASwC,EAAE,GAAI,EAAG/C,EAAK/O,GACvB6Q,EAAaiB,EAAE,GACfhB,EAAagB,EAAE,KAEfxC,EAASwC,GAAI/C,EAAKA,EAAK/O,GACvB6Q,IAAeC,EAAagB,EAAI,GAAKA,EAAIA,KAOzC3P,EAAIpC,eAAeC,EAAI,SAGzB,IAFA8R,EAAI3P,EAAInC,KAEC8R,EAAEoB,IACT5D,EAASwC,EAAE,IAAK/C,GAAM,EAAG/O,GACzBsP,EAASwC,EAAE,GAAI,EAAG/C,EAAK/O,GACvB+Q,EAAUe,EAAE,GACZd,EAAUc,EAAE,OACP,CAGL,GAFAxC,EAASwC,GAAI/C,EAAKA,EAAK/O,IAEnB8R,EAGF,MAAM7Q,MAAM0N,EAAiB3O,EAAI,oBAAsB8R,GAFvDf,IAAYC,EAAUc,EAAI,GAAKA,EAAIA,GAUzC,GAAI3P,EAAIpC,eAAeC,EAAI,UAAW,CAGpC,IAFA8R,EAAI3P,EAAInC,QAEI8R,EAYV,MAAM7Q,MAAM0N,EAAiB3O,EAAI,uBAAyB8R,GAX1D,GAAIA,EAAG,CACL,GAAqB,oBAAVoC,SAAyBA,SAAWA,OAAOC,kBAAmBD,OAAOE,YAI9E,MADAnD,GAAUa,EACJ7Q,MAAM0N,EAAiB,sBAH7BsC,EAASa,OAMXb,EAASa,EAyBf,GAhBI3P,EAAIpC,eAAeC,EAAI,iBAEzBsP,EADAwC,EAAI3P,EAAInC,GACI,EAAG,EAAGA,GAClBkR,EAAcY,GAKZ3P,EAAIpC,eAAeC,EAAI,mBAEzBsP,EADAwC,EAAI3P,EAAInC,GACI,EAAG+O,EAAK/O,GACpBmR,EAAgBW,GAKd3P,EAAIpC,eAAeC,EAAI,UAAW,CAEpC,GAAgB,iBADhB8R,EAAI3P,EAAInC,IACkC,MAAMiB,MAAM0N,EAAiB3O,EAAI,mBAAqB8R,GAAtEV,EAASU,EAKrC,GAAI3P,EAAIpC,eAAeC,EAAI,YAAa,CAItC,GAAgB,iBAHhB8R,EAAI3P,EAAInC,KAGqB,sBAAsBmS,KAAKL,GAGtD,MAAM7Q,MAAM0N,EAAiB3O,EAAI,aAAe8R,GAFhDD,EAAWC,GAWnB,MAAO,CACLnB,eAAgBA,EAChBC,cAAeA,EACfyD,eAAgB,CAACxD,EAAYC,GAC7BwD,MAAO,CAACvD,EAASC,GACjBC,OAAQA,EACRC,YAAaA,EACbC,cAAeA,EACfC,OAAQA,EACRS,SAAUA,IAcdvD,EAAUiG,YAAc,SAAUzC,GAChC,IAAKA,IAAwB,IAAnBA,EAAEI,aAAuB,OAAO,EAC1C,IAAK5D,EAAUiE,MAAO,OAAO,EAC7B,IAAIrU,EACAyB,EACApB,EAAIuT,EAAEvT,EACNsJ,EAAIiK,EAAEjK,EACN5H,EAAI6R,EAAE7R,EAEVgK,EAAK,GAA2B,kBAAvB,GAAGlH,SAAS1E,KAAKE,IACxB,IAAW,IAAN0B,IAAkB,IAAPA,IAAa4H,IAAMkH,GAAOlH,GAAKkH,GAAOlH,IAAM6G,EAAU7G,GAAI,CAExE,GAAa,IAATtJ,EAAE,GAAU,CACd,GAAU,IAANsJ,GAAwB,IAAbtJ,EAAEmC,OAAc,OAAO,EACtC,MAAMuJ,EAQR,IAJA/L,GAAK2J,EAAI,GAlfF,IAmfC,IAAG3J,GAnfJ,IAsfHwG,OAAOnG,EAAE,IAAImC,QAAUxC,EAAG,CAC5B,IAAKA,EAAI,EAAGA,EAAIK,EAAEmC,OAAQxC,IAExB,IADAyB,EAAIpB,EAAEL,IACE,GAAKyB,GAAKkP,GAAQlP,IAAM+O,EAAU/O,GAAI,MAAMsK,EAItD,GAAU,IAANtK,EAAS,OAAO,SAInB,GAAU,OAANpB,GAAoB,OAANsJ,IAAqB,OAAN5H,GAAoB,IAANA,IAAkB,IAAPA,GAC/D,OAAO,EAGT,MAAMgB,MAAM0N,EAAiB,sBAAwBmD,IASvDxD,EAAUkG,QAAUlG,EAAUnF,IAAM,WAClC,OAAO2J,EAAS9J,UAAWuH,EAAEkE,KAS/BnG,EAAUoG,QAAUpG,EAAU5H,IAAM,WAClC,OAAOoM,EAAS9J,UAAWuH,EAAEoE,KAc/BrG,EAAUsG,QAMJ3E,EALU,iBAKOxJ,KAAKmO,SAAqB,QAAW,WACxD,OAAOlG,EANK,iBAMKjI,KAAKmO,WACpB,WACF,OAA0C,SAAlB,WAAhBnO,KAAKmO,SAAwB,IAAiC,QAAhBnO,KAAKmO,SAAsB,IAE5E,SAAUC,GACf,IAAItM,EACAxE,EACA8D,EACAwH,EACAyC,EACA5T,EAAI,EACJK,EAAI,GACJuW,EAAO,IAAIxG,EAAUoC,GAIzB,GAHU,MAANmE,EAAYA,EAAKlE,EAAoBrB,EAASuF,EAAI,EAAG9F,GACzDM,EAAIb,EAASqG,EA5jBJ,IA8jBL5D,EAEF,GAAIiD,OAAOC,gBAAiB,CAG1B,IAFA5L,EAAI2L,OAAOC,gBAAgB,IAAIY,YAAY1F,GAAK,IAEzCnR,EAAImR,IAOTyC,EAAW,OAAPvJ,EAAErK,IAAgBqK,EAAErK,EAAI,KAAO,MAK1B,MACP6F,EAAImQ,OAAOC,gBAAgB,IAAIY,YAAY,IAC3CxM,EAAErK,GAAK6F,EAAE,GACTwE,EAAErK,EAAI,GAAK6F,EAAE,KAIbxF,EAAEuH,KAAKgM,EAAI,MACX5T,GAAK,GAITA,EAAImR,EAAI,MACH,KAAI6E,OAAOE,YAuBhB,MADAnD,GAAS,EACHhQ,MAAM0N,EAAiB,sBAnB7B,IAFApG,EAAI2L,OAAOE,YAAY/E,GAAK,GAErBnR,EAAImR,IAKTyC,EAAkB,iBAAN,GAAPvJ,EAAErK,IAAwC,cAAXqK,EAAErK,EAAI,GAAgC,WAAXqK,EAAErK,EAAI,GAA8B,SAAXqK,EAAErK,EAAI,IAAkBqK,EAAErK,EAAI,IAAM,KAAOqK,EAAErK,EAAI,IAAM,GAAKqK,EAAErK,EAAI,KAEjJ,KACPgW,OAAOE,YAAY,GAAG7R,KAAKgG,EAAGrK,IAG9BK,EAAEuH,KAAKgM,EAAI,MACX5T,GAAK,GAITA,EAAImR,EAAI,EAQZ,IAAK4B,EACH,KAAO/S,EAAImR,IACTyC,EAAI7B,KACI,OAAM1R,EAAEL,KAAO4T,EAAI,MAa/B,IARA+C,GAhoBS,IA+nBTxF,EAAI9Q,IAAIL,KAGC2W,IACP/C,EAAIhD,EAnoBG,GAmoBiB+F,GACxBtW,EAAEL,GAAKwQ,EAAUW,EAAIyC,GAAKA,GAIZ,IAATvT,EAAEL,GAAUK,EAAE2U,MAAOhV,KAG5B,GAAIA,EAAI,EACNK,EAAI,CAACsJ,EAAI,OACJ,CAEL,IAAKA,GAAK,EAAY,IAATtJ,EAAE,GAAUA,EAAEyW,OAAO,EAAG,GAAInN,GA/oBlC,IAkpBP,IAAK3J,EAAI,EAAG4T,EAAIvT,EAAE,GAAIuT,GAAK,GAAIA,GAAK,GAAI5T,KAGpCA,EArpBG,KAqpBW2J,GArpBX,GAqpB2B3J,GAKpC,OAFA4W,EAAKjN,EAAIA,EACTiN,EAAKvW,EAAIA,EACFuW,IAUXxG,EAAU2G,IAAM,WAKd,IAJA,IAAI/W,EAAI,EACJ6U,EAAO/J,UACPiM,EAAM,IAAI3G,EAAUyE,EAAK,IAEtB7U,EAAI6U,EAAKrS,QAASuU,EAAMA,EAAIC,KAAKnC,EAAK7U,MAE7C,OAAO+W,GAKTlF,EAAc,WAQZ,SAASoF,EAAUvP,EAAKwP,EAAQC,EAAStD,GAOvC,IANA,IAAI/M,EAEAsQ,EADAhR,EAAM,CAAC,GAEPpG,EAAI,EACJmE,EAAMuD,EAAIlF,OAEPxC,EAAImE,GAAM,CACf,IAAKiT,EAAOhR,EAAI5D,OAAQ4U,IAAQhR,EAAIgR,IAASF,GAI7C,IAFA9Q,EAAI,IAAMyN,EAAS3N,QAAQwB,EAAI6J,OAAOvR,MAEjC8G,EAAI,EAAGA,EAAIV,EAAI5D,OAAQsE,IACtBV,EAAIU,GAAKqQ,EAAU,IACH,MAAd/Q,EAAIU,EAAI,KAAYV,EAAIU,EAAI,GAAK,GACrCV,EAAIU,EAAI,IAAMV,EAAIU,GAAKqQ,EAAU,EACjC/Q,EAAIU,IAAMqQ,GAKhB,OAAO/Q,EAAIiR,UAMb,OAAO,SAAU3P,EAAKwP,EAAQC,EAASG,EAAMC,GAC3C,IAAI1D,EACAvT,EACAqJ,EACAwH,EACArQ,EACAwJ,EACA2G,EACA1G,EACAvK,EAAI0H,EAAIxB,QAAQ,KAChByQ,EAAKlE,EACL+B,EAAK9B,EAqBT,IAnBI1S,GAAK,IACPmR,EAAI8B,EAEJA,EAAgB,EAChBvL,EAAMA,EAAIoI,QAAQ,IAAK,IAEvBxF,GADAC,EAAI,IAAI6F,EAAU8G,IACZ5J,IAAI5F,EAAIlF,OAASxC,GACvBiT,EAAgB9B,EAGhB5G,EAAElK,EAAI4W,EAAUzF,EAAaT,EAAczG,EAAEjK,GAAIiK,EAAEX,EAAG,KAAM,GAAIwN,EAzDtD,cA0DV5M,EAAEZ,EAAIY,EAAElK,EAAEmC,QAMZmH,EAAIwH,GAFJF,EAAKgG,EAAUvP,EAAKwP,EAAQC,EAASI,GAAoB1D,EAAWF,EA9DxD,eA8D8EE,EA9D9E,aA8DkGF,KAEnGnR,OAEO,GAAXyO,IAAKE,GAASF,EAAG+D,OAGxB,IAAK/D,EAAG,GAAI,OAAO4C,EAAStC,OAAO,GA2BnC,GAzBIvR,EAAI,IACJ2J,GAEFW,EAAEjK,EAAI4Q,EACN3G,EAAEX,EAAIA,EAENW,EAAEvI,EAAIuV,EAENrG,GADA3G,EAAIsH,EAAItH,EAAGC,EAAGoM,EAAInC,EAAI2C,IACf9W,EACPS,EAAIwJ,EAAExJ,EACN6I,EAAIW,EAAEX,GAOR3J,EAAIiR,EAFJ3Q,EAAIqJ,EAAIgN,EAAK,GAIbxF,EAAIgG,EAAU,EACdrW,EAAIA,GAAKR,EAAI,GAAkB,MAAb2Q,EAAG3Q,EAAI,GACzBQ,EAAI0T,EAAK,GAAU,MAALxU,GAAac,KAAa,GAAN0T,GAAWA,IAAOlK,EAAEvI,EAAI,EAAI,EAAI,IAAM/B,EAAImR,GAAKnR,GAAKmR,IAAY,GAANqD,GAAW1T,GAAW,GAAN0T,GAAuB,EAAZvD,EAAG3Q,EAAI,IAAUkU,IAAOlK,EAAEvI,EAAI,EAAI,EAAI,IAIzJzB,EAAI,IAAM2Q,EAAG,GAEfvJ,EAAM5G,EAAI0Q,EAAaqC,EAAStC,OAAO,IAAKoF,EAAI9C,EAAStC,OAAO,IAAMsC,EAAStC,OAAO,OACjF,CAIL,GAFAN,EAAGzO,OAASlC,EAERQ,EAEF,MAAOqW,IAAWlG,IAAK3Q,GAAK6W,GAC1BlG,EAAG3Q,GAAK,EAEHA,MACDqJ,EACFsH,EAAK,CAAC,GAAGzG,OAAOyG,IAMtB,IAAKE,EAAIF,EAAGzO,QAASyO,IAAKE,KAG1B,IAAKnR,EAAI,EAAG0H,EAAM,GAAI1H,GAAKmR,EAAGzJ,GAAOmM,EAAStC,OAAON,EAAGjR,OAGxD0H,EAAM8J,EAAa9J,EAAKiC,EAAGkK,EAAStC,OAAO,IAI7C,OAAO7J,GA/HG,GAoIdkK,EAAM,WAEJ,SAAS4F,EAASlN,EAAG6G,EAAGsG,GACtB,IAAIrX,EACAsX,EACAC,EACAC,EACAC,EAAQ,EACR7X,EAAIsK,EAAE9H,OACNsV,EAAM3G,EAxzBA,IAyzBN4G,EAAM5G,EAzzBA,IAyzBgB,EAE1B,IAAK7G,EAAIA,EAAEvG,QAAS/D,KAKlB6X,IADAH,EAAOI,GAHPH,EAAMrN,EAAEtK,GA5zBA,MA8zBRI,EAAI2X,EAAMJ,GADVC,EAAMtN,EAAEtK,GA7zBA,IA6zBiB,GACH8X,GA9zBd,QA+zBuCD,GAC/BJ,EAAO,IAAMrX,EAh0BrB,IAg0BqC,GAAK2X,EAAMH,EACxDtN,EAAEtK,GAAK0X,EAAOD,EAIhB,OADII,IAAOvN,EAAI,CAACuN,GAAOrN,OAAOF,IACvBA,EAGT,SAASF,EAAQC,EAAGxE,EAAGmS,EAAIC,GACzB,IAAIjY,EAAGkY,EAEP,GAAIF,GAAMC,EACRC,EAAMF,EAAKC,EAAK,GAAK,OAErB,IAAKjY,EAAIkY,EAAM,EAAGlY,EAAIgY,EAAIhY,IACxB,GAAIqK,EAAErK,IAAM6F,EAAE7F,GAAI,CAChBkY,EAAM7N,EAAErK,GAAK6F,EAAE7F,GAAK,GAAK,EACzB,MAKN,OAAOkY,EAGT,SAASC,EAAS9N,EAAGxE,EAAGmS,EAAIP,GAG1B,IAFA,IAAIzX,EAAI,EAEDgY,KACL3N,EAAE2N,IAAOhY,EACTA,EAAIqK,EAAE2N,GAAMnS,EAAEmS,GAAM,EAAI,EACxB3N,EAAE2N,GAAMhY,EAAIyX,EAAOpN,EAAE2N,GAAMnS,EAAEmS,GAI/B,MAAQ3N,EAAE,IAAMA,EAAE7H,OAAS,EAAG6H,EAAEyM,OAAO,EAAG,KAI5C,OAAO,SAAUxM,EAAGC,EAAGoM,EAAInC,EAAIiD,GAC7B,IAAIS,EACAvO,EACA3J,EACAoY,EACA3W,EACA4W,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjX,EAAIuI,EAAEvI,GAAKwI,EAAExI,EAAI,GAAK,EACtBkP,EAAK3G,EAAEjK,EACP6Q,EAAK3G,EAAElK,EAEX,KAAK4Q,GAAOA,EAAG,IAAOC,GAAOA,EAAG,IAC9B,OAAO,IAAId,EACV9F,EAAEvI,GAAMwI,EAAExI,IAAMkP,GAAKC,GAAMD,EAAG,IAAMC,EAAG,GAAMA,GAC9CD,GAAe,GAATA,EAAG,KAAYC,EAAS,EAAJnP,EAAQA,EAAI,EADckX,KAiBtD,IAZAT,GADAD,EAAI,IAAInI,EAAUrO,IACX1B,EAAI,GAEX0B,EAAI4U,GADJhN,EAAIW,EAAEX,EAAIY,EAAEZ,GACC,EAER8N,IACHA,EAAO9G,EACPhH,EAAImH,EAASxG,EAAEX,EA/4BR,IA+4BwBmH,EAASvG,EAAEZ,EA/4BnC,IAg5BP5H,EAAIA,EAh5BG,GAg5BY,GAKhB/B,EAAI,EAAGkR,EAAGlR,KAAOiR,EAAGjR,IAAM,GAAIA,KAInC,GAFIkR,EAAGlR,IAAMiR,EAAGjR,IAAM,IAAI2J,IAEtB5H,EAAI,EACNyW,EAAG5Q,KAAK,GACRwQ,GAAO,MACF,CAoBL,IAnBAS,EAAK5H,EAAGzO,OACRuW,EAAK7H,EAAG1O,OACRxC,EAAI,EACJ+B,GAAK,GAELN,EAAI+O,EAAUiH,GAAQvG,EAAG,GAAK,KAGtB,IACNA,EAAKsG,EAAStG,EAAIzP,EAAGgW,GACrBxG,EAAKuG,EAASvG,EAAIxP,EAAGgW,GACrBsB,EAAK7H,EAAG1O,OACRqW,EAAK5H,EAAGzO,QAGVoW,EAAKG,EAELL,GADAD,EAAMxH,EAAGlN,MAAM,EAAGgV,IACPvW,OAEJkW,EAAOK,EAAIN,EAAIC,KAAU,GAEhCM,EAAK9H,EAAGnN,QACRiV,EAAK,CAAC,GAAGxO,OAAOwO,GAChBF,EAAM5H,EAAG,GACLA,EAAG,IAAMuG,EAAO,GAAGqB,IAGvB,EAAG,CAKD,GAJArX,EAAI,GAEJyW,EAAM9N,EAAQ8G,EAAIuH,EAAKM,EAAIL,IAEjB,EAAG,CAgBX,GAdAC,EAAOF,EAAI,GACPM,GAAML,IAAMC,EAAOA,EAAOlB,GAAQgB,EAAI,IAAM,KAEhDhX,EAAI+O,EAAUmI,EAAOG,IAWb,EAWN,IATIrX,GAAKgW,IAAMhW,EAAIgW,EAAO,GAG1Ba,GADAD,EAAOb,EAAStG,EAAIzP,EAAGgW,IACVjV,OACbkW,EAAOD,EAAIjW,OAK+B,GAAnC4H,EAAQiO,EAAMI,EAAKH,EAAOI,IAC/BjX,IAEA0W,EAASE,EAAMU,EAAKT,EAAQU,EAAK9H,EAAIoH,EAAOb,GAC5Ca,EAAQD,EAAK7V,OACb0V,EAAM,OAOC,GAALzW,IAEFyW,EAAMzW,EAAI,GAKZ6W,GADAD,EAAOnH,EAAGnN,SACGvB,OAQf,GALI8V,EAAQI,IAAML,EAAO,CAAC,GAAG7N,OAAO6N,IAEpCF,EAASM,EAAKJ,EAAMK,EAAMjB,GAC1BiB,EAAOD,EAAIjW,QAEC,GAAR0V,EAKF,KAAO9N,EAAQ8G,EAAIuH,EAAKM,EAAIL,GAAQ,GAClCjX,IAEA0W,EAASM,EAAKM,EAAKL,EAAOM,EAAK9H,EAAIwH,EAAMjB,GACzCiB,EAAOD,EAAIjW,YAGE,IAAR0V,IACTzW,IACAgX,EAAM,CAAC,IAKTD,EAAGxY,KAAOyB,EAENgX,EAAI,GACNA,EAAIC,KAAUzH,EAAG2H,IAAO,GAExBH,EAAM,CAACxH,EAAG2H,IACVF,EAAO,UAEDE,IAAOC,GAAgB,MAAVJ,EAAI,KAAe1W,KAE1CqW,EAAiB,MAAVK,EAAI,GAEND,EAAG,IAAIA,EAAG1B,OAAO,EAAG,GAG3B,GAAIW,GAAQ9G,EAAM,CAEhB,IAAK3Q,EAAI,EAAG+B,EAAIyW,EAAG,GAAIzW,GAAK,GAAIA,GAAK,GAAI/B,KAEzCoU,EAAMmE,EAAG5B,GAAM4B,EAAE5O,EAAI3J,EAzhCd,GAyhCkB2J,EAAe,GAAK,EAAG6K,EAAI4D,QAEpDG,EAAE5O,EAAIA,EACN4O,EAAEzX,GAAKsX,EAGT,OAAOG,GA3OL,GA0VAvG,EAAa,8BACbC,EAAW,cACXC,EAAY,cACZC,EAAkB,qBAClBC,EAAmB,6BALzBN,EAMS,SAAUxH,EAAG5C,EAAKqM,EAAOlO,GAC9B,IAAI4R,EACA1V,EAAIgS,EAAQrM,EAAMA,EAAIoI,QAAQsC,EAAkB,IAEpD,GAAID,EAAgB8B,KAAKlS,GACvBuI,EAAEvI,EAAIiE,MAAMjE,GAAK,KAAOA,EAAI,GAAK,EAAI,MAChC,CACL,IAAKgS,IAEHhS,EAAIA,EAAE+N,QAAQkC,GAAY,SAAU5R,EAAG8Y,EAAIC,GAEzC,OADA1B,EAAkC,MAA1B0B,EAAKA,EAAGjU,eAAwB,GAAW,KAANiU,EAAY,EAAI,EACrDtT,GAAKA,GAAK4R,EAAYrX,EAAL8Y,KAGvBrT,IACF4R,EAAO5R,EAEP9D,EAAIA,EAAE+N,QAAQmC,EAAU,MAAMnC,QAAQoC,EAAW,SAG/CxK,GAAO3F,GAAG,OAAO,IAAIqO,EAAUrO,EAAG0V,GAKxC,GAAIrH,EAAUiE,MACZ,MAAMtR,MAAM0N,EAAiB,SAAW5K,EAAI,SAAWA,EAAI,IAAM,YAAc6B,GAIjF4C,EAAEvI,EAAI,KAGRuI,EAAEjK,EAAIiK,EAAEX,EAAI,MAmKhB0I,EAAE+G,cAAgB/G,EAAEgH,IAAM,WACxB,IAAI/O,EAAI,IAAI8F,EAAUtN,MAEtB,OADIwH,EAAEvI,EAAI,IAAGuI,EAAEvI,EAAI,GACZuI,GAWT+H,EAAEiH,WAAa,SAAU/O,EAAG1E,GAC1B,OAAOuE,EAAQtH,KAAM,IAAIsN,EAAU7F,EAAG1E,KAiBxCwM,EAAEkH,cAAgBlH,EAAEsE,GAAK,SAAUA,EAAInC,GACrC,IAAInU,EACAoB,EACAmS,EACAtJ,EAAIxH,KAER,GAAU,MAAN6T,EAGF,OAFAvF,EAASuF,EAAI,EAAG9F,GACN,MAAN2D,EAAYA,EAAK9B,EAAmBtB,EAASoD,EAAI,EAAG,GACjDJ,EAAM,IAAIhE,EAAU9F,GAAIqM,EAAKrM,EAAEX,EAAI,EAAG6K,GAG/C,KAAMnU,EAAIiK,EAAEjK,GAAI,OAAO,KAGvB,GAFAoB,EAp4CW,KAo4CLmS,EAAIvT,EAAEmC,OAAS,GAAKsO,EAAShO,KAAK6G,EAp4C7B,KAs4CPiK,EAAIvT,EAAEuT,GAAI,KAAOA,EAAI,IAAM,EAAGA,GAAK,GAAInS,KAE3C,OADIA,EAAI,IAAGA,EAAI,GACRA,GAwBT4Q,EAAEmH,UAAYnH,EAAET,IAAM,SAAUrH,EAAG1E,GACjC,OAAO+L,EAAI9O,KAAM,IAAIsN,EAAU7F,EAAG1E,GAAI4M,EAAgBC,IAQxDL,EAAEoH,mBAAqBpH,EAAEqH,KAAO,SAAUnP,EAAG1E,GAC3C,OAAO+L,EAAI9O,KAAM,IAAIsN,EAAU7F,EAAG1E,GAAI,EAAG,IAmB3CwM,EAAEsH,gBAAkBtH,EAAE/E,IAAM,SAAU7L,EAAGrB,GACvC,IAAIwZ,EACAC,EACA7Z,EACAmR,EAEA2I,EACAC,EACAC,EACAzP,EACAD,EAAIxH,KAGR,IAFArB,EAAI,IAAI2O,EAAU3O,IAEZpB,IAAMoB,EAAEwY,YACZ,MAAMlX,MAAM0N,EAAiB,4BAA8B8B,EAAQ9Q,IAOrE,GAJS,MAALrB,IAAWA,EAAI,IAAIgQ,EAAUhQ,IAEjC0Z,EAASrY,EAAEkI,EAAI,IAEVW,EAAEjK,IAAMiK,EAAEjK,EAAE,IAAgB,GAAViK,EAAEjK,EAAE,KAAYiK,EAAEX,GAAmB,GAAdW,EAAEjK,EAAEmC,SAAgBf,EAAEpB,IAAMoB,EAAEpB,EAAE,GAI5E,OADAkK,EAAI,IAAI6F,EAAU7H,KAAK+E,KAAKiF,EAAQjI,GAAIwP,EAAS,EAAIzI,EAAM5P,IAAM8Q,EAAQ9Q,KAClErB,EAAImK,EAAE2P,IAAI9Z,GAAKmK,EAKxB,GAFAwP,EAAStY,EAAEM,EAAI,EAEX3B,EAAG,CAEL,GAAIA,EAAEC,GAAKD,EAAEC,EAAE,IAAMD,EAAE2B,EAAG,OAAO,IAAIqO,EAAU6I,MAC/CY,GAAYE,GAAUzP,EAAE2P,aAAe7Z,EAAE6Z,eAC3B3P,EAAIA,EAAE4P,IAAI9Z,QAEnB,IAAIqB,EAAEkI,EAAI,IAAMW,EAAEX,EAAI,GAAKW,EAAEX,GAAK,IAAa,GAAPW,EAAEX,EAC/CW,EAAEjK,EAAE,GAAK,GAAKyZ,GAAUxP,EAAEjK,EAAE,IAAM,KAClCiK,EAAEjK,EAAE,GAAK,MAAQyZ,GAAUxP,EAAEjK,EAAE,IAAM,YAMrC,OAJA8Q,EAAI7G,EAAEvI,EAAI,GAAKsP,EAAM5P,IAAM,EAAI,EAE3B6I,EAAEX,GAAK,IAAGwH,EAAI,EAAIA,GAEf,IAAIf,EAAU2J,EAAS,EAAI5I,EAAIA,GAC7B8B,IAIT9B,EAAIb,EAAS2C,EA9+CJ,GA8+C+B,IAc1C,IAXI6G,GACFF,EAAO,IAAIxJ,EAAU,IACjB2J,IAAQtY,EAAEM,EAAI,GAClBiY,EAAS3I,EAAM5P,IAGfuY,GADAha,EAAIuI,KAAK8Q,KAAK9G,EAAQ9Q,KACT,EAGf8I,EAAI,IAAI6F,EAAUoC,KAET,CACP,GAAIwH,EAAQ,CAEV,KADAzP,EAAIA,EAAE4P,MAAM7P,IACLjK,EAAG,MAEN8Q,EACE5G,EAAElK,EAAEmC,OAAS2O,IAAG5G,EAAElK,EAAEmC,OAAS2O,GACxB0I,IACTtP,EAAIA,EAAE2P,IAAI9Z,IAId,GAAIJ,EAAG,CAEL,GAAU,KADVA,EAAIwQ,EAAUxQ,EAAI,IACL,MACbga,EAASha,EAAI,OAKb,GAFAoU,EADA3S,EAAIA,EAAE0Y,MAAMP,GACHnY,EAAEkI,EAAI,EAAG,GAEdlI,EAAEkI,EAAI,GACRqQ,EAAS3I,EAAM5P,OACV,CAEL,GAAU,KADVzB,GAAKuS,EAAQ9Q,IACA,MACbuY,EAASha,EAAI,EAIjBsK,EAAIA,EAAE6P,MAAM7P,GAER6G,EACE7G,EAAEjK,GAAKiK,EAAEjK,EAAEmC,OAAS2O,IAAG7G,EAAEjK,EAAEmC,OAAS2O,GAC/B0I,IACTvP,EAAIA,EAAE4P,IAAI9Z,IAId,OAAIyZ,EAAiBtP,GACjBwP,IAAQxP,EAAIiI,EAAIZ,IAAIrH,IACjBnK,EAAImK,EAAE2P,IAAI9Z,GAAK+Q,EAAIiD,EAAM7J,EAAG0I,EAAeP,OAlG9C0F,GAkGqE7N,IAY3E8H,EAAE+H,aAAe,SAAU5F,GACzB,IAAI/S,EAAI,IAAI2O,EAAUtN,MAEtB,OADU,MAAN0R,EAAYA,EAAK9B,EAAmBtB,EAASoD,EAAI,EAAG,GACjDJ,EAAM3S,EAAGA,EAAEkI,EAAI,EAAG6K,IAQ3BnC,EAAEgI,UAAYhI,EAAEiI,GAAK,SAAU/P,EAAG1E,GAChC,OAA8C,IAAvCuE,EAAQtH,KAAM,IAAIsN,EAAU7F,EAAG1E,KAOxCwM,EAAE3G,SAAW,WACX,QAAS5I,KAAKzC,GAQhBgS,EAAEkI,cAAgBlI,EAAEoE,GAAK,SAAUlM,EAAG1E,GACpC,OAAOuE,EAAQtH,KAAM,IAAIsN,EAAU7F,EAAG1E,IAAM,GAQ9CwM,EAAEmI,uBAAyBnI,EAAEoI,IAAM,SAAUlQ,EAAG1E,GAC9C,OAAoD,KAA5CA,EAAIuE,EAAQtH,KAAM,IAAIsN,EAAU7F,EAAG1E,MAAoB,IAANA,GAO3DwM,EAAE4H,UAAY,WACZ,QAASnX,KAAKzC,GAAKyQ,EAAShO,KAAK6G,EA9lDtB,IA8lDsC7G,KAAKzC,EAAEmC,OAAS,GAQnE6P,EAAEqI,WAAarI,EAAEkE,GAAK,SAAUhM,EAAG1E,GACjC,OAAOuE,EAAQtH,KAAM,IAAIsN,EAAU7F,EAAG1E,IAAM,GAQ9CwM,EAAEsI,oBAAsBtI,EAAEuI,IAAM,SAAUrQ,EAAG1E,GAC3C,OAAqD,KAA7CA,EAAIuE,EAAQtH,KAAM,IAAIsN,EAAU7F,EAAG1E,MAAqB,IAANA,GAO5DwM,EAAErM,MAAQ,WACR,OAAQlD,KAAKf,GAOfsQ,EAAEwI,WAAa,WACb,OAAO/X,KAAKf,EAAI,GAOlBsQ,EAAEyI,WAAa,WACb,OAAOhY,KAAKf,EAAI,GAOlBsQ,EAAE0I,OAAS,WACT,QAASjY,KAAKzC,GAAkB,GAAbyC,KAAKzC,EAAE,IAwB5BgS,EAAE2I,MAAQ,SAAUzQ,EAAG1E,GACrB,IAAI7F,EACA8G,EACA5F,EACA+Z,EACA3Q,EAAIxH,KACJuH,EAAIC,EAAEvI,EAIV,GAFA8D,GADA0E,EAAI,IAAI6F,EAAU7F,EAAG1E,IACf9D,GAEDsI,IAAMxE,EAAG,OAAO,IAAIuK,EAAU6I,KAEnC,GAAI5O,GAAKxE,EAEP,OADA0E,EAAExI,GAAK8D,EACAyE,EAAE0M,KAAKzM,GAGhB,IAAI2Q,EAAK5Q,EAAEX,EAzrDA,GA0rDPwR,EAAK5Q,EAAEZ,EA1rDA,GA2rDPsH,EAAK3G,EAAEjK,EACP6Q,EAAK3G,EAAElK,EAEX,IAAK6a,IAAOC,EAAI,CAEd,IAAKlK,IAAOC,EAAI,OAAOD,GAAM1G,EAAExI,GAAK8D,EAAG0E,GAAK,IAAI6F,EAAUc,EAAK5G,EAAI2O,KAEnE,IAAKhI,EAAG,KAAOC,EAAG,GAEhB,OAAOA,EAAG,IAAM3G,EAAExI,GAAK8D,EAAG0E,GAAK,IAAI6F,EAAUa,EAAG,GAAK3G,EACpC,GAAjBoI,GAAsB,EAAI,GAQ9B,GAJAwI,EAAKpK,EAASoK,GACdC,EAAKrK,EAASqK,GACdlK,EAAKA,EAAGlN,QAEJsG,EAAI6Q,EAAKC,EAAI,CAWf,KAVIF,EAAO5Q,EAAI,IACbA,GAAKA,EACLnJ,EAAI+P,IAEJkK,EAAKD,EACLha,EAAIgQ,GAGNhQ,EAAEmW,UAEGxR,EAAIwE,EAAGxE,IAAK3E,EAAE0G,KAAK,IAExB1G,EAAEmW,eAKF,IAFAvQ,GAAKmU,GAAQ5Q,EAAI4G,EAAGzO,SAAWqD,EAAIqL,EAAG1O,SAAW6H,EAAIxE,EAEhDwE,EAAIxE,EAAI,EAAGA,EAAIiB,EAAGjB,IACrB,GAAIoL,EAAGpL,IAAMqL,EAAGrL,GAAI,CAClBoV,EAAOhK,EAAGpL,GAAKqL,EAAGrL,GAClB,MAUN,GAJIoV,IAAM/Z,EAAI+P,EAAIA,EAAKC,EAAIA,EAAKhQ,EAAGqJ,EAAExI,GAAKwI,EAAExI,IAC5C8D,GAAKiB,EAAIoK,EAAG1O,SAAWxC,EAAIiR,EAAGzO,SAGtB,EAAG,KAAOqD,IAAKoL,EAAGjR,KAAO,GAGjC,IAFA6F,EAAI8K,EAAO,EAEJ7J,EAAIuD,GAAI,CACb,GAAI4G,IAAKnK,GAAKoK,EAAGpK,GAAI,CACnB,IAAK9G,EAAI8G,EAAG9G,IAAMiR,IAAKjR,GAAIiR,EAAGjR,GAAK6F,KAEjCoL,EAAGjR,GACLiR,EAAGnK,IAAM6J,EAGXM,EAAGnK,IAAMoK,EAAGpK,GAId,KAAgB,GAATmK,EAAG,GAASA,EAAG6F,OAAO,EAAG,KAAMqE,GAGtC,OAAKlK,EAAG,GAUD8D,EAAUxK,EAAG0G,EAAIkK,IAPtB5Q,EAAExI,EAAqB,GAAjB2Q,GAAsB,EAAI,EAChCnI,EAAElK,EAAI,CAACkK,EAAEZ,EAAI,GACNY,IA8BX8H,EAAE+I,OAAS/I,EAAE6H,IAAM,SAAU3P,EAAG1E,GAC9B,IAAI0S,EACAxW,EACAuI,EAAIxH,KAGR,OAFAyH,EAAI,IAAI6F,EAAU7F,EAAG1E,IAEhByE,EAAEjK,IAAMkK,EAAExI,GAAKwI,EAAElK,IAAMkK,EAAElK,EAAE,GACvB,IAAI+P,EAAU6I,MACX1O,EAAElK,GAAKiK,EAAEjK,IAAMiK,EAAEjK,EAAE,GACtB,IAAI+P,EAAU9F,IAGJ,GAAf0I,GAGFjR,EAAIwI,EAAExI,EACNwI,EAAExI,EAAI,EACNwW,EAAI3G,EAAItH,EAAGC,EAAG,EAAG,GACjBA,EAAExI,EAAIA,EACNwW,EAAExW,GAAKA,GAEPwW,EAAI3G,EAAItH,EAAGC,EAAG,EAAGyI,IAGnBzI,EAAID,EAAE0Q,MAAMzC,EAAE4B,MAAM5P,KAEblK,EAAE,IAAqB,GAAf2S,IAAkBzI,EAAExI,EAAIuI,EAAEvI,GAClCwI,IAwBT8H,EAAEgJ,aAAehJ,EAAE8H,MAAQ,SAAU5P,EAAG1E,GACtC,IAAIxF,EACAsJ,EACA3J,EACA8G,EACAqK,EACA/Q,EACAkb,EACA3D,EACAC,EACA2D,EACAC,EACAC,EACAC,EACAjE,EAEAnN,EAAIxH,KACJmO,EAAK3G,EAAEjK,EACP6Q,GAAM3G,EAAI,IAAI6F,EAAU7F,EAAG1E,IAAIxF,EAEnC,KAAK4Q,GAAOC,GAAOD,EAAG,IAAOC,EAAG,IAe9B,OAbK5G,EAAEvI,IAAMwI,EAAExI,GAAKkP,IAAOA,EAAG,KAAOC,GAAMA,IAAOA,EAAG,KAAOD,EAC1D1G,EAAElK,EAAIkK,EAAEZ,EAAIY,EAAExI,EAAI,MAElBwI,EAAExI,GAAKuI,EAAEvI,EAEJkP,GAAOC,GAGV3G,EAAElK,EAAI,CAAC,GACPkK,EAAEZ,EAAI,GAHNY,EAAElK,EAAIkK,EAAEZ,EAAI,MAOTY,EAUT,IAPAZ,EAAImH,EAASxG,EAAEX,EA13DJ,IA03DoBmH,EAASvG,EAAEZ,EA13D/B,IA23DXY,EAAExI,GAAKuI,EAAEvI,GACTuZ,EAAMrK,EAAGzO,SACT+Y,EAAMrK,EAAG1O,UAEMkZ,EAAKzK,EAAIA,EAAKC,EAAIA,EAAKwK,EAAI1b,EAAIsb,EAAKA,EAAMC,EAAKA,EAAMvb,GAE/DA,EAAIsb,EAAMC,EAAKG,EAAK,GAAI1b,IAAK0b,EAAG9T,KAAK,IAK1C,IAHA6P,EAAO9G,EA93DK,IAi4DP3Q,EAAIub,IAAOvb,GAAK,GAAI,CAKvB,IAJAK,EAAI,EACJmb,EAAMtK,EAAGlR,GAn4DC,IAo4DVyb,EAAMvK,EAAGlR,GAp4DC,IAo4De,EAEX8G,EAAI9G,GAAbmR,EAAImK,GAAgBxU,EAAI9G,GAK3BK,IADAsX,EAAM6D,GAHN7D,EAAM1G,IAAKE,GAv4DH,MAy4DR/Q,EAAIqb,EAAM9D,GADVC,EAAM3G,EAAGE,GAx4DD,IAw4DiB,GACHqK,GAz4Dd,QA04DoCE,EAAG5U,GAAKzG,GACzCoX,EAAO,IAAMrX,EA34DhB,IA24D+B,GAAKqb,EAAM7D,EAClD8D,EAAG5U,KAAO6Q,EAAMF,EAGlBiE,EAAG5U,GAAKzG,EASV,OANIA,IACAsJ,EAEF+R,EAAG5E,OAAO,EAAG,GAGR/B,EAAUxK,EAAGmR,EAAI/R,IAQ1B0I,EAAEsJ,QAAU,WACV,IAAIrR,EAAI,IAAI8F,EAAUtN,MAEtB,OADAwH,EAAEvI,GAAKuI,EAAEvI,GAAK,KACPuI,GAwBT+H,EAAE2E,KAAO,SAAUzM,EAAG1E,GACpB,IAAI3E,EACAoJ,EAAIxH,KACJuH,EAAIC,EAAEvI,EAIV,GAFA8D,GADA0E,EAAI,IAAI6F,EAAU7F,EAAG1E,IACf9D,GAEDsI,IAAMxE,EAAG,OAAO,IAAIuK,EAAU6I,KAEnC,GAAI5O,GAAKxE,EAEP,OADA0E,EAAExI,GAAK8D,EACAyE,EAAE0Q,MAAMzQ,GAGjB,IAAI2Q,EAAK5Q,EAAEX,EA98DA,GA+8DPwR,EAAK5Q,EAAEZ,EA/8DA,GAg9DPsH,EAAK3G,EAAEjK,EACP6Q,EAAK3G,EAAElK,EAEX,IAAK6a,IAAOC,EAAI,CAEd,IAAKlK,IAAOC,EAAI,OAAO,IAAId,EAAU/F,EAAI,GAGzC,IAAK4G,EAAG,KAAOC,EAAG,GAAI,OAAOA,EAAG,GAAK3G,EAAI,IAAI6F,EAAUa,EAAG,GAAK3G,EAAQ,EAAJD,GAOrE,GAJA6Q,EAAKpK,EAASoK,GACdC,EAAKrK,EAASqK,GACdlK,EAAKA,EAAGlN,QAEJsG,EAAI6Q,EAAKC,EAAI,CAWf,IAVI9Q,EAAI,GACN8Q,EAAKD,EACLha,EAAIgQ,IAEJ7G,GAAKA,EACLnJ,EAAI+P,GAGN/P,EAAEmW,UAEKhN,IAAKnJ,EAAE0G,KAAK,IAEnB1G,EAAEmW,UAQJ,KALAhN,EAAI4G,EAAGzO,SACPqD,EAAIqL,EAAG1O,QAEK,IAAGtB,EAAIgQ,EAAIA,EAAKD,EAAIA,EAAK/P,EAAG2E,EAAIwE,GAEvCA,EAAI,EAAGxE,GACVwE,GAAK4G,IAAKpL,GAAKoL,EAAGpL,GAAKqL,EAAGrL,GAAKwE,GAAKsG,EAAO,EAC3CM,EAAGpL,GAAK8K,IAASM,EAAGpL,GAAK,EAAIoL,EAAGpL,GAAK8K,EAUvC,OAPItG,IACF4G,EAAK,CAAC5G,GAAGG,OAAOyG,KACdkK,GAKGpG,EAAUxK,EAAG0G,EAAIkK,IAmB1B9I,EAAEuJ,UAAYvJ,EAAE4C,GAAK,SAAUA,EAAIT,GACjC,IAAInU,EACAoB,EACAmS,EACAtJ,EAAIxH,KAER,GAAU,MAANmS,GAAcA,MAASA,EAGzB,OAFA7D,EAAS6D,EAAI,EAAGpE,GACN,MAAN2D,EAAYA,EAAK9B,EAAmBtB,EAASoD,EAAI,EAAG,GACjDJ,EAAM,IAAIhE,EAAU9F,GAAI2K,EAAIT,GAGrC,KAAMnU,EAAIiK,EAAEjK,GAAI,OAAO,KAIvB,GAFAoB,EAjiEW,IAgiEXmS,EAAIvT,EAAEmC,OAAS,GACI,EAEfoR,EAAIvT,EAAEuT,GAAI,CAEZ,KAAOA,EAAI,IAAM,EAAGA,GAAK,GAAInS,KAG7B,IAAKmS,EAAIvT,EAAE,GAAIuT,GAAK,GAAIA,GAAK,GAAInS,MAInC,OADIwT,GAAM3K,EAAEX,EAAI,EAAIlI,IAAGA,EAAI6I,EAAEX,EAAI,GAC1BlI,GAYT4Q,EAAEwJ,UAAY,SAAU1K,GAEtB,OADAC,EAASD,GAxjEU,mCAyjEZrO,KAAKqX,MAAM,KAAOhJ,IAe3BkB,EAAEyJ,WAAazJ,EAAE0J,KAAO,WACtB,IAAI3b,EACAqB,EACAX,EACAkb,EACA9a,EACAoJ,EAAIxH,KACJzC,EAAIiK,EAAEjK,EACN0B,EAAIuI,EAAEvI,EACN4H,EAAIW,EAAEX,EACNgN,EAAKlE,EAAiB,EACtBmH,EAAO,IAAIxJ,EAAU,OAEzB,GAAU,IAANrO,IAAY1B,IAAMA,EAAE,GACtB,OAAO,IAAI+P,GAAWrO,GAAKA,EAAI,KAAO1B,GAAKA,EAAE,IAAM4Y,IAAM5Y,EAAIiK,EAAI,KA6BnE,GAtBS,IAHTvI,EAAIwG,KAAKwT,MAAMxJ,EAAQjI,MAGTvI,GAAK,OACjBN,EAAIsP,EAAc1Q,IACXmC,OAASmH,GAAK,GAAK,IAAGlI,GAAK,KAClCM,EAAIwG,KAAKwT,MAAMta,GACfkI,EAAImH,GAAUnH,EAAI,GAAK,IAAMA,EAAI,GAAKA,EAAI,GAS1C7I,EAAI,IAAIsP,EANN3O,EADEM,GAAK,IACH,KAAO4H,GAEXlI,EAAIM,EAAEuP,iBACAvN,MAAM,EAAGtC,EAAEyE,QAAQ,KAAO,GAAKyD,IAKvC7I,EAAI,IAAIsP,EAAUrO,EAAI,IAOpBjB,EAAET,EAAE,GAKN,KAHA0B,GADA4H,EAAI7I,EAAE6I,GACEgN,GACA,IAAG5U,EAAI,KAMb,GAHAb,EAAIJ,EACJA,EAAI8Y,EAAKO,MAAMjZ,EAAE8V,KAAKpF,EAAItH,EAAGpJ,EAAGyV,EAAI,KAEhC5F,EAAc7P,EAAEb,GAAG0D,MAAM,EAAGhC,MAAQN,EAAIsP,EAAcjQ,EAAET,IAAI0D,MAAM,EAAGhC,GAAI,CAS3E,GALIjB,EAAE6I,EAAIA,KAAK5H,EAKN,SAJTN,EAAIA,EAAEsC,MAAMhC,EAAI,EAAGA,EAAI,MAIHia,GAAY,QAALva,GAepB,EAGCA,KAAOA,EAAEsC,MAAM,IAAqB,KAAftC,EAAE8P,OAAO,MAElC6C,EAAMtT,EAAGA,EAAE6I,EAAI8I,EAAiB,EAAG,GACnCrS,GAAKU,EAAEqZ,MAAMrZ,GAAGwZ,GAAGhQ,IAGrB,MArBA,IAAK0R,IACH5H,EAAMlT,EAAGA,EAAEyI,EAAI8I,EAAiB,EAAG,GAE/BvR,EAAEiZ,MAAMjZ,GAAGoZ,GAAGhQ,IAAI,CACpBxJ,EAAII,EACJ,MAIJyV,GAAM,EACN5U,GAAK,EACLia,EAAM,EAgBd,OAAO5H,EAAMtT,EAAGA,EAAE6I,EAAI8I,EAAiB,EAAGC,EAAetS,IAa3DiS,EAAEf,cAAgB,SAAUqF,EAAInC,GAM9B,OALU,MAANmC,IACFvF,EAASuF,EAAI,EAAG9F,GAChB8F,KAGKpC,EAAOzR,KAAM6T,EAAInC,EAAI,IAgB9BnC,EAAE4J,QAAU,SAAUtF,EAAInC,GAMxB,OALU,MAANmC,IACFvF,EAASuF,EAAI,EAAG9F,GAChB8F,EAAKA,EAAK7T,KAAK6G,EAAI,GAGd4K,EAAOzR,KAAM6T,EAAInC,IA6B1BnC,EAAE6J,SAAW,SAAUvF,EAAInC,EAAID,GAC7B,IAAI7M,EACA4C,EAAIxH,KAER,GAAc,MAAVyR,EACQ,MAANoC,GAAcnC,GAAmB,iBAANA,GAC7BD,EAASC,EACTA,EAAK,MACImC,GAAmB,iBAANA,GACtBpC,EAASoC,EACTA,EAAKnC,EAAK,MAEVD,EAASrB,OAEN,GAAqB,iBAAVqB,EAChB,MAAMxR,MAAM0N,EAAiB,2BAA6B8D,GAK5D,GAFA7M,EAAM4C,EAAE2R,QAAQtF,EAAInC,GAEhBlK,EAAEjK,EAAG,CACP,IAAIL,EACAoG,EAAMsB,EAAIyU,MAAM,KAChBC,GAAM7H,EAAOnB,UACbiJ,GAAM9H,EAAOlB,mBACbC,EAAiBiB,EAAOjB,gBAAkB,GAC1CgJ,EAAUlW,EAAI,GACdmW,EAAenW,EAAI,GACnBoW,EAAQlS,EAAEvI,EAAI,EACd0a,EAAYD,EAAQF,EAAQvY,MAAM,GAAKuY,EACvCnY,EAAMsY,EAAUja,OAGpB,GAFI6Z,IAAIrc,EAAIoc,EAAIA,EAAKC,EAAIA,EAAKrc,EAAGmE,GAAOnE,GAEpCoc,EAAK,GAAKjY,EAAM,EAAG,CAIrB,IAHAnE,EAAImE,EAAMiY,GAAMA,EAChBE,EAAUG,EAAUnV,OAAO,EAAGtH,GAEvBA,EAAImE,EAAKnE,GAAKoc,EAAIE,GAAWhJ,EAAiBmJ,EAAUnV,OAAOtH,EAAGoc,GAErEC,EAAK,IAAGC,GAAWhJ,EAAiBmJ,EAAU1Y,MAAM/D,IACpDwc,IAAOF,EAAU,IAAMA,GAG7B5U,EAAM6U,EAAeD,GAAW/H,EAAOhB,kBAAoB,MAAQ8I,GAAM9H,EAAOf,mBAAqB+I,EAAazM,QAAQ,IAAI4M,OAAO,OAASL,EAAK,OAAQ,KAAM,MAAQ9H,EAAOd,wBAA0B,KAAO8I,GAAgBD,EAGnO,OAAQ/H,EAAOpB,QAAU,IAAMzL,GAAO6M,EAAOb,QAAU,KAezDrB,EAAEsK,WAAa,SAAUC,GACvB,IAAItc,EACAuc,EACAC,EACAC,EACApT,EACAqT,EACAvb,EACAwb,EACAC,EACA3E,EACAzX,EACAiB,EACAuI,EAAIxH,KACJmO,EAAK3G,EAAEjK,EAEX,GAAU,MAANuc,MACFnb,EAAI,IAAI2O,EAAUwM,IAEX3C,cAAgBxY,EAAEpB,GAAa,IAARoB,EAAEM,IAAYN,EAAE8U,GAAG/D,IAC/C,MAAMzP,MAAM0N,EAAiB,aAAehP,EAAEwY,YAAc,iBAAmB,oBAAsB1H,EAAQ9Q,IAIjH,IAAKwP,EAAI,OAAO,IAAIb,EAAU9F,GAgB9B,IAfAhK,EAAI,IAAI8P,EAAUoC,GAClB0K,EAAKL,EAAK,IAAIzM,EAAUoC,GACxBsK,EAAKG,EAAK,IAAI7M,EAAUoC,GACxBzQ,EAAIgP,EAAcE,GAGlBtH,EAAIrJ,EAAEqJ,EAAI5H,EAAES,OAAS8H,EAAEX,EAAI,EAC3BrJ,EAAED,EAAE,GAAKuQ,GAAUoM,EAAMrT,EAv0Ed,IAu0E8B,EAv0E9B,GAu0E6CqT,EAAMA,GAC9DJ,GAAMA,GAAMnb,EAAE6X,WAAWhZ,GAAK,EAAIqJ,EAAI,EAAIrJ,EAAI4c,EAAKzb,EACnDub,EAAMlK,EACNA,EAAU,IACVrR,EAAI,IAAI2O,EAAUrO,GAElBkb,EAAG5c,EAAE,GAAK,EAGRkY,EAAI3G,EAAInQ,EAAGnB,EAAG,EAAG,GAEQ,IADzByc,EAAKF,EAAG7F,KAAKuB,EAAE4B,MAAM2C,KACdxD,WAAWsD,IAClBC,EAAKC,EACLA,EAAKC,EACLG,EAAKD,EAAGjG,KAAKuB,EAAE4B,MAAM4C,EAAKG,IAC1BD,EAAKF,EACLzc,EAAImB,EAAEuZ,MAAMzC,EAAE4B,MAAM4C,EAAKzc,IACzBmB,EAAIsb,EAWN,OARAA,EAAKnL,EAAIgL,EAAG5B,MAAM6B,GAAKC,EAAI,EAAG,GAC9BG,EAAKA,EAAGjG,KAAK+F,EAAG5C,MAAM+C,IACtBL,EAAKA,EAAG7F,KAAK+F,EAAG5C,MAAM2C,IACtBG,EAAGlb,EAAImb,EAAGnb,EAAIuI,EAAEvI,EAGhBjB,EAAI8Q,EAAIsL,EAAIJ,EAFZnT,GAAQ,EAEW+I,GAAesI,MAAM1Q,GAAG+O,MAAMC,WAAW1H,EAAIqL,EAAIJ,EAAIlT,EAAG+I,GAAesI,MAAM1Q,GAAG+O,OAAS,EAAI,CAAC6D,EAAIJ,GAAM,CAACG,EAAIJ,GAChI/J,EAAUkK,EACHlc,GAOTuR,EAAE8K,SAAW,WACX,OAAQ5K,EAAQzP,OAelBuP,EAAE+K,YAAc,SAAUnI,EAAIT,GAE5B,OADU,MAANS,GAAY7D,EAAS6D,EAAI,EAAGpE,GACzB0D,EAAOzR,KAAMmS,EAAIT,EAAI,IAe9BnC,EAAExN,SAAW,SAAUgB,GACrB,IAAI6B,EACAjG,EAAIqB,KACJf,EAAIN,EAAEM,EACN4H,EAAIlI,EAAEkI,EAuBV,OArBU,OAANA,EACE5H,GACF2F,EAAM,WACF3F,EAAI,IAAG2F,EAAM,IAAMA,IAEvBA,EAAM,OAGC,MAAL7B,EACF6B,EAAMiC,GAAKgJ,GAAchJ,GAAKiJ,EAAatB,EAAcP,EAActP,EAAEpB,GAAIsJ,GAAK6H,EAAaT,EAActP,EAAEpB,GAAIsJ,EAAG,KACvG,KAAN9D,EAET6B,EAAM8J,EAAaT,GADnBtP,EAAI2S,EAAM,IAAIhE,EAAU3O,GAAIgR,EAAiB9I,EAAI,EAAG+I,IACjBrS,GAAIoB,EAAEkI,EAAG,MAE5CyH,EAASvL,EAAG,EAAG8N,EAASnR,OAAQ,QAChCkF,EAAMmK,EAAYL,EAAaT,EAActP,EAAEpB,GAAIsJ,EAAG,KAAM,GAAI9D,EAAG9D,GAAG,IAGpEA,EAAI,GAAKN,EAAEpB,EAAE,KAAIqH,EAAM,IAAMA,IAG5BA,GAQT2K,EAAEE,QAAUF,EAAE1G,OAAS,WACrB,OAAO4G,EAAQzP,OAGjBuP,EAAE2B,cAAe,EACG,MAAhBrC,GAAsBvB,EAAUb,IAAIoC,GACjCvB,EA8GGsB,IACO,QAAItB,EAAUA,UAAYA,OAK1C,KAFD,aACE,OAAOA,GACR,8BAhmFL,I,6BCFA,MAAMiN,EAAYC,EAAQ,GAAgBlN,UAE1C5Q,EAAQ+d,GAAK,CACXC,QAAS,EACTC,QAAS,EACTC,YAAa,EACbC,YAAa,EACbC,MAAO,EACPC,IAAK,EACLC,IAAK,EACLC,aAAc,GAGhBve,EAAQse,IAAM,CACZE,YAAa,EACbC,WAAY,EACZC,WAAY,EACZC,WAAY,EACZC,aAAc,EACdC,SAAU,EACVC,mBAAoB,GACpBC,gBAAiB,GACjBC,gBAAiB,GACjBC,KAAM,GACNC,IAAK,GACLC,UAAW,GACXC,OAAQ,GACRC,OAAQ,GACRC,KAAM,IAGRtf,EAAQuf,SAAW,CACjBC,KAAM,EACNxM,IAAK,GACLyM,IAAK,GACLC,KAAM,GACNC,MAAO,GACPC,WAAY,IAGd5f,EAAQ6f,OAAS,CACfC,MAAO,GACPC,KAAM,GACNC,KAAM,GACNC,UAAW,IAGbjgB,EAAQkgB,KAAO,CACbF,KAAMze,OAAO,QACb0e,UAAW1e,OAAO,SAClB4e,OAAQ5e,OAAO,UACf6e,MAAO7e,OAAO,SACd8e,OAAQ9e,OAAO,WAGjBvB,EAAQsgB,QAAUvX,KAAK+E,IAAI,EAAG,IAC9B9N,EAAQugB,QAAUxX,KAAK+E,IAAI,EAAG,IAE9B9N,EAAQwgB,cAAgB,QACxBxgB,EAAQygB,QAAU,IAAI5C,GAAW,GACjC7d,EAAQ0gB,IAAM,IAAI7C,EAAU,IAC5B7d,EAAQyf,IAAM,IAAI5B,EAAU,GAE5B7d,EAAQmgB,OAAS,CACf/B,MAAO,EACPuC,OAAQ,EACRtC,IAAK,EACLC,IAAK,EACLJ,YAAa,EACbC,YAAa,I,6BCrEf,MAAM,OAAEvb,GAAWkb,EAAQ,GACrBD,EAAYC,EAAQ,GAAgBlN,UAEpCgQ,EAAY9C,EAAQ,GACpBwC,EAAUM,EAAUN,QACpBC,EAAUK,EAAUL,QAG1BvgB,EAAQ6gB,UAAY,SAAoB3Z,GACtC,IAAIsW,EAAKsD,EAAMhJ,EAIf,OAHAA,EAAgB,IAAT5Q,EAAI,IAAa,EAAI,EAC5BsW,GAAgB,IAATtW,EAAI,KAAc,EACzB4Z,GAAkB,EAAT5Z,EAAI,KAAc,EAAKA,EAAI,GAC/BsW,EAEc,KAARA,EACF1F,GAAQgJ,EAAO,IAAQ,UAEvBhJ,EAAO/O,KAAK+E,IAAI,EAAG0P,EAAM,KAAO,KAAOsD,GAJhC,qBAAPhJ,EAA+BgJ,GAgB1C9gB,EAAQ+gB,uBAAyB,SAAU7Z,GACzC,MAAMvC,EAAMuC,EAAIpD,WAChB,IAAImF,EAAM,GACV,IAAK,IAAIzI,EAAI,EAAGA,EAAImE,EAAKnE,IACvByI,IAZYhH,EAYCiF,EAAI1G,IAXX,GACC,IAAMyB,EAAEoD,SAAS,IAGnBpD,EAAEoD,SAAS,IALpB,IAAgBpD,EAed,OAAO,IAAI4b,EAAU5U,EAAK,KAI5BjJ,EAAQghB,SAAYvc,IAClB,MAAMwE,EAAM,IAAIgY,IACVC,EAAOhgB,OAAOggB,KAAKzc,GACnBzB,EAASke,EAAKle,OACpB,IAAK,IAAIxC,EAAI,EAAGA,EAAIwC,EAAQxC,IAC1ByI,EAAI8G,IAAImR,EAAK1gB,GAAIiE,EAAIyc,EAAK1gB,KAE5B,OAAOyI,GAGTjJ,EAAQmhB,WAAa,CAACC,EAAGC,IAChBD,EAAIb,EAAUc,EAGvBrhB,EAAQshB,WAAa,CAACC,EAAIC,EAAI5E,EAAIC,KAChC,MAAMuE,EAAIphB,EAAQmhB,WAAWI,EAAIC,GAC3BH,EAAIrhB,EAAQmhB,WAAWvE,EAAIC,GAEjC,OAAIuE,EArDgB,QAsDX,IAAIvD,EAAUuD,GAAGzG,MAAM2F,GAAS9I,KAAK6J,GAEpCD,EAAId,EAAWe,GAI3BrhB,EAAQyhB,UAAY,SAAoBva,EAAKkT,GAc3C,MAAMsH,EAAM9e,EAAOY,YAAY,GAC/Bke,EAAI/R,aAAayK,EAAM,GACvB,MAAMuH,EAAID,EAAI9T,aAAa,GAK3B,GAAqB,IAAZ,KAAJ+T,GACH,OAAO,EAOT,IAAIC,EAAOD,GAAK,GAAM,MACtB,MAAMnE,EAAOmE,GAAK,GAAM,IAClBb,EAAW,QAAJa,EASb,GAAKnE,GAAO,KAASA,GAAO,IAC1BoE,IAASpE,EAAM,KAAQ,KAAOsD,GAAQ,QAMjC,MAAKtD,GAAO,KAASA,EAAM,KAchC,OAAO,EAbP,GAAIsD,GAAS,GAAM,IAAMtD,GAAQ,EAC/B,OAAO,EAEToE,GAASd,EAAO,SAAc,IAAMtD,EAiBtC,OADAtW,EAAI4H,cAAc8S,EAAK,IAChB,GAGT5hB,EAAQ6hB,UAAY,SAAUhX,EAAGxE,GAC/B,IAAIyb,EAAOjX,EAAE,GAAG/G,WACZie,EAAO1b,EAAE,GAAGvC,WAEhB,OAAIge,EAAOC,EACF,EAGLA,EAAOD,GACD,EAGHjX,EAAE,GAAGD,QAAQvE,EAAE,KAIxBrG,EAAQgiB,eAAkBlX,GACX,IAANA,GAAY,EAAIA,EAAI,EAG7B9K,EAAQiiB,aAAgBhgB,IACtB,IAAIigB,EAAQ,EAGZ,GAAIjgB,KAAOA,EAAKA,EAAI,GAClB,OAAOA,EAGT,KAAa,IAANA,GACLA,IAAM,EACNigB,GAAS,EAGX,OAAO,GAAKA,I,6BC1Kd,IAAIb,EAEJA,EAAI,WACF,OAAO/d,KADL,GAIJ,IAEE+d,EAAIA,GAAK,IAAIc,SAAS,cAAb,GACT,MAAOhY,GAEe,iBAAX/J,SAAqBihB,EAAIjhB,QAMtCH,EAAOD,QAAUqhB,G,6BCjBjBrhB,EAAQiH,KAAO,SAAUnC,EAAQ0C,EAAQ4a,EAAMC,EAAMC,GACnD,IAAInY,EAAGvJ,EACH2hB,EAAgB,EAATD,EAAaD,EAAO,EAC3BG,GAAQ,GAAKD,GAAQ,EACrBE,EAAQD,GAAQ,EAChBE,GAAS,EACTliB,EAAI4hB,EAAOE,EAAS,EAAI,EACxBxhB,EAAIshB,GAAQ,EAAI,EAChB7f,EAAIuC,EAAO0C,EAAShH,GAMxB,IALAA,GAAKM,EACLqJ,EAAI5H,GAAK,IAAMmgB,GAAS,EACxBngB,KAAOmgB,EACPA,GAASH,EAEFG,EAAQ,EAAGvY,EAAQ,IAAJA,EAAUrF,EAAO0C,EAAShH,GAAIA,GAAKM,EAAG4hB,GAAS,GAMrE,IAJA9hB,EAAIuJ,GAAK,IAAMuY,GAAS,EACxBvY,KAAOuY,EACPA,GAASL,EAEFK,EAAQ,EAAG9hB,EAAQ,IAAJA,EAAUkE,EAAO0C,EAAShH,GAAIA,GAAKM,EAAG4hB,GAAS,GAErE,GAAU,IAANvY,EACFA,EAAI,EAAIsY,MACH,IAAItY,IAAMqY,EACf,OAAO5hB,EAAI6Y,IAAqBvJ,KAAd3N,GAAK,EAAI,GAE3B3B,GAAQmI,KAAK+E,IAAI,EAAGuU,GACpBlY,GAAQsY,EAGV,OAAQlgB,GAAK,EAAI,GAAK3B,EAAImI,KAAK+E,IAAI,EAAG3D,EAAIkY,IAG5CriB,EAAQsE,MAAQ,SAAUQ,EAAQrD,EAAO+F,EAAQ4a,EAAMC,EAAMC,GAC3D,IAAInY,EAAGvJ,EAAGC,EACN0hB,EAAgB,EAATD,EAAaD,EAAO,EAC3BG,GAAQ,GAAKD,GAAQ,EACrBE,EAAQD,GAAQ,EAChBG,EAAc,KAATN,EAActZ,KAAK+E,IAAI,GAAI,IAAM/E,KAAK+E,IAAI,GAAI,IAAM,EACzDtN,EAAI4hB,EAAO,EAAIE,EAAS,EACxBxhB,EAAIshB,EAAO,GAAK,EAChB7f,EAAId,EAAQ,GAAe,IAAVA,GAAe,EAAIA,EAAQ,EAAI,EAAI,EAqCxD,IApCAA,EAAQsH,KAAK8Q,IAAIpY,GAEb+E,MAAM/E,IAAUA,IAAUyO,KAC5BtP,EAAI4F,MAAM/E,GAAS,EAAI,EACvB0I,EAAIqY,IAEJrY,EAAIpB,KAAK6F,MAAM7F,KAAK6Z,IAAInhB,GAASsH,KAAK8Z,KAElCphB,GAASZ,EAAIkI,KAAK+E,IAAI,GAAI3D,IAAM,IAClCA,IACAtJ,GAAK,IAILY,GADE0I,EAAIsY,GAAS,EACNE,EAAK9hB,EAEL8hB,EAAK5Z,KAAK+E,IAAI,EAAG,EAAI2U,IAGpB5hB,GAAK,IACfsJ,IACAtJ,GAAK,GAGHsJ,EAAIsY,GAASD,GACf5hB,EAAI,EACJuJ,EAAIqY,GACKrY,EAAIsY,GAAS,GACtB7hB,GAAKa,EAAQZ,EAAI,GAAKkI,KAAK+E,IAAI,EAAGuU,GAClClY,GAAQsY,IAER7hB,EAAIa,EAAQsH,KAAK+E,IAAI,EAAG2U,EAAQ,GAAK1Z,KAAK+E,IAAI,EAAGuU,GACjDlY,EAAI,IAIDkY,GAAQ,EAAGvd,EAAO0C,EAAShH,GAAS,IAAJI,EAAUJ,GAAKM,EAAGF,GAAK,IAAKyhB,GAAQ,GAK3E,IAHAlY,EAAIA,GAAKkY,EAAOzhB,EAChB2hB,GAAQF,EAEDE,EAAO,EAAGzd,EAAO0C,EAAShH,GAAS,IAAJ2J,EAAU3J,GAAKM,EAAGqJ,GAAK,IAAKoY,GAAQ,GAE1Ezd,EAAO0C,EAAShH,EAAIM,IAAU,IAAJyB,I,8BCxF5B,YAEA,MAAM,OAAEK,GAAWkb,EAAQ,GACrBrb,EAAUqb,EAAQ,GAClBD,EAAYC,EAAQ,GAAgBlN,UAEpCkS,EAAShF,EAAQ,IACjBiF,EAAQjF,EAAQ,GAChBjd,EAAIid,EAAQ,GACZkF,EAASlF,EAAQ,GACjBmF,EAASnF,EAAQ,IACjB,IAAEoF,GAAQpF,EAAQ,GAKxB,MAAMqF,EAKJrQ,YAAasQ,KACXA,EAAOA,GAAQ,IAELhe,MAAQge,EAAKhe,KAAO,MAC5Bge,EAAKhe,KAAO,MAGZge,EAAKhe,KAAO2d,EAAMd,aAAamB,EAAKhe,MAItC9B,KAAK+f,MAAQ,IAAI1f,YAAYyf,EAAKhe,MAClC9B,KAAKggB,OAAS,IAAIpgB,WAAWI,KAAK+f,OAClC/f,KAAKigB,QAAU3gB,EAAOa,KAAKH,KAAK+f,OAEhC/f,KAAKkgB,SAGLlgB,KAAKmgB,WAAaviB,OAAOwiB,OAAO,CAC9BC,EAAI5e,GAAQ,IAAI6e,KAAK7e,GACrB8e,EAAI9e,GAAQ,IAAI6e,KAAW,IAAN7e,GACrB+e,EAAI/e,GAAQge,EAAMhC,uBAAuBhc,GACzCgf,EAAIhf,GAAQlE,EAAE4f,QAAQjF,MAAMuH,EAAMhC,uBAAuBhc,IACzDif,EAAI5P,GAEKvT,EAAE6f,IAAI5S,IAAIsG,EAAE,IAAIuG,MAAMvG,EAAE,IAEjC6P,EAAI7P,GAEKvT,EAAE4e,IAAI3R,IAAIsG,EAAE,IAAIuG,MAAMvG,EAAE,IAEjC8P,GAAKnf,GAAQ,IAAIme,EAAIne,GACrBof,GAAKpf,GAAQ,IAAImY,OAAOnY,IACvBqe,EAAKgB,MAGR9gB,KAAKwf,OAASA,EAAO9Y,EAAQ,CAE3B4Y,IAAKyB,QAAQzB,IAAI5gB,KAAKqiB,SACtBC,QAAShhB,KAAKghB,QAAQtiB,KAAKsB,MAC3BihB,UAAWjhB,KAAKihB,UAAUviB,KAAKsB,MAC/BkhB,aAAclhB,KAAKkhB,aAAaxiB,KAAKsB,MACrCmhB,UAAWnhB,KAAKmhB,UAAUziB,KAAKsB,MAC/BohB,aAAcphB,KAAKohB,aAAa1iB,KAAKsB,MACrCqhB,UAAWrhB,KAAKqhB,UAAU3iB,KAAKsB,MAC/BshB,gBAAiBthB,KAAKshB,gBAAgB5iB,KAAKsB,MAC3CuhB,gBAAiBvhB,KAAKuhB,gBAAgB7iB,KAAKsB,MAC3CwhB,SAAUxhB,KAAKwhB,SAAS9iB,KAAKsB,MAC7ByhB,UAAWzhB,KAAKyhB,UAAU/iB,KAAKsB,MAC/B0hB,cAAe1hB,KAAK0hB,cAAchjB,KAAKsB,MACvC2hB,SAAU3hB,KAAK2hB,SAASjjB,KAAKsB,MAC7B4hB,aAAc5hB,KAAK4hB,aAAaljB,KAAKsB,MACrC6hB,gBAAiB7hB,KAAK6hB,gBAAgBnjB,KAAKsB,MAC3C8hB,QAAS9hB,KAAK8hB,QAAQpjB,KAAKsB,MAC3B+hB,WAAY/hB,KAAK+hB,WAAWrjB,KAAKsB,MACjCgiB,eAAgBhiB,KAAKgiB,eAAetjB,KAAKsB,MACzCiiB,oBAAqBjiB,KAAKiiB,oBAAoBvjB,KAAKsB,MACnDkiB,sBAAuBliB,KAAKkiB,sBAAsBxjB,KAAKsB,MACvDmiB,sBAAuBniB,KAAKmiB,sBAAsBzjB,KAAKsB,MACvDoiB,gBAAiBpiB,KAAKoiB,gBAAgB1jB,KAAKsB,MAC3CqiB,qBAAsBriB,KAAKqiB,qBAAqB3jB,KAAKsB,MACrDsiB,uBAAwBtiB,KAAKsiB,uBAAuB5jB,KAAKsB,MACzDuiB,uBAAwBviB,KAAKuiB,uBAAuB7jB,KAAKsB,MACzDwiB,eAAgBxiB,KAAKwiB,eAAe9jB,KAAKsB,MACzCyiB,oBAAqBziB,KAAKyiB,oBAAoB/jB,KAAKsB,MACnD0iB,eAAgB1iB,KAAK0iB,eAAehkB,KAAKsB,MACzC2iB,oBAAqB3iB,KAAK2iB,oBAAoBjkB,KAAKsB,MACnD4iB,qBAAsB5iB,KAAK4iB,qBAAqBlkB,KAAKsB,MACrD6iB,kBAAmB7iB,KAAK6iB,kBAAkBnkB,KAAKsB,MAC/C8iB,aAAc9iB,KAAK8iB,aAAapkB,KAAKsB,MACrC+iB,cAAe/iB,KAAK+iB,cAAcrkB,KAAKsB,MACvCgjB,cAAehjB,KAAKgjB,cAActkB,KAAKsB,MACvCijB,UAAWjjB,KAAKijB,UAAUvkB,KAAKsB,OAC9BA,KAAK+f,OAGV,aACE,OAAO/f,KAAKkjB,SAASxjB,OAGvB,qBACE,OAAOM,KAAKkjB,SAASljB,KAAKmjB,OAAS,GAGrC,WACE,OAAOnjB,KAAKojB,eAAeC,IAI7BC,eACE,IAAItkB,EAAIgB,KAAKkjB,SAAShR,MAEtB,GAAIlT,EAAEU,OAAS,EACb,MAAM,IAAIO,MAAJ,kBAAqBjB,EAAEU,OAAvB,cAGR,OAAQV,EAAE0C,MACR,KAAKnE,EAAEsf,OAAO7B,IACZhb,KAAKujB,MACHvjB,KAAKwjB,UAAUxkB,EAAEqkB,IAAI,GAAIrkB,EAAEqkB,IAAI,KAEjC,MACF,KAAK9lB,EAAEsf,OAAOjC,YACZ5a,KAAKujB,MAAMvjB,KAAKyjB,iBAAiBzkB,EAAEqkB,IAAKrkB,EAAEU,SAC1C,MACF,KAAKnC,EAAEsf,OAAOhC,YACZ7a,KAAKujB,MAAMvjB,KAAK0jB,iBAAiB1kB,EAAEqkB,IAAKrkB,EAAEU,SAC1C,MACF,KAAKnC,EAAEsf,OAAO9B,IACZ,GAAI/b,EAAE2kB,OAAS,EAAI,EACjB,MAAM,IAAI1jB,MAAM,qCAElBD,KAAKujB,MAAMvjB,KAAK4jB,UAAU5kB,EAAEqkB,IAAKrkB,EAAEU,SACnC,MACF,KAAKnC,EAAEsf,OAAOQ,OACZ,GAAIre,EAAE2kB,OAAS,EAAI,EACjB,MAAM,IAAI1jB,MAAM,qCAElBD,KAAKujB,MAAMvjB,KAAK6jB,aAAa7kB,EAAEqkB,IAAKrkB,EAAEU,SACtC,MACF,KAAKnC,EAAEsf,OAAO/B,MACZ9a,KAAKujB,MAAMvjB,KAAK8jB,YAAY9kB,EAAEqkB,IAAKrkB,EAAEU,SAMrCM,KAAKojB,gBAAkBpjB,KAAKojB,eAAe1hB,OAASnE,EAAEsf,OAAO7B,KAC/Dhb,KAAK+jB,OAKTA,OACE,MAAM/kB,EAAIgB,KAAKojB,eAGXpkB,EAAEU,OAAS,IAIfV,EAAEU,SAGe,IAAbV,EAAEU,QACJM,KAAKsjB,gBAKTC,MAAO9hB,EAAKuiB,GACV,MAAMhlB,EAAIgB,KAAKojB,eAGf,OAFApkB,EAAE2kB,SAEM3kB,EAAE0C,MACR,KAAKnE,EAAEsf,OAAO/B,MACd,KAAKvd,EAAEsf,OAAOjC,YACd,KAAKrd,EAAEsf,OAAOhC,YACR7b,EAAEU,QAAU,EACdM,KAAKikB,KAAKjkB,KAAKikB,KAAKvkB,OAASV,EAAEU,QAAU+B,EAEzCzB,KAAKikB,KAAKnf,KAAKrD,GAEjBzB,KAAK+jB,OACL,MACF,KAAKxmB,EAAEsf,OAAOQ,OACI,MAAZre,EAAEklB,QACJlkB,KAAKikB,KAAKjlB,EAAEklB,QAAUziB,EACtBzC,EAAEklB,OAAS,KACXlkB,KAAK+jB,SAEL/kB,EAAEklB,OAASziB,EAEa,iBAAbzC,EAAEklB,SAEXllB,EAAE0C,KAAOnE,EAAEsf,OAAO9B,IAClB/b,EAAEqkB,IAAM5D,EAAM/B,SAAS1e,EAAEqkB,OAG7B,MACF,KAAK9lB,EAAEsf,OAAO9B,IACI,MAAZ/b,EAAEklB,QACJlkB,KAAKikB,KAAKxX,IAAIzN,EAAEklB,OAAQziB,GACxBzC,EAAEklB,OAAS,KACXlkB,KAAK+jB,QAEL/kB,EAAEklB,OAASziB,EAEb,MACF,KAAKlE,EAAEsf,OAAO7B,IACZhb,KAAKikB,KAAKnf,KAAKrD,GACVuiB,GACHhkB,KAAK+jB,OAEP,MACF,QACE,MAAM,IAAI9jB,MAAM,wBAKtBkkB,cAAehjB,EAAKO,EAAML,GACxBrB,KAAKkjB,SAASljB,KAAKmjB,QAAU,CAC3BzhB,KAAMA,EACNhC,OAAQ2B,EACRgiB,IAAKliB,EACLwiB,OAAQ,EACRO,OAAQ,MAKZhE,SACElgB,KAAKokB,KAAO,GACZpkB,KAAKkjB,SAAW,CAAC,CACfxhB,KAAMnE,EAAEsf,OAAO/B,MACfpb,QAAS,EACT2jB,IAAKrjB,KAAKokB,KACVT,OAAQ,EACRO,OAAQ,OAKZV,UAAWa,EAAWlmB,GACpB,MAAMmmB,EAAMtkB,KAAKmgB,WAAWkE,GAE5B,OAAKC,EAIEA,EAAInmB,GAHF,IAAIwhB,EAAO0E,EAAWlmB,GAMjCylB,UAAWziB,EAAKE,GACd,OAAOF,EAGT0iB,aAAc1iB,EAAKE,GACjB,OAAOF,EAGT2iB,YAAaxgB,EAAKjC,GAChB,OAAOiC,EAGTmgB,iBAAkBc,EAAKljB,GACrB,OAAO/B,EAAOoI,OAAO6c,GAGvBC,yBAA0BliB,EAAOC,GAC/B,OAAID,IAAUC,EACLjD,EAAOkH,MAAM,GAGflH,EAAOa,KAAKH,KAAK+f,MAAM9e,MAAMqB,EAAOC,IAG7CkiB,UAAWhjB,GACT,OAAOA,EAGTijB,YAAa5G,EAAGC,GACd,OAAO0B,EAAM5B,WAAWC,EAAGC,GAG7B4G,YAAa1G,EAAIC,EAAI5E,EAAIC,GACvB,OAAOkG,EAAMzB,WAAWC,EAAIC,EAAI5E,EAAIC,GAGtCqL,YAAanjB,GACX,OAAOA,EAGTojB,kBAAmBtd,EAAGxE,EAAGxF,EAAGC,GAC1B,OAAO2B,EAAQwE,KAAK,CAAC4D,EAAGxE,EAAGxF,EAAGC,GAAI,GAAG,EAAO,GAAI,GAGlDsnB,kBAAmBvd,EAAGxE,EAAGxF,EAAGC,EAAGqJ,EAAGiX,EAAGC,EAAGgH,GACtC,OAAO5lB,EAAQwE,KAAK,CAAC4D,EAAGxE,EAAGxF,EAAGC,EAAGqJ,EAAGiX,EAAGC,EAAGgH,GAAI,GAAG,EAAO,GAAI,GAG9DC,eAAgBlH,EAAGC,GACjB,OAAQ,EAAI0B,EAAM5B,WAAWC,EAAGC,GAGlCkH,eAAgBhH,EAAIC,EAAI5E,EAAIC,GAC1B,MAAMuE,EAAI2B,EAAM5B,WAAWI,EAAIC,GACzBH,EAAI0B,EAAM5B,WAAWvE,EAAIC,GAE/B,OAAIuE,EAAIvgB,EAAE2f,cACD3f,EAAE4f,QAAQjF,MAAM,IAAIqC,EAAUuD,GAAGzG,MAAM9Z,EAAEyf,SAAS9I,KAAK6J,KAGxD,GAAMD,EAAIvgB,EAAEyf,QAAWe,GAGjCmH,aACE,OAAO,EAGTC,cACE,OAAO,EAGTC,aACE,OAAO,KAGTC,mBAIAC,iBACE,OAAO1Y,IAGT2Y,oBACE,OAAQ3Y,IAGV4Y,YACE,OAAOrP,IAGTsP,eACE,OAAO,IAGT/B,iBAAkBa,EAAKljB,GACrB,OAAOkjB,EAAIlc,KAAK,IAGlBqd,yBAA0BpjB,EAAOC,GAC/B,OAAID,IAAUC,EACL,GAGFvC,KAAKigB,QAAQle,SAAS,OAAQO,EAAOC,GAG9CojB,uBAAwBlkB,GACtB,OAAO,IAAIie,EAAOje,GAKpBuf,QAASvf,GACPzB,KAAKujB,MAAMvjB,KAAKykB,UAAUhjB,IAG5Bwf,UAAWnD,EAAGC,GACZ/d,KAAKujB,MAAMvjB,KAAK0kB,YAAY5G,EAAGC,IAGjCoD,UAAWlD,EAAIC,EAAI5E,EAAIC,GACrBvZ,KAAKujB,MAAMvjB,KAAK2kB,YAAY1G,EAAIC,EAAI5E,EAAIC,IAG1C8H,UAAW5f,GACTzB,KAAKujB,MAAMvjB,KAAK4kB,YAAYnjB,IAG9B6f,gBAAiB/Z,EAAGxE,EAAGxF,EAAGC,GACxBwC,KAAKujB,MAAMvjB,KAAK6kB,kBAAkBtd,EAAGxE,EAAGxF,EAAGC,IAG7C+jB,gBAAiBha,EAAGxE,EAAGxF,EAAGC,EAAGqJ,EAAGiX,EAAGC,EAAGgH,GACpC/kB,KAAKujB,MAAMvjB,KAAK8kB,kBAAkBvd,EAAGxE,EAAGxF,EAAGC,EAAGqJ,EAAGiX,EAAGC,EAAGgH,IAGzD7D,aAAcpD,EAAGC,GACf/d,KAAKujB,MAAMvjB,KAAKglB,eAAelH,EAAGC,IAGpCqD,aAAcnD,EAAIC,EAAI5E,EAAIC,GACxBvZ,KAAKujB,MAAMvjB,KAAKilB,eAAehH,EAAIC,EAAI5E,EAAIC,IAG7CiI,WACExhB,KAAKujB,MAAMvjB,KAAKklB,cAGlBzD,YACEzhB,KAAKujB,MAAMvjB,KAAKmlB,eAGlBxD,WACE3hB,KAAKujB,MAAMvjB,KAAKolB,cAGlB1D,gBACE1hB,KAAKujB,MAAMvjB,KAAKqlB,mBAGlBzD,eACE5hB,KAAKujB,MAAMvjB,KAAKslB,kBAGlBzD,kBACE7hB,KAAKujB,MAAMvjB,KAAKulB,qBAGlBzD,UACE9hB,KAAKujB,MAAMvjB,KAAKwlB,aAGlBzD,aACE/hB,KAAKujB,MAAMvjB,KAAKylB,gBAGlBzD,iBACEhiB,KAAKmkB,cAAc,GAAI5mB,EAAEsf,OAAO/B,OAAQ,GAG1CmH,oBAAqB5gB,GACnBrB,KAAK4lB,uBAAuBvkB,GAG9B6gB,sBAAuB2D,EAAMC,GAC3B,MAAMzkB,EAAMoe,EAAM5B,WAAWgI,EAAMC,GACnC9lB,KAAK4lB,uBAAuBvkB,GAG9B8gB,sBAAuB0D,EAAMC,EAAMC,EAAMC,GACvC,MAAM3kB,EAAMoe,EAAMzB,WAAW6H,EAAMC,EAAMC,EAAMC,GAC/ChmB,KAAK4lB,uBAAuBvkB,GAG9B+gB,kBACEpiB,KAAKimB,yBAAyB,GAGhC5D,qBAAsBhhB,GACpBrB,KAAKimB,wBAAwB5kB,GAG/BihB,uBAAwBuD,EAAMC,GAC5B,MAAMzkB,EAAMoe,EAAM5B,WAAWgI,EAAMC,GACnC9lB,KAAKimB,wBAAwB5kB,GAG/BkhB,uBAAwBsD,EAAMC,EAAMC,EAAMC,GACxC,MAAM3kB,EAAMoe,EAAMzB,WAAW6H,EAAMC,EAAMC,EAAMC,GAC/ChmB,KAAKimB,wBAAwB5kB,GAG/BohB,sBACEziB,KAAKkjB,SAASljB,KAAKmjB,QAAU,CAC3BzhB,KAAMnE,EAAEsf,OAAOjC,YACflb,QAAS,EACT2jB,IAAK,GACLM,OAAQ,EACRO,OAAQ,MAIZ1B,eAAgBlgB,EAAOC,GACrBvC,KAAKujB,MAAMvjB,KAAKwkB,yBAAyBliB,EAAOC,IAGlDogB,sBACE3iB,KAAKkjB,SAASljB,KAAKmjB,QAAU,CAC3BzhB,KAAMnE,EAAEsf,OAAOhC,YACfnb,QAAS,EACT2jB,IAAK,GACLM,OAAQ,EACRO,OAAQ,MAIZxB,eAAgBpgB,EAAOC,GACrBvC,KAAKujB,MAAMvjB,KAAK0lB,yBAAyBpjB,EAAOC,IAGlDqgB,qBAAsBnhB,GACpBzB,KAAKujB,MAAMvjB,KAAK2lB,uBAAuBlkB,IAGzCqhB,aAAcoD,GACZlmB,KAAKkjB,SAASljB,KAAKmjB,QAAU,CAC3BzhB,KAAMnE,EAAEsf,OAAO7B,IACftb,OAAQ,EACR2jB,IAAK,CAAC6C,IAIVnD,cAAejF,EAAGC,GAChB/d,KAAK8iB,aAAarD,EAAM5B,WAAWC,EAAGC,IAGxCiF,cAAe/E,EAAIC,EAAI5E,EAAIC,GACzBvZ,KAAK8iB,aAAarD,EAAMzB,WAAWC,EAAIC,EAAI5E,EAAIC,IAGjDsJ,kBAAmBwB,GACjBrkB,KAAKujB,MAAMvjB,KAAKwjB,UAAUa,IAG5BpB,YACE,GAAIjjB,KAAKojB,eAAe1jB,QAAU,EAChC,MAAM,IAAIO,MAAM,oBAGlBD,KAAKsjB,eAGP2C,wBAAyB5kB,GACX,IAARA,EAKJrB,KAAKmkB,cAAc,GAAI5mB,EAAEsf,OAAOQ,OAAQhc,GAJtCrB,KAAKujB,MAAMvjB,KAAK6jB,aAAa,KAOjC+B,uBAAwBvkB,GACV,IAARA,EAKJrB,KAAKmkB,cAAc,IAAIrb,MAAMzH,GAAM9D,EAAEsf,OAAO/B,MAAOzZ,GAJjDrB,KAAKujB,MAAMvjB,KAAK8jB,YAAY,KAOhCqC,QAASC,GACP,GAAyB,IAArBA,EAAM5lB,WACR,MAAM,IAAIP,MAAM,mBAGlBD,KAAKkgB,SACLlgB,KAAKggB,OAAOvT,IAAI2Z,GAChB,MAAM1Z,EAAO1M,KAAKwf,OAAO6G,MAAMD,EAAM5lB,YAErC,GAAIR,KAAKmjB,OAAS,EAAG,CACnB,KAAsC,IAA/BnjB,KAAKojB,eAAe1jB,QACzBM,KAAKsjB,eAEP,GAAItjB,KAAKmjB,OAAS,EAChB,MAAM,IAAIljB,MAAM,0BAIpB,GAAIyM,EAAO,EACT,MAAM,IAAIzM,MAAM,mBAGlB,GAAyB,IAArBD,KAAKokB,KAAK1kB,OACZ,MAAM,IAAIO,MAAM,mBAMpBqmB,YAAaF,GAGX,OAFApmB,KAAKmmB,QAAQC,GAENpmB,KAAKokB,KAAK,GAGnBmC,UAAWH,GAGT,OAFApmB,KAAKmmB,QAAQC,GAENpmB,KAAKokB,KAUd,cAAegC,EAAOI,GAMpB,MALqB,iBAAVJ,IACTA,EAAQ9mB,EAAOa,KAAKimB,EAAOI,GAAO,QAGxB,IAAI3G,EAAQ,CAAE/d,KAAMskB,EAAM1mB,SAC3B4mB,YAAYF,GAUzB,iBAAkBA,EAAOI,GAMvB,MALqB,iBAAVJ,IACTA,EAAQ9mB,EAAOa,KAAKimB,EAAOI,GAAO,QAGxB,IAAI3G,EAAQ,CAAE/d,KAAMskB,EAAM1mB,SAC3B6mB,UAAUH,IAIzBvG,EAAQyG,YAAczG,EAAQ4G,OAE9B9pB,EAAOD,QAAUmjB,I,8CC5mBjB,MAAMvC,EAAY9C,EAAQ,GACpBC,EAAK6C,EAAU7C,GACf8B,EAASe,EAAUf,OACnBK,EAAOU,EAAUV,KAKvB,MAAM8C,EAMJlQ,YAAarR,GACX,GAAqB,iBAAVA,EACT,MAAM,IAAI8B,MAAM,+BAAkC9B,GAEpD,GAAKA,EAAQ,GAAOA,EAAQ,MAAkB,EAARA,KAAeA,EACnD,MAAM,IAAI8B,MAAM,2CAA6C9B,GAE/D6B,KAAK7B,MAAQA,EAQf4D,WACE,MAAO,UAAY/B,KAAK7B,MAAQ,IAQlC+J,UACE,MAAO,UAAYlI,KAAK7B,MAAQ,IASlCuoB,WAAYC,GACV,OAAOA,EAAIC,SAAS5mB,KAAK7B,MAAOsc,EAAGQ,cASrC,gBAAiB9Z,GACf,OAAOA,aAAeue,EAaxB,cAAeje,EAAKolB,GAIlB,OAHiB,MAAbA,IACFA,GAAY,GAENplB,GACN,KAAK8a,EAAOC,MACV,OAAO,EACT,KAAKD,EAAOE,KACV,OAAO,EACT,KAAKF,EAAOG,KACV,OAAImK,EACK,KAEAjK,EAAKF,KAEhB,KAAKH,EAAOI,UACV,OAAIkK,OACF,EAEOjK,EAAKD,UAEhB,KAAM,EACJ,IAAKkK,EACH,MAAM,IAAI5mB,MAAM,iBAElB,OAAO2c,EAAKE,MACd,QACE,OAAO,IAAI4C,EAAOje,KAK1B9E,EAAOD,QAAUgjB,G,6BCnGjB,MAAMC,EAQJnQ,YAAa0W,EAAK/nB,EAAO2oB,GAIvB,GAHA9mB,KAAKkmB,IAAMA,EACXlmB,KAAK7B,MAAQA,EACb6B,KAAK8mB,IAAMA,EACa,iBAAb9mB,KAAKkmB,IACd,MAAM,IAAIjmB,MAAM,4BAA+BD,KAAKkmB,IAAO,KAE7D,GAAKlmB,KAAKkmB,IAAM,IAAmB,EAAXlmB,KAAKkmB,OAAalmB,KAAKkmB,IAC7C,MAAM,IAAIjmB,MAAM,mCAAqCD,KAAKkmB,KAS9DnkB,WACE,gBAAU/B,KAAKkmB,IAAf,YAAsBa,KAAKC,UAAUhnB,KAAK7B,OAA1C,KASFuoB,WAAYC,GAEV,OADAA,EAAIM,SAASjnB,KAAKkmB,KACXS,EAAIO,QAAQlnB,KAAK7B,OAc1BgpB,QAASC,GACP,IAAIC,EAAIvJ,EAER,GAAiB,mBADjBA,EAAkB,MAAdsJ,EAAqBA,EAAWpnB,KAAKkmB,UAAOzlB,IAG7B,mBADjBqd,EAAI6B,EAAO,OAAS3f,KAAKkmB,MAEvB,OAAOlmB,KAGX,IACE,OAAO8d,EAAEzgB,KAAKsiB,EAAQ3f,KAAK7B,OAC3B,MAAOmpB,GAGP,OAFAD,EAAKC,EACLtnB,KAAK8mB,IAAMO,EACJrnB,OAKbrD,EAAOD,QAAUijB,G,6BC3EjB,MAAM,qBACJ4H,EAAoB,OACpB9V,EAAM,gBACN+V,EAAe,YACfC,GACE,EAAQ,IAENC,EAAW,EAAQ,IAEzB/qB,EAAOD,QAAU,CACfkjB,IAAK2H,EACLC,kBACA/V,SACAiW,WACAD,gB,6BCdF,MAAMA,EAAcE,KAAKC,SAAWD,KAAKC,SAASC,SAAW,KAAOF,KAAKC,SAASE,KAAO,GACnFlI,EAAM+H,KAAK/H,IAqJjBjjB,EAAOD,QAAU,CACf6qB,qBApJF,MACE,YAAYQ,EAAM,GAAIpT,EAAO8S,GAC3BznB,KAAKgoB,MAAQ,IAAIpI,EAAImI,EAAKpT,GAC1B3U,KAAKioB,KAAOjoB,KAAKkoB,SAAWloB,KAAKoR,OACjCpR,KAAKmoB,KAAOnoB,KAAKooB,UAAYpoB,KAAKqoB,SAAWroB,KAAKooB,SAAW,IAAMpoB,KAAKqoB,SAAW,KACnFroB,KAAKsoB,MAAQtoB,KAAKoR,QAAUpR,KAAKoR,OAAOmX,WAAW,KAAOvoB,KAAKoR,OAAOnQ,MAAM,GAAK,KAGnF,WACE,OAAOjB,KAAKgoB,MAAMQ,KAGpB,WACE,OAAOxoB,KAAKgoB,MAAMF,KAGpB,eACE,OAAO9nB,KAAKgoB,MAAMS,SAGpB,WACE,OAAOzoB,KAAKgoB,MAAMU,KAGpB,aACE,OAAO1oB,KAAKgoB,MAAMW,OAGpB,eACE,OAAO3oB,KAAKgoB,MAAMK,SAGpB,eACE,OAAOroB,KAAKgoB,MAAME,SAGpB,WACE,OAAOloB,KAAKgoB,MAAMY,KAGpB,eACE,OAAO5oB,KAAKgoB,MAAMH,SAGpB,aACE,OAAO7nB,KAAKgoB,MAAM5W,OAGpB,mBACE,OAAOpR,KAAKgoB,MAAMa,aAGpB,eACE,OAAO7oB,KAAKgoB,MAAMI,SAGpB,SAASI,GACPxoB,KAAKgoB,MAAMQ,KAAOA,EAGpB,SAASV,GACP9nB,KAAKgoB,MAAMF,KAAOA,EAGpB,aAAaW,GACXzoB,KAAKgoB,MAAMS,SAAWA,EAGxB,SAASC,GACP1oB,KAAKgoB,MAAMU,KAAOA,EAGpB,WAAWC,GACT3oB,KAAKgoB,MAAMW,OAASA,EAGtB,aAAaN,GACXroB,KAAKgoB,MAAMK,SAAWA,EAGxB,aAAaH,GACXloB,KAAKgoB,MAAME,SAAWA,EAGxB,SAASU,GACP5oB,KAAKgoB,MAAMY,KAAOA,EAGpB,aAAaf,GACX7nB,KAAKgoB,MAAMH,SAAWA,EAGxB,WAAWzW,GACTpR,KAAKgoB,MAAM5W,OAASA,EAGtB,iBAAiByX,GACf7oB,KAAKgoB,MAAMa,aAAeA,EAG5B,aAAaT,GACXpoB,KAAKgoB,MAAMI,SAAWA,EAGxB,gBAAgBzqB,GACd,OAAOqC,KAAKgoB,MAAMc,gBAAgBnrB,GAGpC,gBAAgBA,GACdqC,KAAKgoB,MAAMe,gBAAgBprB,GAG7B,SACE,OAAOqC,KAAKgoB,MAAMnf,SAGpB,WACE,OAAO7I,KAAKgoB,MAAMjmB,WAGpB,SACE,OAAO/B,KAAK+B,aA4BdylB,gBAAiBG,KAAKH,gBACtBC,cACAhW,OAzBF,SAAgBtQ,GACd,GAAmB,iBAARA,EAAkB,CAE3B,OADY,IAAIye,EAAIze,GACTY,WAGb,KAAMZ,aAAeye,GAAM,CACzB,MAAMoJ,EAAW7nB,EAAIinB,UAAYjnB,EAAIknB,SAAW,GAAG3gB,OAAOvG,EAAIinB,SAAU,KAAK1gB,OAAOvG,EAAIknB,SAAU,KAAO,GACnGF,EAAOhnB,EAAIgnB,KAAOhnB,EAAIgnB,KAAO,IAAM,GACnCS,EAAOznB,EAAIynB,KAAO,IAAMznB,EAAIynB,KAAO,GACnCf,EAAW1mB,EAAI0mB,SAAW1mB,EAAI0mB,SAAW,KAAO,GAChDC,EAAO3mB,EAAI2mB,MAAQ,GACnBW,EAAWtnB,EAAIsnB,UAAY,GAC3BrX,EAASjQ,EAAIiQ,SAAWjQ,EAAImnB,MAAQ,IAAMnnB,EAAImnB,MAAQ,IACtDE,EAAOrnB,EAAIqnB,MAAQ,GACnBN,EAAW/mB,EAAI+mB,UAAY,GAC3BD,EAAO9mB,EAAI8mB,MAAQC,EAAW9W,EACpC,MAAO,GAAG1J,OAAOmgB,GAAUngB,OAAOshB,GAAYb,GAAMzgB,OAAOogB,GAAQW,EAAWG,GAAMlhB,OAAOugB,GAAMvgB,OAAO8gB,O,8DCjJ5G9rB,EAAQusB,SAAWzO,EAAQ,IAC3B9d,EAAQmjB,QAAUrF,EAAQ,GAC1B9d,EAAQwsB,QAAU1O,EAAQ,IAC1B9d,EAAQgjB,OAASlF,EAAQ,GACzB9d,EAAQijB,OAASnF,EAAQ,GAGzB9d,EAAQ6pB,UAAY7pB,EAAQmjB,QAAQ0G,UACpC7pB,EAAQ4pB,YAAc5pB,EAAQmjB,QAAQyG,YACtC5pB,EAAQysB,SAAWzsB,EAAQusB,SAASE,SACpCzsB,EAAQ0sB,OAAS1sB,EAAQwsB,QAAQE,OACjC1sB,EAAQ+pB,OAAS/pB,EAAQmjB,QAAQ4G,OAEjC/pB,EAAQ2sB,QAAU,CAChB5C,OAAQ/pB,EAAQmjB,QAAQ0G,UACxB6C,OAAQ1sB,EAAQwsB,QAAQE,OACxB5nB,QAAQ,EACR/D,KAAM,S,6BClBR,MAAM,OAAE6B,GAAWkb,EAAQ,GACrBqF,EAAUrF,EAAQ,GAClBiF,EAAQjF,EAAQ,GAMtB,MAAMyO,UAAiBpJ,EACrB2D,UAAWa,EAAWlmB,GACpB,gBAAUkmB,EAAV,YAAuBlmB,EAAvB,KAGFsmB,UAAWhjB,GACT,OAAOumB,MAAMvD,UAAUhjB,GAAKM,WAG9B2iB,YAAa5G,EAAGC,GACd,OAAOiK,MAAMtD,YAAY5G,EAAGC,GAAGhc,WAGjC4iB,YAAa1G,EAAIC,EAAI5E,EAAIC,GACvB,OAAOyO,MAAMrD,YAAY1G,EAAIC,EAAI5E,EAAIC,GAAIxX,WAG3CijB,eAAgBlH,EAAGC,GACjB,OAAOiK,MAAMhD,eAAelH,EAAGC,GAAGhc,WAGpCkjB,eAAgBhH,EAAIC,EAAI5E,EAAIC,GAC1B,OAAOyO,MAAM/C,eAAehH,EAAIC,EAAI5E,EAAIC,GAAIxX,WAG9CmjB,aACE,MAAO,OAGTC,cACE,MAAO,QAGTP,YAAanjB,GACX,MAAM6nB,EAAKtB,MAAMpD,YAAYnjB,GAC7B,OAAIge,EAAMf,eAAejd,GAChB,OAGT,UAAU6nB,EAAV,MAGFzE,kBAAmBtd,EAAGxE,EAAGxF,EAAGC,GAC1B,MAAM8rB,EAAKtB,MAAMnD,kBAAkBtd,EAAGxE,EAAGxF,EAAGC,GAC5C,gBAAU8rB,EAAV,MAGFxE,kBAAmBvd,EAAGxE,EAAGxF,EAAGC,EAAGqJ,EAAGiX,EAAGC,EAAGgH,GACtC,MAAMuE,EAAKtB,MAAMlD,kBAAkBvd,EAAGxE,EAAGxF,EAAGC,EAAGqJ,EAAGiX,EAAGC,EAAGgH,GACxD,gBAAUuE,EAAV,MAGF7F,iBAAkBc,EAAKljB,GACrB,MAAMI,EAAM8iB,EAAIlc,KAAK,MAErB,OAAa,IAAThH,EACF,aAAaI,EAAb,KAEF,YAAYA,GAGd+iB,yBAA0BliB,EAAOC,GAC/B,MAAMd,EAAOnC,EAAOa,KAClB6nB,MAAMxD,yBAAyBliB,EAAOC,IACrCR,SAAS,OAEZ,kBAAYN,EAAZ,KAGF6jB,iBACE,MAAO,aAGTC,oBACE,MAAO,cAGTC,YACE,MAAO,QAGTC,eACE,MAAO,SAGTL,aACE,MAAO,OAGTC,kBACE,MAAO,YAGTM,uBAAwBlkB,GACtB,uBAAiBA,EAAjB,KAGFqiB,YAAaxgB,EAAKjC,GAChB,MAAMI,EAAMumB,MAAMlE,YAAYxgB,EAAKjC,GAEnC,OAAa,IAATA,EAEF,aAAaI,EAAI4G,KAAK,MAAtB,KAGF,WAAW5G,EAAI4G,KAAK,MAApB,KAGFub,UAAW2F,EAAKloB,GACd,MAAMI,EAAMumB,MAAMpE,UAAU2F,GACtB5hB,EAAOmB,MAAM3I,KAAKsB,EAAImc,QACzB4L,OAAOC,EAAchoB,GAAM,IAE9B,OAAa,IAATJ,EACF,aAAasG,EAAb,KAGF,WAAWA,EAAX,KAGFkc,aAAc1iB,EAAKE,GACjB,MAAMI,EAAMumB,MAAMnE,aAAa1iB,GACzBooB,EAAM3rB,OAAOggB,KAAKnc,GACrB+nB,OAAOC,EAAchoB,GAAM,IAE9B,OAAa,IAATJ,EACF,aAAakoB,EAAb,KAGF,WAAWA,EAAX,KAGF7F,iBAAkBa,EAAKljB,GACrB,MAAMI,EAAM8iB,EAAIlc,KAAK,MAErB,OAAa,IAAThH,EACF,aAAaI,EAAb,KAGF,WAAWA,EAAX,KAGFikB,yBAA0BpjB,EAAOC,GAC/B,MAAMd,EAAOnC,EAAOa,KAClB6nB,MAAMtC,yBAAyBpjB,EAAOC,IACrCR,SAAS,QAEZ,iBAAWN,EAAX,KAGF,gBAAiB2kB,EAAOI,GAMtB,MALqB,iBAAVJ,IACTA,EAAQ9mB,EAAOa,KAAKimB,EAAOI,GAAO,SAGxB,IAAIyC,GACL3C,YAAYF,IAM3B,SAASqD,EAAehoB,GACtB,MAAO,CAACioB,EAAKjrB,IACPirB,EACF,UAAUA,EAAV,aAAkBjrB,EAAlB,aAA0BgD,EAAIhD,IAEhC,UAAUA,EAAV,aAAkBgD,EAAIhD,IAP1B9B,EAAOD,QAAUusB,G,6BCxKjBvsB,EAAQ8D,WAkCR,SAAoBmpB,GAClB,IAAIC,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAC3B,OAAsC,GAA9BE,EAAWC,GAAuB,EAAIA,GArChDrtB,EAAQoQ,YA4CR,SAAqB6c,GACnB,IAAIK,EAQA9sB,EAPA0sB,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GACvBtmB,EAAM,IAAI2mB,EAThB,SAAqBN,EAAKG,EAAUC,GAClC,OAAsC,GAA9BD,EAAWC,GAAuB,EAAIA,EAQ5BG,CAAYP,EAAKG,EAAUC,IACzCI,EAAU,EAEV9oB,EAAM0oB,EAAkB,EAAID,EAAW,EAAIA,EAG/C,IAAK5sB,EAAI,EAAGA,EAAImE,EAAKnE,GAAK,EACxB8sB,EAAMI,EAAUT,EAAI5kB,WAAW7H,KAAO,GAAKktB,EAAUT,EAAI5kB,WAAW7H,EAAI,KAAO,GAAKktB,EAAUT,EAAI5kB,WAAW7H,EAAI,KAAO,EAAIktB,EAAUT,EAAI5kB,WAAW7H,EAAI,IACzJoG,EAAI6mB,KAAaH,GAAO,GAAK,IAC7B1mB,EAAI6mB,KAAaH,GAAO,EAAI,IAC5B1mB,EAAI6mB,KAAmB,IAANH,EAGK,IAApBD,IACFC,EAAMI,EAAUT,EAAI5kB,WAAW7H,KAAO,EAAIktB,EAAUT,EAAI5kB,WAAW7H,EAAI,KAAO,EAC9EoG,EAAI6mB,KAAmB,IAANH,GAGK,IAApBD,IACFC,EAAMI,EAAUT,EAAI5kB,WAAW7H,KAAO,GAAKktB,EAAUT,EAAI5kB,WAAW7H,EAAI,KAAO,EAAIktB,EAAUT,EAAI5kB,WAAW7H,EAAI,KAAO,EACvHoG,EAAI6mB,KAAaH,GAAO,EAAI,IAC5B1mB,EAAI6mB,KAAmB,IAANH,GAGnB,OAAO1mB,GAxET5G,EAAQ8I,cA2FR,SAAuB6kB,GASrB,IARA,IAAIL,EACA3oB,EAAMgpB,EAAM3qB,OACZ4qB,EAAajpB,EAAM,EAEnBkpB,EAAQ,GAIHrtB,EAAI,EAAG4oB,EAAOzkB,EAAMipB,EAAYptB,EAAI4oB,EAAM5oB,GAH9B,MAInBqtB,EAAMzlB,KAAK0lB,EAAYH,EAAOntB,EAAGA,EAJd,MAImC4oB,EAAOA,EAAO5oB,EAJjD,QAQF,IAAfotB,GACFN,EAAMK,EAAMhpB,EAAM,GAClBkpB,EAAMzlB,KAAK2lB,EAAOT,GAAO,GAAKS,EAAOT,GAAO,EAAI,IAAQ,OAChC,IAAfM,IACTN,GAAOK,EAAMhpB,EAAM,IAAM,GAAKgpB,EAAMhpB,EAAM,GAC1CkpB,EAAMzlB,KAAK2lB,EAAOT,GAAO,IAAMS,EAAOT,GAAO,EAAI,IAAQS,EAAOT,GAAO,EAAI,IAAQ,MAGrF,OAAOO,EAAMliB,KAAK,KA3GpB,IALA,IAAIoiB,EAAS,GACTL,EAAY,GACZH,EAA4B,oBAAfrqB,WAA6BA,WAAakJ,MACvD4D,EAAO,mEAEFxP,EAAI,EAAGmE,EAAMqL,EAAKhN,OAAQxC,EAAImE,IAAOnE,EAC5CutB,EAAOvtB,GAAKwP,EAAKxP,GACjBktB,EAAU1d,EAAK3H,WAAW7H,IAAMA,EAQlC,SAAS2sB,EAAQF,GACf,IAAItoB,EAAMsoB,EAAIjqB,OAEd,GAAI2B,EAAM,EAAI,EACZ,MAAM,IAAIpB,MAAM,kDAKlB,IAAI6pB,EAAWH,EAAIvmB,QAAQ,KAG3B,OAFkB,IAAd0mB,IAAiBA,EAAWzoB,GAEzB,CAACyoB,EADcA,IAAazoB,EAAM,EAAI,EAAIyoB,EAAW,GAoD9D,SAASU,EAAYH,EAAO/nB,EAAOC,GAIjC,IAHA,IAAIynB,EALmBU,EAMnBC,EAAS,GAEJztB,EAAIoF,EAAOpF,EAAIqF,EAAKrF,GAAK,EAChC8sB,GAAOK,EAAMntB,IAAM,GAAK,WAAamtB,EAAMntB,EAAI,IAAM,EAAI,QAA0B,IAAfmtB,EAAMntB,EAAI,IAC9EytB,EAAO7lB,KATF2lB,GADgBC,EAUOV,IATT,GAAK,IAAQS,EAAOC,GAAO,GAAK,IAAQD,EAAOC,GAAO,EAAI,IAAQD,EAAa,GAANC,IAY9F,OAAOC,EAAOtiB,KAAK,IA3ErB+hB,EAAU,IAAIrlB,WAAW,IAAM,GAC/BqlB,EAAU,IAAIrlB,WAAW,IAAM,I,6BChB/B,IAAIhD,EAAW,GAAGA,SAElBpF,EAAOD,QAAUoM,MAAM1J,SAAW,SAAUkE,GAC1C,MAA6B,kBAAtBvB,EAAS1E,KAAKiG,K,6BCHvB3G,EAAOD,QAAU,SAAoBkuB,EAAQC,EAASrpB,GACpD,UAIA,IAAIspB,EAAO,IAAIF,EAAOhrB,WAAW4B,GAEjC,IAAIwf,EAAU6J,EAAQ7J,QACtB,IAAIC,EAAY4J,EAAQ5J,UACxB,IAAIC,EAAe2J,EAAQ3J,aAC3B,IAAIC,EAAY0J,EAAQ1J,UACxB,IAAIC,EAAeyJ,EAAQzJ,aAC3B,IAAIC,EAAYwJ,EAAQxJ,UACxB,IAAIC,EAAkBuJ,EAAQvJ,gBAC9B,IAAIC,EAAkBsJ,EAAQtJ,gBAC9B,IAAIC,EAAWqJ,EAAQrJ,SACvB,IAAIC,EAAYoJ,EAAQpJ,UACxB,IAAIC,EAAgBmJ,EAAQnJ,cAC5B,IAAIC,EAAWkJ,EAAQlJ,SACvB,IAAIC,EAAeiJ,EAAQjJ,aAC3B,IAAIC,EAAkBgJ,EAAQhJ,gBAC9B,IAAIC,EAAU+I,EAAQ/I,QACtB,IAAIC,EAAa8I,EAAQ9I,WAEzB,IAAIC,EAAiB6I,EAAQ7I,eAC7B,IAAIC,EAAsB4I,EAAQ5I,oBAClC,IAAIC,EAAwB2I,EAAQ3I,sBACpC,IAAIC,EAAwB0I,EAAQ1I,sBACpC,IAAIC,EAAkByI,EAAQzI,gBAC9B,IAAIC,EAAuBwI,EAAQxI,qBACnC,IAAIC,EAAyBuI,EAAQvI,uBACrC,IAAIC,EAAyBsI,EAAQtI,uBAErC,IAAIC,EAAiBqI,EAAQrI,eAC7B,IAAIC,EAAsBoI,EAAQpI,oBAClC,IAAIC,EAAiBmI,EAAQnI,eAC7B,IAAIC,EAAsBkI,EAAQlI,oBAElC,IAAIC,EAAuBiI,EAAQjI,qBAEnC,IAAIE,EAAe+H,EAAQ/H,aAC3B,IAAIC,EAAgB8H,EAAQ9H,cAC5B,IAAIC,EAAgB6H,EAAQ7H,cAC5B,IAAIH,EAAoBgI,EAAQhI,kBAEhC,IAAII,EAAY4H,EAAQ5H,UAExB,IAAIzY,EAAMogB,EAAOnlB,KAAK+E,IAOtB,IAAItG,EAAS,EACb,IAAI6mB,EAAc,EAClB,IAAIre,EAAO,EAUX,SAAS2Z,EAAOD,GACdA,EAAQA,EAAQ,EAEhBliB,EAAS,EACT6mB,EAAc3E,EAEd,OAAQliB,EAAS,IAAM6mB,EAAc,GAAI,CACvCre,EAAOse,GAAUF,EAAK5mB,GAAU,KAAK4mB,EAAK5mB,GAAU,GAAK,EAEzD,IAAKwI,EAAO,GAAK,EAAG,CAClB,OAIJ,OAAOA,EAAO,EAKhB,SAAStD,EAAazK,GACpBA,EAAIA,EAAI,EAER,KAAOuF,EAAS,IAAMvF,EAAI,GAAM,IAAMosB,EAAc,GAAI,CACtD,OAAO,EAGT,OAAO,EAGT,SAASE,EAAYtsB,GACnBA,EAAIA,EAAI,EAER,OACGmsB,EAAKnsB,EAAI,IAAM,EAAKmsB,EAAMnsB,EAAI,EAAK,GAClC,EAGN,SAASusB,EAAYvsB,GACnBA,EAAIA,EAAI,EAER,OACGmsB,EAAKnsB,EAAI,IAAM,GAAOmsB,EAAMnsB,EAAI,EAAK,IAAM,GAAOmsB,EAAMnsB,EAAI,EAAK,IAAM,EAAKmsB,EAAMnsB,EAAI,EAAK,GAC1F,EAKN,SAASwsB,EAAOC,GACdA,EAAQA,EAAQ,EAEhBpK,EAAQoK,EAAQ,GAEhBlnB,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASmnB,EAAUD,GACjBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT4X,EAAQ8J,EAAM5mB,EAAS,EAAK,GAAK,GAEjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASonB,EAAWF,GAClBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT4X,EACEiK,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASqnB,EAAWH,GAClBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT6X,EACEgK,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASsnB,EAAWJ,GAClBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT+X,EACE8J,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASunB,EAAOL,GACdA,EAAQA,EAAQ,EAEhBpK,GAAU,GAAMoK,EAAQ,GAAM,GAAM,GAEpClnB,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASwnB,EAAUN,GACjBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT4X,GACI,GAAK8J,EAAM5mB,EAAS,EAAK,GAAK,GAAM,GAGxCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASynB,EAAWP,GAClBA,EAAQA,EAAQ,EAEhB,IAAI3pB,EAAM,EAEV,GAAI2H,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT3H,EAAMwpB,EAAY/mB,EAAS,EAAK,GAAK,EACrC8c,GAAU,GAAKvf,EAAM,GAAM,GAE3ByC,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS0nB,GAAWR,GAClBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT8X,EACE+J,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS2nB,GAAWT,GAClBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTgY,EACE6J,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS0W,GAAawQ,GACpBA,EAAQA,EAAQ,EAEhB,IAAI9oB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAIupB,EAAO,EAEXA,EAAQV,EAAQ,GAAM,EACtB,GAAIhiB,EAAY0iB,EAAO,GAAK,EAAG,CAC7B,OAAO,EAGTxpB,EAAS4B,EAAS,EAAK,EACvB3B,GAAS2B,EAAS,EAAK,IAAM4nB,EAAO,GAAM,EAE1CtJ,EAAelgB,EAAQ,EAAGC,EAAM,GAEhC2B,EAAS3B,EAAM,EAEf,OAAO,EAGT,SAASwpB,GAAeX,GACtBA,EAAQA,EAAQ,EAEhB,IAAI9oB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAI7C,EAAS,EAEb,GAAI0J,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT1J,EAASorB,EAAM5mB,EAAS,EAAK,GAAK,EAClC5B,EAAS4B,EAAS,EAAK,EACvB3B,GAAS2B,EAAS,EAAK,IAAMxE,EAAS,GAAM,EAE5C,GAAI0J,EAAa1J,EAAS,EAAK,GAAK,EAAG,CACrC,OAAO,EAGT8iB,EAAelgB,EAAQ,EAAGC,EAAM,GAEhC2B,EAAS3B,EAAM,EAEf,OAAO,EAGT,SAASypB,GAAgBZ,GACvBA,EAAQA,EAAQ,EAEhB,IAAI9oB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAI7C,EAAS,EAEb,GAAI0J,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT1J,EAASurB,EAAY/mB,EAAS,EAAK,GAAK,EACxC5B,EAAS4B,EAAS,EAAK,EACvB3B,GAAS2B,EAAS,EAAK,IAAMxE,EAAS,GAAM,EAG5C,GAAI0J,EAAa1J,EAAS,EAAK,GAAK,EAAG,CACrC,OAAO,EAGT8iB,EAAelgB,EAAQ,EAAGC,EAAM,GAEhC2B,EAAS3B,EAAM,EAEf,OAAO,EAGT,SAAS0pB,GAAgBb,GACvBA,EAAQA,EAAQ,EAEhB,IAAI9oB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAI7C,EAAS,EAEb,GAAI0J,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT1J,EAASwrB,EAAYhnB,EAAS,EAAK,GAAK,EACxC5B,EAAS4B,EAAS,EAAK,EACvB3B,GAAS2B,EAAS,EAAK,IAAMxE,EAAS,GAAM,EAG5C,GAAI0J,EAAa1J,EAAS,EAAK,GAAK,EAAG,CACrC,OAAO,EAGT8iB,EAAelgB,EAAQ,EAAGC,EAAM,GAEhC2B,EAAS3B,EAAM,EAEf,OAAO,EAGT,SAAS2pB,GAAgBd,GAEvBA,EAAQA,EAAQ,EAEhB,OAAO,EAGT,SAASe,GAAmBf,GAC1BA,EAAQA,EAAQ,EAEhB3I,IAEAve,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS2W,GAAauQ,GACpBA,EAAQA,EAAQ,EAEhB,IAAI9oB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAIupB,EAAO,EAEXA,EAAQV,EAAQ,GAAM,EAEtB,GAAIhiB,EAAY0iB,EAAO,GAAK,EAAG,CAC7B,OAAO,EAGTxpB,EAAS4B,EAAS,EAAK,EACvB3B,GAAS2B,EAAS,EAAK,IAAM4nB,EAAO,GAAM,EAE1CpJ,EAAepgB,EAAQ,EAAGC,EAAM,GAEhC2B,EAAS3B,EAAM,EAEf,OAAO,EAGT,SAAS6pB,GAAehB,GACtBA,EAAQA,EAAQ,EAEhB,IAAI9oB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAI7C,EAAS,EAEb,GAAI0J,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT1J,EAASorB,EAAM5mB,EAAS,EAAK,GAAK,EAClC5B,EAAS4B,EAAS,EAAK,EACvB3B,GAAS2B,EAAS,EAAK,IAAMxE,EAAS,GAAM,EAE5C,GAAI0J,EAAa1J,EAAS,EAAK,GAAK,EAAG,CACrC,OAAO,EAGTgjB,EAAepgB,EAAQ,EAAGC,EAAM,GAEhC2B,EAAS3B,EAAM,EAEf,OAAO,EAGT,SAAS8pB,GAAgBjB,GACvBA,EAAQA,EAAQ,EAEhB,IAAI9oB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAI7C,EAAS,EAEb,GAAI0J,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT1J,EAASurB,EAAY/mB,EAAS,EAAK,GAAK,EACxC5B,EAAS4B,EAAS,EAAK,EACvB3B,GAAS2B,EAAS,EAAK,IAAMxE,EAAS,GAAM,EAE5C,GAAI0J,EAAa1J,EAAS,EAAK,GAAK,EAAG,CACrC,OAAO,EAGTgjB,EAAepgB,EAAQ,EAAGC,EAAM,GAEhC2B,EAAS3B,EAAM,EAEf,OAAO,EAGT,SAAS+pB,GAAgBlB,GACvBA,EAAQA,EAAQ,EAEhB,IAAI9oB,EAAQ,EACZ,IAAIC,EAAM,EACV,IAAI7C,EAAS,EAEb,GAAI0J,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT1J,EAASwrB,EAAYhnB,EAAS,EAAK,GAAK,EACxC5B,EAAS4B,EAAS,EAAK,EACvB3B,GAAS2B,EAAS,EAAK,IAAMxE,EAAS,GAAM,EAE5C,GAAI0J,EAAa1J,EAAS,EAAK,GAAK,EAAG,CACrC,OAAO,EAGTgjB,EAAepgB,EAAQ,EAAGC,EAAM,GAEhC2B,EAAS3B,EAAM,EAEf,OAAO,EAGT,SAASgqB,GAAgBnB,GAEvBA,EAAQA,EAAQ,EAEhB,OAAO,EAGT,SAASoB,GAAmBpB,GAC1BA,EAAQA,EAAQ,EAEhBzI,IAEAze,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS4W,GAAOsQ,GACdA,EAAQA,EAAQ,EAEhBnJ,EAAqBmJ,EAAQ,IAAO,GAEpClnB,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASuoB,GAASrB,GAChBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT6Y,EAAoB6I,EAAM5mB,EAAS,EAAK,GAAK,GAE7CA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASwoB,GAAUtB,GACjBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT6Y,EACEgJ,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASyoB,GAAUvB,GACjBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT8Y,EACE+I,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS0oB,GAAUxB,GACjBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT+Y,EACE8I,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS2oB,GAAazB,GACpBA,EAAQA,EAAQ,EAEhBpJ,IAEA9d,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS6W,GAAKqQ,GACZA,EAAQA,EAAQ,EAEhB,IAAIU,EAAO,EAEXA,EAAQV,EAAQ,IAAO,EAEvB,GAAIhiB,EAAY0iB,EAAO,GAAK,EAAG,CAC7B,OAAO,EAGTzJ,EAAqByJ,EAAO,GAE5B5nB,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS4oB,GAAO1B,GACdA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTiZ,EAAqByI,EAAM5mB,EAAS,EAAK,GAAK,GAE9CA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS6oB,GAAQ3B,GACfA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTiZ,EACE4I,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS8oB,GAAQ5B,GACfA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTkZ,EACE2I,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS+oB,GAAQ7B,GACfA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTmZ,EACE0I,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASgpB,GAAW9B,GAClBA,EAAQA,EAAQ,EAEhBhJ,IAEAle,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASipB,GAAW/B,GAClBA,EAAQA,EAAQ,EAEhBtI,EAAcsI,EAAQ,IAAK,EAAK,GAEhClnB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASkpB,GAAgBhC,GACfA,EAAQ,EAEhBtI,EAAasI,EAAQ,GAErBlnB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASmpB,GAAgBjC,GACfA,EAAQ,EAEhBtI,EAAasI,EAAQ,GAErBlnB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASopB,GAAUlC,GACTA,EAAQ,EAEhBtI,EAAasI,EAAQ,GAErBlnB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASqpB,GAAkBnC,GACjBA,EAAQ,EAEhBtI,EAAasI,EAAQ,GAErBlnB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASspB,GAAgBpC,GACvBA,EAAQA,EAAQ,EAEhBtI,EAAcsI,EAAQ,IAAK,EAAK,GAEhClnB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASupB,GAAgBrC,GACfA,EAAQ,EAEhBtI,EAAasI,EAAQ,GAErBlnB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASwpB,GAAYtC,GACXA,EAAQ,EAEhBtI,EAAasI,EAAQ,GAErBlnB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAASypB,GAAYvC,GACXA,EAAQ,EAEhBtI,EAAasI,EAAQ,GAErBlnB,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAAS0pB,GAAYxC,GACnBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT0Z,EAAagI,EAAM5mB,EAAS,EAAK,GAAK,GAEtCA,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAAS2pB,GAAYzC,GACnBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT0Z,EACEmI,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAAS4pB,GAAY1C,GACnBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT2Z,EACEkI,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAAS6pB,GAAY3C,GACnBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT4Z,EACEiI,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,EAC/B+mB,EAAY/mB,EAAS,EAAK,GAAK,GAGjCA,EAAUA,EAAS,EAAI,EAEvB,OAAO,EAGT,SAAS8pB,GAAmB5C,GAC1BA,EAAQA,EAAQ,EAEhBxI,GAAuBwI,EAAQ,GAAK,IAAO,GAE3ClnB,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAAS+pB,GAAc7C,GACrBA,EAAQA,EAAQ,EAEhB3J,IAEAvd,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASgqB,GAAa9C,GACpBA,EAAQA,EAAQ,EAEhB5J,IAEAtd,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASiqB,GAAa/C,GACpBA,EAAQA,EAAQ,EAEhBzJ,IAEAzd,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASkqB,GAAkBhD,GACzBA,EAAQA,EAAQ,EAEhB1J,IAEAxd,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASmqB,GAAajD,GACpBA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTwZ,EAAqBkI,EAAM5mB,EAAS,EAAK,GAAK,GAE9CA,EAAUA,EAAS,EAAM,EAEzB,OAAO,EAGT,SAASoqB,GAAmBlD,GAC1BA,EAAQA,EAAQ,EAEhB,IAAItN,EAAI,EACR,IAAIC,EAAI,EACR,IAAIvJ,EAAO,IACX,IAAI0F,EAAM,IACV,IAAIsD,EAAO,IACX,IAAIxf,EAAI,IACR,GAAIoL,EAAY,GAAK,EAAG,CACtB,OAAO,EAGT0U,EAAIgN,EAAM5mB,EAAS,EAAK,GAAK,EAC7B6Z,EAAI+M,EAAM5mB,EAAS,EAAK,GAAK,EAE7B,IAAK4Z,EAAI,GAAK,KAAM,CAClBtJ,GAAQ,IAGV0F,MAAU4D,EAAI,GAAK,OAAS,GAC5BN,MAAYM,EAAI,GAAK,OAAS,EAAKC,GAEnC,IAAK7D,GAAO,IAAK,CACfmH,KACI7M,GAAS,uBAA0BgJ,SAElC,IAAKtD,GAAO,KAAM,CACvB,IAAK1F,GAAQ,IAAK,CAChB,IAAKgJ,EAAO,IAAK,CACfsE,QACK,CACLF,SAEG,CACL,IAAKpE,EAAO,IAAK,CACfuE,QACK,CACLF,UAGC,CACLR,KACG7M,EAAOhK,GAAK,KAAM0P,EAAM,SAAW,OAASsD,KAIjDtZ,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASqqB,GAAqBnD,GAC5BA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTkY,EACEwJ,EAAM5mB,EAAS,EAAK,GAAK,EACzB4mB,EAAM5mB,EAAS,EAAK,GAAK,EACzB4mB,EAAM5mB,EAAS,EAAK,GAAK,EACzB4mB,EAAM5mB,EAAS,EAAK,GAAK,GAG3BA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASsqB,GAAqBpD,GAC5BA,EAAQA,EAAQ,EAEhB,GAAIhiB,EAAY,GAAK,EAAG,CACtB,OAAO,EAGTmY,EACEuJ,EAAM5mB,EAAS,EAAK,GAAK,EACzB4mB,EAAM5mB,EAAS,EAAK,GAAK,EACzB4mB,EAAM5mB,EAAS,EAAK,GAAK,EACzB4mB,EAAM5mB,EAAS,EAAK,GAAK,EACzB4mB,EAAM5mB,EAAS,EAAK,GAAK,EACzB4mB,EAAM5mB,EAAS,EAAK,GAAK,EACzB4mB,EAAM5mB,EAAS,EAAK,GAAK,EACzB4mB,EAAM5mB,EAAS,EAAK,GAAK,GAG3BA,EAAUA,EAAS,EAAK,EAExB,OAAO,EAGT,SAASuqB,GAAOrD,GACdA,EAAQA,EAAQ,EAEhB,OAAO,EAGT,SAAStO,GAAOsO,GACdA,EAAQA,EAAQ,EAEhBnI,IAEA/e,EAAUA,EAAS,EAAK,EAExB,OAAO,EAKT,IAAI8mB,GAAY,CAEdG,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EAEAE,EAEAC,EAEAC,EAEAC,EACAiD,GACAA,GACAA,GACAA,GAEAhD,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EAEAC,EAEAC,EAEAC,GAEAC,GACA4C,GACAA,GACAA,GACAA,GAEA7T,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEAmR,GAEAC,GAEAC,GAEAC,GACAuC,GACAA,GACAA,GAEAtC,GAEAtR,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEAuR,GAEAC,GAEAC,GAEAC,GAEAkC,GACAA,GACAA,GACAjC,GAEA1R,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEA2R,GAEAC,GAEAC,GAEAC,GAEA6B,GACAA,GACAA,GACA5B,GAEA9R,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEA+R,GAEAC,GAEAC,GAEAC,GACAwB,GACAA,GACAA,GAEAvB,GAEAC,GAEAA,GAEAA,GAEAA,GAEAA,GAEAA,GAEAK,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEAA,GACAA,GACAA,GAEAI,GACAC,GACAC,GACAC,GACAU,GACAA,GACAA,GACAA,GAEAT,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEAC,GAEAC,GAEAC,GAEAC,GAEAC,GAEAC,GAEAC,GAEAC,GACAC,GACAA,GACAA,GAEA3R,IAKF,MAAO,CACLuJ,MAAOA,K,6BCpzCX,MAAM,qBACJkB,EAAoB,OACpB9V,GACE,EAAQ,IAEZ9U,EAAOD,QAAU,CAACqrB,EAAKH,EAAW,GAAI8G,EAAc,GAAIC,KACtD,IAGIC,EAHA/G,EAAWD,EAASC,SAAWD,EAASC,SAAS7a,QAAQ,IAAK,IAAM,OAExE6a,GAAY6G,EAAY7G,IAAa8G,GAAmB9G,GAAY,IAGpE,IACE+G,EAAY,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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Borc\"] = factory();\n\telse\n\t\troot[\"Borc\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n\n/* eslint-disable no-proto */\n'use strict';\n\nvar base64 = require('base64-js');\n\nvar ieee754 = require('ieee754');\n\nvar isArray = require('isarray');\n\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\n\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();\n/*\n * Export kMaxLength after typed array support is determined.\n */\n\nexports.kMaxLength = kMaxLength();\n\nfunction typedArraySupport() {\n  try {\n    var arr = new Uint8Array(1);\n    arr.__proto__ = {\n      __proto__: Uint8Array.prototype,\n      foo: function foo() {\n        return 42;\n      }\n    };\n    return arr.foo() === 42 && // typed array instances can be augmented\n    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction kMaxLength() {\n  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n}\n\nfunction createBuffer(that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length');\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n\n    that.length = length;\n  }\n\n  return that;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\n\nfunction Buffer(arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length);\n  } // Common case.\n\n\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error('If encoding is specified then the first argument must be a string');\n    }\n\n    return allocUnsafe(this, arg);\n  }\n\n  return from(this, arg, encodingOrOffset, length);\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n// TODO: Legacy, not needed anymore. Remove in next major version.\n\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr;\n};\n\nfunction from(that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length);\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset);\n  }\n\n  return fromObject(that, value);\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\n\n\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length);\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n\n  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    });\n  }\n}\n\nfunction assertSize(size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number');\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative');\n  }\n}\n\nfunction alloc(that, size, fill, encoding) {\n  assertSize(size);\n\n  if (size <= 0) {\n    return createBuffer(that, size);\n  }\n\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\n  }\n\n  return createBuffer(that, size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\n\n\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding);\n};\n\nfunction allocUnsafe(that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n\n  return that;\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\n\n\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\n\n\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size);\n};\n\nfunction fromString(that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding');\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that;\n}\n\nfunction fromArrayLike(that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n\n  return that;\n}\n\nfunction fromArrayBuffer(that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds');\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds');\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n\n  return that;\n}\n\nfunction fromObject(that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that;\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that;\n  }\n\n  if (obj) {\n    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0);\n      }\n\n      return fromArrayLike(that, obj);\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n}\n\nfunction checked(length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\n  }\n\n  return length | 0;\n}\n\nfunction SlowBuffer(length) {\n  if (+length != length) {\n    // eslint-disable-line eqeqeq\n    length = 0;\n  }\n\n  return Buffer.alloc(+length);\n}\n\nBuffer.isBuffer = function isBuffer(b) {\n  return !!(b != null && b._isBuffer);\n};\n\nBuffer.compare = function compare(a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers');\n  }\n\n  if (a === b) return 0;\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\nBuffer.isEncoding = function isEncoding(encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nBuffer.concat = function concat(list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers');\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0);\n  }\n\n  var i;\n\n  if (length === undefined) {\n    length = 0;\n\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n\n  return buffer;\n};\n\nfunction byteLength(string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length;\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength;\n  }\n\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0; // Use a for loop to avoid recursion\n\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len;\n\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length;\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2;\n\n      case 'hex':\n        return len >>> 1;\n\n      case 'base64':\n        return base64ToBytes(string).length;\n\n      default:\n        if (loweredCase) return utf8ToBytes(string).length; // assume utf8\n\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\nBuffer.byteLength = byteLength;\n\nfunction slowToString(encoding, start, end) {\n  var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\n  if (start === undefined || start < 0) {\n    start = 0;\n  } // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n\n\n  if (start > this.length) {\n    return '';\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return '';\n  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\n\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return '';\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end);\n\n      case 'ascii':\n        return asciiSlice(this, start, end);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end);\n\n      case 'base64':\n        return base64Slice(this, start, end);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\n\n\nBuffer.prototype._isBuffer = true;\n\nfunction swap(b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16() {\n  var len = this.length;\n\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits');\n  }\n\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap32 = function swap32() {\n  var len = this.length;\n\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits');\n  }\n\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap64 = function swap64() {\n  var len = this.length;\n\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits');\n  }\n\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n\n  return this;\n};\n\nBuffer.prototype.toString = function toString() {\n  var length = this.length | 0;\n  if (length === 0) return '';\n  if (arguments.length === 0) return utf8Slice(this, 0, length);\n  return slowToString.apply(this, arguments);\n};\n\nBuffer.prototype.equals = function equals(b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n  if (this === b) return true;\n  return Buffer.compare(this, b) === 0;\n};\n\nBuffer.prototype.inspect = function inspect() {\n  var str = '';\n  var max = exports.INSPECT_MAX_BYTES;\n\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n\n  return '<Buffer ' + str + '>';\n};\n\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer');\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index');\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0;\n  }\n\n  if (thisStart >= thisEnd) {\n    return -1;\n  }\n\n  if (start >= end) {\n    return 1;\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n  if (this === target) return 0;\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\n\n\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1; // Normalize byteOffset\n\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n\n  byteOffset = +byteOffset; // Coerce to Number.\n\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n  } // Normalize byteOffset: negative offsets start from the end of the buffer\n\n\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1;else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;else return -1;\n  } // Normalize val\n\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  } // Finally, search either indexOf (if dir is true) or lastIndexOf\n\n\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1;\n    }\n\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n\n    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n      }\n    }\n\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n  }\n\n  throw new TypeError('val must be string, number or Buffer');\n}\n\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n\n    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1;\n      }\n\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read(buf, i) {\n    if (indexSize === 1) {\n      return buf[i];\n    } else {\n      return buf.readUInt16BE(i * indexSize);\n    }\n  }\n\n  var i;\n\n  if (dir) {\n    var foundIndex = -1;\n\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break;\n        }\n      }\n\n      if (found) return i;\n    }\n  }\n\n  return -1;\n}\n\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1;\n};\n\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\n\nfunction hexWrite(buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n\n    if (length > remaining) {\n      length = remaining;\n    }\n  } // must be an even number of digits\n\n\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i;\n    buf[offset + i] = parsed;\n  }\n\n  return i;\n}\n\nfunction utf8Write(buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nfunction asciiWrite(buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\n\nfunction latin1Write(buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length);\n}\n\nfunction base64Write(buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\n\nfunction ucs2Write(buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0; // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0; // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    } // legacy write(string, encoding, offset, length) - remove in v0.13\n\n  } else {\n    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds');\n  }\n\n  if (!encoding) encoding = 'utf8';\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length);\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length);\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON() {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  };\n};\n\nfunction base64Slice(buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf);\n  } else {\n    return base64.fromByteArray(buf.slice(start, end));\n  }\n}\n\nfunction utf8Slice(buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n  var i = start;\n\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n\n          break;\n\n        case 2:\n          secondByte = buf[i + 1];\n\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res);\n} // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\n\n\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray(codePoints) {\n  var len = codePoints.length;\n\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n  } // Decode in chunks to avoid \"call stack size exceeded\".\n\n\n  var res = '';\n  var i = 0;\n\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n\n  return res;\n}\n\nfunction asciiSlice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n\n  return ret;\n}\n\nfunction latin1Slice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n\n  return ret;\n}\n\nfunction hexSlice(buf, start, end) {\n  var len = buf.length;\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n  var out = '';\n\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n\n  return out;\n}\n\nfunction utf16leSlice(buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n\n  return res;\n}\n\nBuffer.prototype.slice = function slice(start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n  var newBuf;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\n\n\nfunction checkOffset(offset, ext, length) {\n  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset];\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | this[offset + 1] << 8;\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] << 8 | this[offset + 1];\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\n\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return this[offset];\n  return (0xff - this[offset] + 1) * -1;\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | this[offset + 1] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | this[offset] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, true, 23, 4);\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, false, 23, 4);\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, true, 52, 8);\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, false, 52, 8);\n};\n\nfunction checkInt(buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nfunction objectWriteUInt16(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nfunction objectWriteUInt32(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  if (offset < 0) throw new RangeError('Index out of range');\n}\n\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4;\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert);\n};\n\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8;\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert);\n}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\n\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n  if (end === start) return 0;\n  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds');\n  }\n\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n  if (end > this.length) end = this.length;\n\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n  }\n\n  return len;\n}; // Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\n\n\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n\n      if (code < 256) {\n        val = code;\n      }\n    }\n\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string');\n    }\n\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  } // Invalid ranges are not set to a default, so can range check early.\n\n\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index');\n  }\n\n  if (end <= start) {\n    return this;\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n  if (!val) val = 0;\n  var i;\n\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this;\n}; // HELPER FUNCTIONS\n// ================\n\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean(str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\n\n  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n\n  return str;\n}\n\nfunction stringtrim(str) {\n  if (str.trim) return str.trim();\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}\n\nfunction utf8ToBytes(string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i); // is surrogate component\n\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } // valid lead\n\n\n        leadSurrogate = codePoint;\n        continue;\n      } // 2 leads in a row\n\n\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue;\n      } // valid surrogate pair\n\n\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null; // encode utf8\n\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n\n  return bytes;\n}\n\nfunction asciiToBytes(str) {\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n\n  return byteArray;\n}\n\nfunction utf16leToBytes(str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break;\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray;\n}\n\nfunction base64ToBytes(str) {\n  return base64.toByteArray(base64clean(str));\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) break;\n    dst[i + offset] = src[i];\n  }\n\n  return i;\n}\n\nfunction isnan(val) {\n  return val !== val; // eslint-disable-line no-self-compare\n}","\"use strict\";\n\n;\n\n(function (globalObject) {\n  'use strict';\n  /*\r\n   *      bignumber.js v9.0.0\r\n   *      A JavaScript library for arbitrary-precision arithmetic.\r\n   *      https://github.com/MikeMcl/bignumber.js\r\n   *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *      MIT Licensed.\r\n   *\r\n   *      BigNumber.prototype methods     |  BigNumber methods\r\n   *                                      |\r\n   *      absoluteValue            abs    |  clone\r\n   *      comparedTo                      |  config               set\r\n   *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n   *      dividedBy                div    |      ROUNDING_MODE\r\n   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n   *      exponentiatedBy          pow    |      RANGE\r\n   *      integerValue                    |      CRYPTO\r\n   *      isEqualTo                eq     |      MODULO_MODE\r\n   *      isFinite                        |      POW_PRECISION\r\n   *      isGreaterThan            gt     |      FORMAT\r\n   *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n   *      isInteger                       |  isBigNumber\r\n   *      isLessThan               lt     |  maximum              max\r\n   *      isLessThanOrEqualTo      lte    |  minimum              min\r\n   *      isNaN                           |  random\r\n   *      isNegative                      |  sum\r\n   *      isPositive                      |\r\n   *      isZero                          |\r\n   *      minus                           |\r\n   *      modulo                   mod    |\r\n   *      multipliedBy             times  |\r\n   *      negated                         |\r\n   *      plus                            |\r\n   *      precision                sd     |\r\n   *      shiftedBy                       |\r\n   *      squareRoot               sqrt   |\r\n   *      toExponential                   |\r\n   *      toFixed                         |\r\n   *      toFormat                        |\r\n   *      toFraction                      |\r\n   *      toJSON                          |\r\n   *      toNumber                        |\r\n   *      toPrecision                     |\r\n   *      toString                        |\r\n   *      valueOf                         |\r\n   *\r\n   */\n\n  var BigNumber,\n      isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n      mathceil = Math.ceil,\n      mathfloor = Math.floor,\n      bignumberError = '[BigNumber Error] ',\n      tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n      BASE = 1e14,\n      LOG_BASE = 14,\n      MAX_SAFE_INTEGER = 0x1fffffffffffff,\n      // 2^53 - 1\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n      SQRT_BASE = 1e7,\n      // EDITABLE\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n  MAX = 1E9; // 0 to MAX_INT32\n\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\n\n  function clone(configObject) {\n    var div,\n        convertBase,\n        parseNumeric,\n        P = BigNumber.prototype = {\n      constructor: BigNumber,\n      toString: null,\n      valueOf: null\n    },\n        ONE = new BigNumber(1),\n        //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n    // The default values below must be integers within the inclusive ranges stated.\n    // The values can also be changed at run-time using BigNumber.set.\n    // The maximum number of decimal places for operations involving division.\n    DECIMAL_PLACES = 20,\n        // 0 to MAX\n    // The rounding mode used when rounding to the above decimal places, and when using\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n    // UP         0 Away from zero.\n    // DOWN       1 Towards zero.\n    // CEIL       2 Towards +Infinity.\n    // FLOOR      3 Towards -Infinity.\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    ROUNDING_MODE = 4,\n        // 0 to 8\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n    // The exponent value at and beneath which toString returns exponential notation.\n    // Number type: -7\n    TO_EXP_NEG = -7,\n        // 0 to -MAX\n    // The exponent value at and above which toString returns exponential notation.\n    // Number type: 21\n    TO_EXP_POS = 21,\n        // 0 to MAX\n    // RANGE : [MIN_EXP, MAX_EXP]\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // Number type: -324  (5e-324)\n    MIN_EXP = -1e7,\n        // -1 to -MAX\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // Number type:  308  (1.7976931348623157e+308)\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n    MAX_EXP = 1e7,\n        // 1 to MAX\n    // Whether to use cryptographically-secure random number generation, if available.\n    CRYPTO = false,\n        // true or false\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN      1 The remainder has the same sign as the dividend.\n    //             This modulo mode is commonly known as 'truncated division' and is\n    //             equivalent to (a % n) in JavaScript.\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n    //             The remainder is always positive.\n    //\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n    // modes are commonly used for the modulus operation.\n    // Although the other rounding modes can also be used, they may not give useful results.\n    MODULO_MODE = 1,\n        // 0 to 9\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\n    POW_PRECISION = 0,\n        // 0 to MAX\n    // The format specification used by the BigNumber.prototype.toFormat method.\n    FORMAT = {\n      prefix: '',\n      groupSize: 3,\n      secondaryGroupSize: 0,\n      groupSeparator: ',',\n      decimalSeparator: '.',\n      fractionGroupSize: 0,\n      fractionGroupSeparator: '\\xA0',\n      // non-breaking space\n      suffix: ''\n    },\n        // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n    // '-', '.', whitespace, or repeated character.\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; //------------------------------------------------------------------------------------------\n    // CONSTRUCTOR\n\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\n\n    function BigNumber(v, b) {\n      var alphabet,\n          c,\n          caseChanged,\n          e,\n          i,\n          isNum,\n          len,\n          str,\n          x = this; // Enable constructor call without `new`.\n\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n\n      if (b == null) {\n        if (v && v._isBigNumber === true) {\n          x.s = v.s;\n\n          if (!v.c || v.e > MAX_EXP) {\n            x.c = x.e = null;\n          } else if (v.e < MIN_EXP) {\n            x.c = [x.e = 0];\n          } else {\n            x.e = v.e;\n            x.c = v.c.slice();\n          }\n\n          return;\n        }\n\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\n          // Use `1 / n` to handle minus zero also.\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1; // Fast path for integers, where n < 2147483648 (2**31).\n\n          if (v === ~~v) {\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\n\n            if (e > MAX_EXP) {\n              x.c = x.e = null;\n            } else {\n              x.e = e;\n              x.c = [v];\n            }\n\n            return;\n          }\n\n          str = String(v);\n        } else {\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n        } // Decimal point?\n\n\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n        if ((i = str.search(/e/i)) > 0) {\n          // Determine exponent.\n          if (e < 0) e = i;\n          e += +str.slice(i + 1);\n          str = str.substring(0, i);\n        } else if (e < 0) {\n          // Integer.\n          e = str.length;\n        }\n      } else {\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n        intCheck(b, 2, ALPHABET.length, 'Base'); // Allow exponential notation to be used with base 10 argument, while\n        // also rounding to DECIMAL_PLACES as with other bases.\n\n        if (b == 10) {\n          x = new BigNumber(v);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        }\n\n        str = String(v);\n\n        if (isNum = typeof v == 'number') {\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            throw Error(tooManyDigits + v);\n          }\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        alphabet = ALPHABET.slice(0, b);\n        e = i = 0; // Check that str is a valid base b number.\n        // Don't use RegExp, so alphabet can contain special characters.\n\n        for (len = str.length; i < len; i++) {\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n            if (c == '.') {\n              // If '.' is not the first character and it has not be found before.\n              if (i > e) {\n                e = len;\n                continue;\n              }\n            } else if (!caseChanged) {\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n                caseChanged = true;\n                i = -1;\n                e = 0;\n                continue;\n              }\n            }\n\n            return parseNumeric(x, String(v), isNum, b);\n          }\n        } // Prevent later check for length on converted number.\n\n\n        isNum = false;\n        str = convertBase(str, b, 10, x.s); // Decimal point?\n\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n      } // Determine leading zeros.\n\n\n      for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.\n\n\n      for (len = str.length; str.charCodeAt(--len) === 48;);\n\n      if (str = str.slice(i, ++len)) {\n        len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n        if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n          throw Error(tooManyDigits + x.s * v);\n        } // Overflow?\n\n\n        if ((e = e - i - 1) > MAX_EXP) {\n          // Infinity.\n          x.c = x.e = null; // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = []; // Transform base\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE; // i < 1\n\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n\n            i = LOG_BASE - (str = str.slice(i)).length;\n          } else {\n            i -= len;\n          }\n\n          for (; i--; str += '0');\n\n          x.c.push(+str);\n        }\n      } else {\n        // Zero.\n        x.c = [x.e = 0];\n      }\n    } // CONSTRUCTOR PROPERTIES\n\n\n    BigNumber.clone = clone;\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\n\n    BigNumber.config = BigNumber.set = function (obj) {\n      var p, v;\n\n      if (obj != null) {\n        if (typeof obj == 'object') {\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            DECIMAL_PLACES = v;\n          } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 8, p);\n            ROUNDING_MODE = v;\n          } // EXPONENTIAL_AT {number|number[]}\n          // Integer, -MAX to MAX inclusive or\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n            v = obj[p];\n\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, 0, p);\n              intCheck(v[1], 0, MAX, p);\n              TO_EXP_NEG = v[0];\n              TO_EXP_POS = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n            }\n          } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'RANGE')) {\n            v = obj[p];\n\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, -1, p);\n              intCheck(v[1], 1, MAX, p);\n              MIN_EXP = v[0];\n              MAX_EXP = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n\n              if (v) {\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n              } else {\n                throw Error(bignumberError + p + ' cannot be zero: ' + v);\n              }\n            }\n          } // CRYPTO {boolean} true or false.\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\n          // '[BigNumber Error] crypto unavailable'\n\n\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\n            v = obj[p];\n\n            if (v === !!v) {\n              if (v) {\n                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                  CRYPTO = v;\n                } else {\n                  CRYPTO = !v;\n                  throw Error(bignumberError + 'crypto unavailable');\n                }\n              } else {\n                CRYPTO = v;\n              }\n            } else {\n              throw Error(bignumberError + p + ' not true or false: ' + v);\n            }\n          } // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 9, p);\n            MODULO_MODE = v;\n          } // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            POW_PRECISION = v;\n          } // FORMAT {object}\n          // '[BigNumber Error] FORMAT not an object: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\n            v = obj[p];\n            if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n          } // ALPHABET {string}\n          // '[BigNumber Error] ALPHABET invalid: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\n            v = obj[p]; // Disallow if only one character,\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\n\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\n              ALPHABET = v;\n            } else {\n              throw Error(bignumberError + p + ' invalid: ' + v);\n            }\n          }\n        } else {\n          // '[BigNumber Error] Object expected: {v}'\n          throw Error(bignumberError + 'Object expected: ' + obj);\n        }\n      }\n\n      return {\n        DECIMAL_PLACES: DECIMAL_PLACES,\n        ROUNDING_MODE: ROUNDING_MODE,\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n        RANGE: [MIN_EXP, MAX_EXP],\n        CRYPTO: CRYPTO,\n        MODULO_MODE: MODULO_MODE,\n        POW_PRECISION: POW_PRECISION,\n        FORMAT: FORMAT,\n        ALPHABET: ALPHABET\n      };\n    };\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\n\n\n    BigNumber.isBigNumber = function (v) {\n      if (!v || v._isBigNumber !== true) return false;\n      if (!BigNumber.DEBUG) return true;\n      var i,\n          n,\n          c = v.c,\n          e = v.e,\n          s = v.s;\n\n      out: if ({}.toString.call(c) == '[object Array]') {\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n          // If the first element is zero, the BigNumber value must be zero.\n          if (c[0] === 0) {\n            if (e === 0 && c.length === 1) return true;\n            break out;\n          } // Calculate number of digits that c[0] should have, based on the exponent.\n\n\n          i = (e + 1) % LOG_BASE;\n          if (i < 1) i += LOG_BASE; // Calculate number of digits of c[0].\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n\n          if (String(c[0]).length == i) {\n            for (i = 0; i < c.length; i++) {\n              n = c[i];\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n            } // Last element cannot be zero, unless it is the only element.\n\n\n            if (n !== 0) return true;\n          }\n        } // Infinity/NaN\n\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n        return true;\n      }\n\n      throw Error(bignumberError + 'Invalid BigNumber: ' + v);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.maximum = BigNumber.max = function () {\n      return maxOrMin(arguments, P.lt);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.minimum = BigNumber.min = function () {\n      return maxOrMin(arguments, P.gt);\n    };\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\n\n\n    BigNumber.random = function () {\n      var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n\n      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n        return mathfloor(Math.random() * pow2_53);\n      } : function () {\n        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n      };\n      return function (dp) {\n        var a,\n            b,\n            e,\n            k,\n            v,\n            i = 0,\n            c = [],\n            rand = new BigNumber(ONE);\n        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n        k = mathceil(dp / LOG_BASE);\n\n        if (CRYPTO) {\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto.getRandomValues) {\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n            for (; i < k;) {\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n\n            i = k / 2; // Node.js supporting crypto.randomBytes.\n          } else if (crypto.randomBytes) {\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n\n            for (; i < k;) {\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n\n            i = k / 7;\n          } else {\n            CRYPTO = false;\n            throw Error(bignumberError + 'crypto unavailable');\n          }\n        } // Use Math.random.\n\n\n        if (!CRYPTO) {\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n\n        k = c[--i];\n        dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.\n\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        } // Remove trailing elements which are zero.\n\n\n        for (; c[i] === 0; c.pop(), i--); // Zero?\n\n\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE); // Count the digits of the first element of c to determine leading zeros, and...\n\n\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++); // adjust the exponent accordingly.\n\n\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    }();\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.sum = function () {\n      var i = 1,\n          args = arguments,\n          sum = new BigNumber(args[0]);\n\n      for (; i < args.length;) sum = sum.plus(args[i++]);\n\n      return sum;\n    }; // PRIVATE FUNCTIONS\n    // Called by BigNumber and BigNumber.prototype.toString.\n\n\n    convertBase = function () {\n      var decimal = '0123456789';\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\n\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\n        var j,\n            arr = [0],\n            arrL,\n            i = 0,\n            len = str.length;\n\n        for (; i < len;) {\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n          arr[0] += alphabet.indexOf(str.charAt(i++));\n\n          for (j = 0; j < arr.length; j++) {\n            if (arr[j] > baseOut - 1) {\n              if (arr[j + 1] == null) arr[j + 1] = 0;\n              arr[j + 1] += arr[j] / baseOut | 0;\n              arr[j] %= baseOut;\n            }\n          }\n        }\n\n        return arr.reverse();\n      } // Convert a numeric string of baseIn to a numeric string of baseOut.\n      // If the caller is toString, we are converting from base 10 to baseOut.\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\n\n\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\n        var alphabet,\n            d,\n            e,\n            k,\n            r,\n            x,\n            xc,\n            y,\n            i = str.indexOf('.'),\n            dp = DECIMAL_PLACES,\n            rm = ROUNDING_MODE; // Non-integer.\n\n        if (i >= 0) {\n          k = POW_PRECISION; // Unlimited precision.\n\n          POW_PRECISION = 0;\n          str = str.replace('.', '');\n          y = new BigNumber(baseIn);\n          x = y.pow(str.length - i);\n          POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the\n          // result by its base raised to a power.\n\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n          y.e = y.c.length;\n        } // Convert the number as integer.\n\n\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.\n\n        e = k = xc.length; // Remove trailing zeros.\n\n        for (; xc[--k] == 0; xc.pop()); // Zero?\n\n\n        if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.\n\n        if (i < 0) {\n          --e;\n        } else {\n          x.c = xc;\n          x.e = e; // The sign is needed for correct rounding.\n\n          x.s = sign;\n          x = div(x, y, dp, rm, baseOut);\n          xc = x.c;\n          r = x.r;\n          e = x.e;\n        } // xc now represents str converted to baseOut.\n        // THe index of the rounding digit.\n\n\n        d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.\n\n        i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.\n\n        k = baseOut / 2;\n        r = r || d < 0 || xc[d + 1] != null;\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\n        // such as 0.00001.\n\n        if (d < 1 || !xc[0]) {\n          // 1^-dp or 0\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n        } else {\n          // Truncate xc to the required number of decimal places.\n          xc.length = d; // Round up?\n\n          if (r) {\n            // Rounding up may mean the previous digit has to be rounded up and so on.\n            for (--baseOut; ++xc[--d] > baseOut;) {\n              xc[d] = 0;\n\n              if (!d) {\n                ++e;\n                xc = [1].concat(xc);\n              }\n            }\n          } // Determine trailing zeros.\n\n\n          for (k = xc.length; !xc[--k];); // E.g. [4, 11, 15] becomes 4bf.\n\n\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])); // Add leading zeros, decimal point and trailing zeros as required.\n\n\n          str = toFixedPoint(str, e, alphabet.charAt(0));\n        } // The caller will add the sign.\n\n\n        return str;\n      };\n    }(); // Perform division in the specified base. Called by div and convertBase.\n\n\n    div = function () {\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m,\n            temp,\n            xlo,\n            xhi,\n            carry = 0,\n            i = x.length,\n            klo = k % SQRT_BASE,\n            khi = k / SQRT_BASE | 0;\n\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n\n        if (carry) x = [carry].concat(x);\n        return x;\n      }\n\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n          for (i = cmp = 0; i < aL; i++) {\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n\n        return cmp;\n      }\n\n      function subtract(a, b, aL, base) {\n        var i = 0; // Subtract b from a.\n\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        } // Remove leading zeros.\n\n\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\n      } // x: dividend, y: divisor.\n\n\n      return function (x, y, dp, rm, base) {\n        var cmp,\n            e,\n            i,\n            more,\n            n,\n            prod,\n            prodL,\n            q,\n            qc,\n            rem,\n            remL,\n            rem0,\n            xi,\n            xL,\n            yc0,\n            yL,\n            yz,\n            s = x.s == y.s ? 1 : -1,\n            xc = x.c,\n            yc = y.c; // Either NaN, Infinity or 0?\n\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n          return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n        }\n\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        } // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n\n\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n        if (yc[i] > (xc[i] || 0)) e--;\n\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n          for (; remL < yL; rem[remL++] = 0);\n\n          yz = yc.slice();\n          yz = [0].concat(yz);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0; // Compare divisor and remainder.\n\n            cmp = compare(yc, rem, yL, remL); // If divisor < remainder.\n\n            if (cmp < 0) {\n              // Calculate trial digit, n.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.\n\n              n = mathfloor(rem0 / yc0); //  Algorithm:\n              //  product = divisor multiplied by trial digit (n).\n              //  Compare product and remainder.\n              //  If product is greater than remainder:\n              //    Subtract divisor from product, decrement trial digit.\n              //  Subtract product from remainder.\n              //  If product was less than remainder at the last compare:\n              //    Compare new remainder and divisor.\n              //    If remainder is greater than divisor:\n              //      Subtract divisor from remainder, increment trial digit.\n\n              if (n > 1) {\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1; // product = divisor * trial digit.\n\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length; // Compare product and remainder.\n                // If product > remainder then trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--; // Subtract divisor from product.\n\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                } // product = divisor\n\n\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n\n              if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.\n\n              subtract(rem, prod, remL, base);\n              remL = rem.length; // If product was < remainder.\n\n              if (cmp == -1) {\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++; // Subtract divisor from remainder.\n\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n            // Add the next digit, n, to the result array.\n\n\n            qc[i++] = n; // Update the remainder.\n\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n\n          more = rem[0] != null; // Leading zero?\n\n          if (!qc[0]) qc.splice(0, 1);\n        }\n\n        if (base == BASE) {\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n\n        return q;\n      };\n    }();\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\n\n\n    function format(n, i, rm, id) {\n      var c0, e, ne, len, str;\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      if (!n.c) return n.toString();\n      c0 = n.c[0];\n      ne = n.e;\n\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n      } else {\n        n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.\n\n        e = n.e;\n        str = coeffToString(n.c);\n        len = str.length; // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n        // Exponential notation.\n\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n          // Append zeros?\n          for (; len < i; str += '0', len++);\n\n          str = toExponential(str, e); // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e, '0'); // Append zeros?\n\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0');\n          } else {\n            i += e - len;\n\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n\n              for (; i--; str += '0');\n            }\n          }\n        }\n      }\n\n      return n.s < 0 && c0 ? '-' + str : str;\n    } // Handle BigNumber.max and BigNumber.min.\n\n\n    function maxOrMin(args, method) {\n      var n,\n          i = 1,\n          m = new BigNumber(args[0]);\n\n      for (; i < args.length; i++) {\n        n = new BigNumber(args[i]); // If any number is NaN, return NaN.\n\n        if (!n.s) {\n          m = n;\n          break;\n        } else if (method.call(m, n)) {\n          m = n;\n        }\n      }\n\n      return m;\n    }\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\n\n\n    function normalise(n, c, e) {\n      var i = 1,\n          j = c.length; // Remove trailing zeros.\n\n      for (; !c[--j]; c.pop()); // Calculate the base 10 exponent. First get the number of digits of c[0].\n\n\n      for (j = c[0]; j >= 10; j /= 10, i++); // Overflow?\n\n\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n        // Infinity.\n        n.c = n.e = null; // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n\n      return n;\n    } // Handle values that fail the validity test in BigNumber.\n\n\n    parseNumeric = function () {\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n          dotAfter = /^([^.]+)\\.$/,\n          dotBefore = /^\\.([^.]+)$/,\n          isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n          whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n      return function (x, str, isNum, b) {\n        var base,\n            s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.\n\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        } else {\n          if (!isNum) {\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n\n            if (b) {\n              base = b; // E.g. '1.' to '1', '.1' to '0.1'\n\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n\n            if (str != s) return new BigNumber(s, base);\n          } // '[BigNumber Error] Not a number: {n}'\n          // '[BigNumber Error] Not a base {b} number: {n}'\n\n\n          if (BigNumber.DEBUG) {\n            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n          } // NaN\n\n\n          x.s = null;\n        }\n\n        x.c = x.e = null;\n      };\n    }();\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\n\n\n    function round(x, sd, rm, r) {\n      var d,\n          i,\n          j,\n          k,\n          n,\n          ni,\n          rd,\n          xc = x.c,\n          pows10 = POWS_TEN; // if x is not Infinity or NaN...\n\n      if (xc) {\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n\n          i = sd - d; // If the rounding digit is in the first element of xc...\n\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0]; // Get the rounding digit at index j of n.\n\n            rd = n / pows10[d - j - 1] % 10 | 0;\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n\n            if (ni >= xc.length) {\n              if (r) {\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0));\n\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni]; // Get the number of digits of n.\n\n              for (d = 1; k >= 10; k /= 10, d++); // Get the index of rd within n.\n\n\n              i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n\n              j = i - LOG_BASE + d; // Get the rounding digit at index j of n.\n\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n            }\n          }\n\n          r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n\n            if (r) {\n              // Convert sd to decimal places.\n              sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n\n            return x;\n          } // Remove excess digits.\n\n\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          } // Round up?\n\n\n          if (r) {\n            for (;;) {\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n\n                j = xc[0] += k;\n\n                for (k = 1; j >= 10; j /= 10, k++); // if i != k the length has increased.\n\n\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          } // Remove trailing zeros.\n\n\n          for (i = xc.length; xc[--i] === 0; xc.pop());\n        } // Overflow? Infinity.\n\n\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null; // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n\n      return x;\n    }\n\n    function valueOf(n) {\n      var str,\n          e = n.e;\n      if (e === null) return n.toString();\n      str = coeffToString(n.c);\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n      return n.s < 0 ? '-' + str : str;\n    } // PROTOTYPE/INSTANCE METHODS\n\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\n\n\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\n\n\n    P.comparedTo = function (y, b) {\n      return compare(this, new BigNumber(y, b));\n    };\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.decimalPlaces = P.dp = function (dp, rm) {\n      var c,\n          n,\n          v,\n          x = this;\n\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), dp + x.e + 1, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.\n\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n      if (n < 0) n = 0;\n      return n;\n    };\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n\n\n    P.dividedBy = P.div = function (y, b) {\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\n\n\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\n\n\n    P.exponentiatedBy = P.pow = function (n, m) {\n      var half,\n          isModExp,\n          i,\n          k,\n          more,\n          nIsBig,\n          nIsNeg,\n          nIsOdd,\n          y,\n          x = this;\n      n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.\n\n      if (n.c && !n.isInteger()) {\n        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));\n      }\n\n      if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.\n\n      nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n        // The sign of the result of pow when x is negative depends on the evenness of n.\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\n        return m ? y.mod(m) : y;\n      }\n\n      nIsNeg = n.s < 0;\n\n      if (m) {\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n        if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n        // If x is negative and n is odd, k = -0, else k = 0.\n        k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.\n\n        if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.\n\n        return new BigNumber(nIsNeg ? 1 / k : k);\n      } else if (POW_PRECISION) {\n        // Truncating each coefficient array to a length of k after each multiplication\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\n        // i.e. there will be a minimum of 28 guard digits retained.\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\n      }\n\n      if (nIsBig) {\n        half = new BigNumber(0.5);\n        if (nIsNeg) n.s = 1;\n        nIsOdd = isOdd(n);\n      } else {\n        i = Math.abs(+valueOf(n));\n        nIsOdd = i % 2;\n      }\n\n      y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.\n\n      for (;;) {\n        if (nIsOdd) {\n          y = y.times(x);\n          if (!y.c) break;\n\n          if (k) {\n            if (y.c.length > k) y.c.length = k;\n          } else if (isModExp) {\n            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n          }\n        }\n\n        if (i) {\n          i = mathfloor(i / 2);\n          if (i === 0) break;\n          nIsOdd = i % 2;\n        } else {\n          n = n.times(half);\n          round(n, n.e + 1, 1);\n\n          if (n.e > 14) {\n            nIsOdd = isOdd(n);\n          } else {\n            i = +valueOf(n);\n            if (i === 0) break;\n            nIsOdd = i % 2;\n          }\n        }\n\n        x = x.times(x);\n\n        if (k) {\n          if (x.c && x.c.length > k) x.c.length = k;\n        } else if (isModExp) {\n          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n        }\n      }\n\n      if (isModExp) return y;\n      if (nIsNeg) y = ONE.div(y);\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\n\n\n    P.integerValue = function (rm) {\n      var n = new BigNumber(this);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(n, n.e + 1, rm);\n    };\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isEqualTo = P.eq = function (y, b) {\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\n\n\n    P.isFinite = function () {\n      return !!this.c;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isGreaterThan = P.gt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n\n\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\n\n\n    P.isInteger = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isLessThan = P.lt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n\n\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\n\n\n    P.isNaN = function () {\n      return !this.s;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\n\n\n    P.isNegative = function () {\n      return this.s < 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\n\n\n    P.isPositive = function () {\n      return this.s > 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\n\n\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.minus = function (y, b) {\n      var i,\n          j,\n          t,\n          xLTy,\n          x = this,\n          a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?\n\n        if (!xc[0] || !yc[0]) {\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n          ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Determine which is the bigger number.\n\n      if (a = xe - ye) {\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n\n        t.reverse(); // Prepend zeros to equalise exponents.\n\n        for (b = a; b--; t.push(0));\n\n        t.reverse();\n      } else {\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n        for (a = b = 0; b < j; b++) {\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      } // x < y? Point xc to the array of the bigger number.\n\n\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n      b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n\n      if (b > 0) for (; b--; xc[i++] = 0);\n      b = BASE - 1; // Subtract yc from xc.\n\n      for (; j > a;) {\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b);\n\n          --xc[i];\n          xc[j] += BASE;\n        }\n\n        xc[j] -= yc[j];\n      } // Remove leading zeros and adjust exponent accordingly.\n\n\n      for (; xc[0] == 0; xc.splice(0, 1), --ye); // Zero?\n\n\n      if (!xc[0]) {\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\n\n\n    P.modulo = P.mod = function (y, b) {\n      var q,\n          s,\n          x = this;\n      y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN); // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n\n      if (MODULO_MODE == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n\n      y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.\n\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n      return y;\n    };\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\n\n\n    P.multipliedBy = P.times = function (y, b) {\n      var c,\n          e,\n          i,\n          j,\n          k,\n          m,\n          xcL,\n          xlo,\n          xhi,\n          ycL,\n          ylo,\n          yhi,\n          zc,\n          base,\n          sqrtBase,\n          x = this,\n          xc = x.c,\n          yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?\n\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s; // Return ±Infinity if either is ±Infinity.\n\n          if (!xc || !yc) {\n            y.c = y.e = null; // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n\n        return y;\n      }\n\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length; // Ensure xc points to longer array and xcL to its length.\n\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.\n\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n\n        zc[j] = c;\n      }\n\n      if (c) {\n        ++e;\n      } else {\n        zc.splice(0, 1);\n      }\n\n      return normalise(y, zc, e);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\n\n\n    P.negated = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.plus = function (y, b) {\n      var t,\n          x = this,\n          a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0); // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n\n        t.reverse();\n\n        for (; a--; t.push(0));\n\n        t.reverse();\n      }\n\n      a = xc.length;\n      b = yc.length; // Point xc to the longer array, and b to the shorter length.\n\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n      }\n\n      if (a) {\n        xc = [a].concat(xc);\n        ++ye;\n      } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n\n\n    P.precision = P.sd = function (sd, rm) {\n      var c,\n          n,\n          v,\n          x = this;\n\n      if (sd != null && sd !== !!sd) {\n        intCheck(sd, 1, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), sd, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n\n      if (v = c[v]) {\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--); // Add the number of digits of the first element.\n\n\n        for (v = c[0]; v >= 10; v /= 10, n++);\n      }\n\n      if (sd && x.e + 1 > n) n = x.e + 1;\n      return n;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\n\n\n    P.shiftedBy = function (k) {\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      return this.times('1e' + k);\n    };\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n\n\n    P.squareRoot = P.sqrt = function () {\n      var m,\n          n,\n          r,\n          rep,\n          t,\n          x = this,\n          c = x.c,\n          s = x.s,\n          e = x.e,\n          dp = DECIMAL_PLACES + 4,\n          half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      } // Initial estimate.\n\n\n      s = Math.sqrt(+valueOf(x)); // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(+n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n        if (s == 1 / 0) {\n          n = '1e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      } // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n\n\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0; // Newton-Raphson iteration.\n\n        for (;;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n\n            if (n == '9999' || !rep && n == '4999') {\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.toExponential = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp++;\n      }\n\n      return format(this, dp, rm, 1);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.toFixed = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp = dp + this.e + 1;\n      }\n\n      return format(this, dp, rm);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\n\n\n    P.toFormat = function (dp, rm, format) {\n      var str,\n          x = this;\n\n      if (format == null) {\n        if (dp != null && rm && typeof rm == 'object') {\n          format = rm;\n          rm = null;\n        } else if (dp && typeof dp == 'object') {\n          format = dp;\n          dp = rm = null;\n        } else {\n          format = FORMAT;\n        }\n      } else if (typeof format != 'object') {\n        throw Error(bignumberError + 'Argument not an object: ' + format);\n      }\n\n      str = x.toFixed(dp, rm);\n\n      if (x.c) {\n        var i,\n            arr = str.split('.'),\n            g1 = +format.groupSize,\n            g2 = +format.secondaryGroupSize,\n            groupSeparator = format.groupSeparator || '',\n            intPart = arr[0],\n            fractionPart = arr[1],\n            isNeg = x.s < 0,\n            intDigits = isNeg ? intPart.slice(1) : intPart,\n            len = intDigits.length;\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\n\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n\n        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;\n      }\n\n      return (format.prefix || '') + str + (format.suffix || '');\n    };\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\n\n\n    P.toFraction = function (md) {\n      var d,\n          d0,\n          d1,\n          d2,\n          e,\n          exp,\n          n,\n          n0,\n          n1,\n          q,\n          r,\n          s,\n          x = this,\n          xc = x.c;\n\n      if (md != null) {\n        n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.\n\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n        }\n      }\n\n      if (!xc) return new BigNumber(x);\n      d = new BigNumber(ONE);\n      n1 = d0 = new BigNumber(ONE);\n      d1 = n0 = new BigNumber(ONE);\n      s = coeffToString(xc); // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s); // n0 = d1 = 0\n\n      n0.c[0] = 0;\n\n      for (;;) {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.comparedTo(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e = e * 2; // Determine which fraction is closer to x, n0/d0 or n1/d1\n\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n      MAX_EXP = exp;\n      return r;\n    };\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\n\n\n    P.toNumber = function () {\n      return +valueOf(this);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n\n\n    P.toPrecision = function (sd, rm) {\n      if (sd != null) intCheck(sd, 1, MAX);\n      return format(this, sd, rm, 2);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\n\n\n    P.toString = function (b) {\n      var str,\n          n = this,\n          s = n.s,\n          e = n.e; // Infinity or NaN?\n\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        if (b == null) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');\n        } else if (b === 10) {\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\n        } else {\n          intCheck(b, 2, ALPHABET.length, 'Base');\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n        }\n\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n\n      return str;\n    };\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\n\n\n    P.valueOf = P.toJSON = function () {\n      return valueOf(this);\n    };\n\n    P._isBigNumber = true;\n    if (configObject != null) BigNumber.set(configObject);\n    return BigNumber;\n  } // PRIVATE HELPER FUNCTIONS\n  // These functions don't need access to variables,\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  } // Return a coefficient array as a string of base 10 digits.\n\n\n  function coeffToString(a) {\n    var s,\n        z,\n        i = 1,\n        j = a.length,\n        r = a[0] + '';\n\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n\n      for (; z--; s = '0' + s);\n\n      r += s;\n    } // Determine trailing zeros.\n\n\n    for (j = r.length; r.charCodeAt(--j) === 48;);\n\n    return r.slice(0, j + 1 || 1);\n  } // Compare the value of BigNumbers x and y.\n\n\n  function compare(x, y) {\n    var a,\n        b,\n        xc = x.c,\n        yc = y.c,\n        i = x.s,\n        j = y.s,\n        k = x.e,\n        l = y.e; // Either NaN?\n\n    if (!i || !j) return null;\n    a = xc && !xc[0];\n    b = yc && !yc[0]; // Either zero?\n\n    if (a || b) return a ? b ? 0 : -j : i; // Signs differ?\n\n    if (i != j) return i;\n    a = i < 0;\n    b = k == l; // Either Infinity?\n\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.\n\n    if (!b) return k > l ^ a ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1; // Compare lengths.\n\n\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\n\n\n  function intCheck(n, min, max, name) {\n    if (n < min || n > max || n !== mathfloor(n)) {\n      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));\n    }\n  } // Assumes finite n.\n\n\n  function isOdd(n) {\n    var k = n.c.length - 1;\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n  }\n\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n  }\n\n  function toFixedPoint(str, e, z) {\n    var len, zs; // Negative exponent?\n\n    if (e < 0) {\n      // Prepend zeros.\n      for (zs = z + '.'; ++e; zs += z);\n\n      str = zs + str; // Positive exponent\n    } else {\n      len = str.length; // Append zeros.\n\n      if (++e > len) {\n        for (zs = z, e -= len; --e; zs += z);\n\n        str += zs;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n\n    return str;\n  } // EXPORT\n\n\n  BigNumber = clone();\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber; // AMD.\n\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return BigNumber;\n    }); // Node.js and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber; // Browser.\n  } else {\n    if (!globalObject) {\n      globalObject = typeof self != 'undefined' && self ? self : window;\n    }\n\n    globalObject.BigNumber = BigNumber;\n  }\n})(void 0);","'use strict'\n\nconst Bignumber = require('bignumber.js').BigNumber\n\nexports.MT = {\n  POS_INT: 0,\n  NEG_INT: 1,\n  BYTE_STRING: 2,\n  UTF8_STRING: 3,\n  ARRAY: 4,\n  MAP: 5,\n  TAG: 6,\n  SIMPLE_FLOAT: 7\n}\n\nexports.TAG = {\n  DATE_STRING: 0,\n  DATE_EPOCH: 1,\n  POS_BIGINT: 2,\n  NEG_BIGINT: 3,\n  DECIMAL_FRAC: 4,\n  BIGFLOAT: 5,\n  BASE64URL_EXPECTED: 21,\n  BASE64_EXPECTED: 22,\n  BASE16_EXPECTED: 23,\n  CBOR: 24,\n  URI: 32,\n  BASE64URL: 33,\n  BASE64: 34,\n  REGEXP: 35,\n  MIME: 36\n}\n\nexports.NUMBYTES = {\n  ZERO: 0,\n  ONE: 24,\n  TWO: 25,\n  FOUR: 26,\n  EIGHT: 27,\n  INDEFINITE: 31\n}\n\nexports.SIMPLE = {\n  FALSE: 20,\n  TRUE: 21,\n  NULL: 22,\n  UNDEFINED: 23\n}\n\nexports.SYMS = {\n  NULL: Symbol('null'),\n  UNDEFINED: Symbol('undef'),\n  PARENT: Symbol('parent'),\n  BREAK: Symbol('break'),\n  STREAM: Symbol('stream')\n}\n\nexports.SHIFT32 = Math.pow(2, 32)\nexports.SHIFT16 = Math.pow(2, 16)\n\nexports.MAX_SAFE_HIGH = 0x1fffff\nexports.NEG_ONE = new Bignumber(-1)\nexports.TEN = new Bignumber(10)\nexports.TWO = new Bignumber(2)\n\nexports.PARENT = {\n  ARRAY: 0,\n  OBJECT: 1,\n  MAP: 2,\n  TAG: 3,\n  BYTE_STRING: 4,\n  UTF8_STRING: 5\n}\n","'use strict'\n\nconst { Buffer } = require('buffer')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst constants = require('./constants')\nconst SHIFT32 = constants.SHIFT32\nconst SHIFT16 = constants.SHIFT16\nconst MAX_SAFE_HIGH = 0x1fffff\n\nexports.parseHalf = function parseHalf (buf) {\n  var exp, mant, sign\n  sign = buf[0] & 0x80 ? -1 : 1\n  exp = (buf[0] & 0x7C) >> 2\n  mant = ((buf[0] & 0x03) << 8) | buf[1]\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant\n  } else if (exp === 0x1f) {\n    return sign * (mant ? 0 / 0 : 2e308)\n  } else {\n    return sign * Math.pow(2, exp - 25) * (1024 + mant)\n  }\n}\n\nfunction toHex (n) {\n  if (n < 16) {\n    return '0' + n.toString(16)\n  }\n\n  return n.toString(16)\n}\n\nexports.arrayBufferToBignumber = function (buf) {\n  const len = buf.byteLength\n  let res = ''\n  for (let i = 0; i < len; i++) {\n    res += toHex(buf[i])\n  }\n\n  return new Bignumber(res, 16)\n}\n\n// convert an Object into a Map\nexports.buildMap = (obj) => {\n  const res = new Map()\n  const keys = Object.keys(obj)\n  const length = keys.length\n  for (let i = 0; i < length; i++) {\n    res.set(keys[i], obj[keys[i]])\n  }\n  return res\n}\n\nexports.buildInt32 = (f, g) => {\n  return f * SHIFT16 + g\n}\n\nexports.buildInt64 = (f1, f2, g1, g2) => {\n  const f = exports.buildInt32(f1, f2)\n  const g = exports.buildInt32(g1, g2)\n\n  if (f > MAX_SAFE_HIGH) {\n    return new Bignumber(f).times(SHIFT32).plus(g)\n  } else {\n    return (f * SHIFT32) + g\n  }\n}\n\nexports.writeHalf = function writeHalf (buf, half) {\n  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n\n  const u32 = Buffer.allocUnsafe(4)\n  u32.writeFloatBE(half, 0)\n  const u = u32.readUInt32BE(0)\n\n  // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n\n  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion\n  if ((u & 0x1FFF) !== 0) {\n    return false\n  }\n\n  //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n  var s16 = (u >> 16) & 0x8000 // top bit is sign\n  const exp = (u >> 23) & 0xff // then 5 bits of exponent\n  const mant = u & 0x7fffff\n\n  //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n\n  // hildjj: zeros already handled.  Assert if you don't believe me.\n\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n  if ((exp >= 113) && (exp <= 142)) {\n    s16 += ((exp - 112) << 10) + (mant >> 13)\n\n  //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n  //     if (mant & ((1 << (126 - exp)) - 1))\n  //       goto float32;         /* loss of precision */\n  //     s16 += ((mant + 0x800000) >> (126 - exp));\n  } else if ((exp >= 103) && (exp < 113)) {\n    if (mant & ((1 << (126 - exp)) - 1)) {\n      return false\n    }\n    s16 += ((mant + 0x800000) >> (126 - exp))\n\n    //   } else if (exp == 255 && mant == 0) { /* Inf */\n    //     s16 += 0x7c00;\n\n    // hildjj: Infinity already handled\n\n  //   } else\n  //     goto float32;           /* loss of range */\n  } else {\n    return false\n  }\n\n  //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n  buf.writeUInt16BE(s16, 0)\n  return true\n}\n\nexports.keySorter = function (a, b) {\n  var lenA = a[0].byteLength\n  var lenB = b[0].byteLength\n\n  if (lenA > lenB) {\n    return 1\n  }\n\n  if (lenB > lenA) {\n    return -1\n  }\n\n  return a[0].compare(b[0])\n}\n\n// Adapted from http://www.2ality.com/2012/03/signedzero.html\nexports.isNegativeZero = (x) => {\n  return x === 0 && (1 / x < 0)\n}\n\nexports.nextPowerOf2 = (n) => {\n  let count = 0\n  // First n in the below condition is for\n  // the case where n is 0\n  if (n && !(n & (n - 1))) {\n    return n\n  }\n\n  while (n !== 0) {\n    n >>= 1\n    count += 1\n  }\n\n  return 1 << count\n}\n","\"use strict\";\n\nvar g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;","\"use strict\";\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n  i += d;\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = e << mLen | m;\n  eLen += mLen;\n\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n};","'use strict'\n\nconst { Buffer } = require('buffer')\nconst ieee754 = require('ieee754')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst parser = require('./decoder.asm')\nconst utils = require('./utils')\nconst c = require('./constants')\nconst Simple = require('./simple')\nconst Tagged = require('./tagged')\nconst { URL } = require('iso-url')\n\n/**\n * Transform binary cbor data into JavaScript objects.\n */\nclass Decoder {\n  /**\n   * @param {Object} [opts={}]\n   * @param {number} [opts.size=65536] - Size of the allocated heap.\n   */\n  constructor (opts) {\n    opts = opts || {}\n\n    if (!opts.size || opts.size < 0x10000) {\n      opts.size = 0x10000\n    } else {\n      // Ensure the size is a power of 2\n      opts.size = utils.nextPowerOf2(opts.size)\n    }\n\n    // Heap use to share the input with the parser\n    this._heap = new ArrayBuffer(opts.size)\n    this._heap8 = new Uint8Array(this._heap)\n    this._buffer = Buffer.from(this._heap)\n\n    this._reset()\n\n    // Known tags\n    this._knownTags = Object.assign({\n      0: (val) => new Date(val),\n      1: (val) => new Date(val * 1000),\n      2: (val) => utils.arrayBufferToBignumber(val),\n      3: (val) => c.NEG_ONE.minus(utils.arrayBufferToBignumber(val)),\n      4: (v) => {\n        // const v = new Uint8Array(val)\n        return c.TEN.pow(v[0]).times(v[1])\n      },\n      5: (v) => {\n        // const v = new Uint8Array(val)\n        return c.TWO.pow(v[0]).times(v[1])\n      },\n      32: (val) => new URL(val),\n      35: (val) => new RegExp(val)\n    }, opts.tags)\n\n    // Initialize asm based parser\n    this.parser = parser(global, {\n      // eslint-disable-next-line no-console\n      log: console.log.bind(console),\n      pushInt: this.pushInt.bind(this),\n      pushInt32: this.pushInt32.bind(this),\n      pushInt32Neg: this.pushInt32Neg.bind(this),\n      pushInt64: this.pushInt64.bind(this),\n      pushInt64Neg: this.pushInt64Neg.bind(this),\n      pushFloat: this.pushFloat.bind(this),\n      pushFloatSingle: this.pushFloatSingle.bind(this),\n      pushFloatDouble: this.pushFloatDouble.bind(this),\n      pushTrue: this.pushTrue.bind(this),\n      pushFalse: this.pushFalse.bind(this),\n      pushUndefined: this.pushUndefined.bind(this),\n      pushNull: this.pushNull.bind(this),\n      pushInfinity: this.pushInfinity.bind(this),\n      pushInfinityNeg: this.pushInfinityNeg.bind(this),\n      pushNaN: this.pushNaN.bind(this),\n      pushNaNNeg: this.pushNaNNeg.bind(this),\n      pushArrayStart: this.pushArrayStart.bind(this),\n      pushArrayStartFixed: this.pushArrayStartFixed.bind(this),\n      pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),\n      pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),\n      pushObjectStart: this.pushObjectStart.bind(this),\n      pushObjectStartFixed: this.pushObjectStartFixed.bind(this),\n      pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),\n      pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),\n      pushByteString: this.pushByteString.bind(this),\n      pushByteStringStart: this.pushByteStringStart.bind(this),\n      pushUtf8String: this.pushUtf8String.bind(this),\n      pushUtf8StringStart: this.pushUtf8StringStart.bind(this),\n      pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),\n      pushTagUnassigned: this.pushTagUnassigned.bind(this),\n      pushTagStart: this.pushTagStart.bind(this),\n      pushTagStart4: this.pushTagStart4.bind(this),\n      pushTagStart8: this.pushTagStart8.bind(this),\n      pushBreak: this.pushBreak.bind(this)\n    }, this._heap)\n  }\n\n  get _depth () {\n    return this._parents.length\n  }\n\n  get _currentParent () {\n    return this._parents[this._depth - 1]\n  }\n\n  get _ref () {\n    return this._currentParent.ref\n  }\n\n  // Finish the current parent\n  _closeParent () {\n    var p = this._parents.pop()\n\n    if (p.length > 0) {\n      throw new Error(`Missing ${p.length} elements`)\n    }\n\n    switch (p.type) {\n      case c.PARENT.TAG:\n        this._push(\n          this.createTag(p.ref[0], p.ref[1])\n        )\n        break\n      case c.PARENT.BYTE_STRING:\n        this._push(this.createByteString(p.ref, p.length))\n        break\n      case c.PARENT.UTF8_STRING:\n        this._push(this.createUtf8String(p.ref, p.length))\n        break\n      case c.PARENT.MAP:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map')\n        }\n        this._push(this.createMap(p.ref, p.length))\n        break\n      case c.PARENT.OBJECT:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map')\n        }\n        this._push(this.createObject(p.ref, p.length))\n        break\n      case c.PARENT.ARRAY:\n        this._push(this.createArray(p.ref, p.length))\n        break\n      default:\n        break\n    }\n\n    if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {\n      this._dec()\n    }\n  }\n\n  // Reduce the expected length of the current parent by one\n  _dec () {\n    const p = this._currentParent\n    // The current parent does not know the epxected child length\n\n    if (p.length < 0) {\n      return\n    }\n\n    p.length--\n\n    // All children were seen, we can close the current parent\n    if (p.length === 0) {\n      this._closeParent()\n    }\n  }\n\n  // Push any value to the current parent\n  _push (val, hasChildren) {\n    const p = this._currentParent\n    p.values++\n\n    switch (p.type) {\n      case c.PARENT.ARRAY:\n      case c.PARENT.BYTE_STRING:\n      case c.PARENT.UTF8_STRING:\n        if (p.length > -1) {\n          this._ref[this._ref.length - p.length] = val\n        } else {\n          this._ref.push(val)\n        }\n        this._dec()\n        break\n      case c.PARENT.OBJECT:\n        if (p.tmpKey != null) {\n          this._ref[p.tmpKey] = val\n          p.tmpKey = null\n          this._dec()\n        } else {\n          p.tmpKey = val\n\n          if (typeof p.tmpKey !== 'string') {\n            // too bad, convert to a Map\n            p.type = c.PARENT.MAP\n            p.ref = utils.buildMap(p.ref)\n          }\n        }\n        break\n      case c.PARENT.MAP:\n        if (p.tmpKey != null) {\n          this._ref.set(p.tmpKey, val)\n          p.tmpKey = null\n          this._dec()\n        } else {\n          p.tmpKey = val\n        }\n        break\n      case c.PARENT.TAG:\n        this._ref.push(val)\n        if (!hasChildren) {\n          this._dec()\n        }\n        break\n      default:\n        throw new Error('Unknown parent type')\n    }\n  }\n\n  // Create a new parent in the parents list\n  _createParent (obj, type, len) {\n    this._parents[this._depth] = {\n      type: type,\n      length: len,\n      ref: obj,\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  // Reset all state back to the beginning, also used for initiatlization\n  _reset () {\n    this._res = []\n    this._parents = [{\n      type: c.PARENT.ARRAY,\n      length: -1,\n      ref: this._res,\n      values: 0,\n      tmpKey: null\n    }]\n  }\n\n  // -- Interface to customize deoding behaviour\n  createTag (tagNumber, value) {\n    const typ = this._knownTags[tagNumber]\n\n    if (!typ) {\n      return new Tagged(tagNumber, value)\n    }\n\n    return typ(value)\n  }\n\n  createMap (obj, len) {\n    return obj\n  }\n\n  createObject (obj, len) {\n    return obj\n  }\n\n  createArray (arr, len) {\n    return arr\n  }\n\n  createByteString (raw, len) {\n    return Buffer.concat(raw)\n  }\n\n  createByteStringFromHeap (start, end) {\n    if (start === end) {\n      return Buffer.alloc(0)\n    }\n\n    return Buffer.from(this._heap.slice(start, end))\n  }\n\n  createInt (val) {\n    return val\n  }\n\n  createInt32 (f, g) {\n    return utils.buildInt32(f, g)\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return utils.buildInt64(f1, f2, g1, g2)\n  }\n\n  createFloat (val) {\n    return val\n  }\n\n  createFloatSingle (a, b, c, d) {\n    return ieee754.read([a, b, c, d], 0, false, 23, 4)\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    return ieee754.read([a, b, c, d, e, f, g, h], 0, false, 52, 8)\n  }\n\n  createInt32Neg (f, g) {\n    return -1 - utils.buildInt32(f, g)\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    const f = utils.buildInt32(f1, f2)\n    const g = utils.buildInt32(g1, g2)\n\n    if (f > c.MAX_SAFE_HIGH) {\n      return c.NEG_ONE.minus(new Bignumber(f).times(c.SHIFT32).plus(g))\n    }\n\n    return -1 - ((f * c.SHIFT32) + g)\n  }\n\n  createTrue () {\n    return true\n  }\n\n  createFalse () {\n    return false\n  }\n\n  createNull () {\n    return null\n  }\n\n  createUndefined () {\n    return undefined\n  }\n\n  createInfinity () {\n    return Infinity\n  }\n\n  createInfinityNeg () {\n    return -Infinity\n  }\n\n  createNaN () {\n    return NaN\n  }\n\n  createNaNNeg () {\n    return -NaN\n  }\n\n  createUtf8String (raw, len) {\n    return raw.join('')\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    if (start === end) {\n      return ''\n    }\n\n    return this._buffer.toString('utf8', start, end)\n  }\n\n  createSimpleUnassigned (val) {\n    return new Simple(val)\n  }\n\n  // -- Interface for decoder.asm.js\n\n  pushInt (val) {\n    this._push(this.createInt(val))\n  }\n\n  pushInt32 (f, g) {\n    this._push(this.createInt32(f, g))\n  }\n\n  pushInt64 (f1, f2, g1, g2) {\n    this._push(this.createInt64(f1, f2, g1, g2))\n  }\n\n  pushFloat (val) {\n    this._push(this.createFloat(val))\n  }\n\n  pushFloatSingle (a, b, c, d) {\n    this._push(this.createFloatSingle(a, b, c, d))\n  }\n\n  pushFloatDouble (a, b, c, d, e, f, g, h) {\n    this._push(this.createFloatDouble(a, b, c, d, e, f, g, h))\n  }\n\n  pushInt32Neg (f, g) {\n    this._push(this.createInt32Neg(f, g))\n  }\n\n  pushInt64Neg (f1, f2, g1, g2) {\n    this._push(this.createInt64Neg(f1, f2, g1, g2))\n  }\n\n  pushTrue () {\n    this._push(this.createTrue())\n  }\n\n  pushFalse () {\n    this._push(this.createFalse())\n  }\n\n  pushNull () {\n    this._push(this.createNull())\n  }\n\n  pushUndefined () {\n    this._push(this.createUndefined())\n  }\n\n  pushInfinity () {\n    this._push(this.createInfinity())\n  }\n\n  pushInfinityNeg () {\n    this._push(this.createInfinityNeg())\n  }\n\n  pushNaN () {\n    this._push(this.createNaN())\n  }\n\n  pushNaNNeg () {\n    this._push(this.createNaNNeg())\n  }\n\n  pushArrayStart () {\n    this._createParent([], c.PARENT.ARRAY, -1)\n  }\n\n  pushArrayStartFixed (len) {\n    this._createArrayStartFixed(len)\n  }\n\n  pushArrayStartFixed32 (len1, len2) {\n    const len = utils.buildInt32(len1, len2)\n    this._createArrayStartFixed(len)\n  }\n\n  pushArrayStartFixed64 (len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4)\n    this._createArrayStartFixed(len)\n  }\n\n  pushObjectStart () {\n    this._createObjectStartFixed(-1)\n  }\n\n  pushObjectStartFixed (len) {\n    this._createObjectStartFixed(len)\n  }\n\n  pushObjectStartFixed32 (len1, len2) {\n    const len = utils.buildInt32(len1, len2)\n    this._createObjectStartFixed(len)\n  }\n\n  pushObjectStartFixed64 (len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4)\n    this._createObjectStartFixed(len)\n  }\n\n  pushByteStringStart () {\n    this._parents[this._depth] = {\n      type: c.PARENT.BYTE_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  pushByteString (start, end) {\n    this._push(this.createByteStringFromHeap(start, end))\n  }\n\n  pushUtf8StringStart () {\n    this._parents[this._depth] = {\n      type: c.PARENT.UTF8_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  pushUtf8String (start, end) {\n    this._push(this.createUtf8StringFromHeap(start, end))\n  }\n\n  pushSimpleUnassigned (val) {\n    this._push(this.createSimpleUnassigned(val))\n  }\n\n  pushTagStart (tag) {\n    this._parents[this._depth] = {\n      type: c.PARENT.TAG,\n      length: 1,\n      ref: [tag]\n    }\n  }\n\n  pushTagStart4 (f, g) {\n    this.pushTagStart(utils.buildInt32(f, g))\n  }\n\n  pushTagStart8 (f1, f2, g1, g2) {\n    this.pushTagStart(utils.buildInt64(f1, f2, g1, g2))\n  }\n\n  pushTagUnassigned (tagNumber) {\n    this._push(this.createTag(tagNumber))\n  }\n\n  pushBreak () {\n    if (this._currentParent.length > -1) {\n      throw new Error('Unexpected break')\n    }\n\n    this._closeParent()\n  }\n\n  _createObjectStartFixed (len) {\n    if (len === 0) {\n      this._push(this.createObject({}))\n      return\n    }\n\n    this._createParent({}, c.PARENT.OBJECT, len)\n  }\n\n  _createArrayStartFixed (len) {\n    if (len === 0) {\n      this._push(this.createArray([]))\n      return\n    }\n\n    this._createParent(new Array(len), c.PARENT.ARRAY, len)\n  }\n\n  _decode (input) {\n    if (input.byteLength === 0) {\n      throw new Error('Input too short')\n    }\n\n    this._reset()\n    this._heap8.set(input)\n    const code = this.parser.parse(input.byteLength)\n\n    if (this._depth > 1) {\n      while (this._currentParent.length === 0) {\n        this._closeParent()\n      }\n      if (this._depth > 1) {\n        throw new Error('Undeterminated nesting')\n      }\n    }\n\n    if (code > 0) {\n      throw new Error('Failed to parse')\n    }\n\n    if (this._res.length === 0) {\n      throw new Error('No valid result')\n    }\n  }\n\n  // -- Public Interface\n\n  decodeFirst (input) {\n    this._decode(input)\n\n    return this._res[0]\n  }\n\n  decodeAll (input) {\n    this._decode(input)\n\n    return this._res\n  }\n\n  /**\n   * Decode the first cbor object.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {*}\n   */\n  static decode (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Decoder({ size: input.length })\n    return dec.decodeFirst(input)\n  }\n\n  /**\n   * Decode all cbor objects.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {Array<*>}\n   */\n  static decodeAll (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Decoder({ size: input.length })\n    return dec.decodeAll(input)\n  }\n}\n\nDecoder.decodeFirst = Decoder.decode\n\nmodule.exports = Decoder\n","'use strict'\n\nconst constants = require('./constants')\nconst MT = constants.MT\nconst SIMPLE = constants.SIMPLE\nconst SYMS = constants.SYMS\n\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  constructor (value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + (typeof value))\n    }\n    if ((value < 0) || (value > 255) || ((value | 0) !== value)) {\n      throw new Error('value must be a small positive integer: ' + value)\n    }\n    this.value = value\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  toString () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  inspect () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT)\n  }\n\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {bool} - is it Simple?\n   */\n  static isSimple (obj) {\n    return obj instanceof Simple\n  }\n\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {Number} val - the CBOR additional info to convert\n   * @param {bool} hasParent - Does the CBOR item have a parent?\n   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\n   */\n  static decode (val, hasParent) {\n    if (hasParent == null) {\n      hasParent = true\n    }\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false\n      case SIMPLE.TRUE:\n        return true\n      case SIMPLE.NULL:\n        if (hasParent) {\n          return null\n        } else {\n          return SYMS.NULL\n        }\n      case SIMPLE.UNDEFINED:\n        if (hasParent) {\n          return undefined\n        } else {\n          return SYMS.UNDEFINED\n        }\n      case -1:\n        if (!hasParent) {\n          throw new Error('Invalid BREAK')\n        }\n        return SYMS.BREAK\n      default:\n        return new Simple(val)\n    }\n  }\n}\n\nmodule.exports = Simple\n","'use strict'\n\n/**\n * A CBOR tagged item, where the tag does not have semantics specified at the\n * moment, or those semantics threw an error during parsing. Typically this will\n * be an extension point you're not yet expecting.\n */\nclass Tagged {\n  /**\n   * Creates an instance of Tagged.\n   *\n   * @param {Number} tag - the number of the tag\n   * @param {any} value - the value inside the tag\n   * @param {Error} err - the error that was thrown parsing the tag, or null\n   */\n  constructor (tag, value, err) {\n    this.tag = tag\n    this.value = value\n    this.err = err\n    if (typeof this.tag !== 'number') {\n      throw new Error('Invalid tag type (' + (typeof this.tag) + ')')\n    }\n    if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {\n      throw new Error('Tag must be a positive integer: ' + this.tag)\n    }\n  }\n\n  /**\n   * Convert to a String\n   *\n   * @returns {String} string of the form '1(2)'\n   */\n  toString () {\n    return `${this.tag}(${JSON.stringify(this.value)})`\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    gen._pushTag(this.tag)\n    return gen.pushAny(this.value)\n  }\n\n  /**\n   * If we have a converter for this type, do the conversion.  Some converters\n   * are built-in.  Additional ones can be passed in.  If you want to remove\n   * a built-in converter, pass a converter in whose value is 'null' instead\n   * of a function.\n   *\n   * @param {Object} converters - keys in the object are a tag number, the value\n   *   is a function that takes the decoded CBOR and returns a JavaScript value\n   *   of the appropriate type.  Throw an exception in the function on errors.\n   * @returns {any} - the converted item\n   */\n  convert (converters) {\n    var er, f\n    f = converters != null ? converters[this.tag] : undefined\n    if (typeof f !== 'function') {\n      f = Tagged['_tag' + this.tag]\n      if (typeof f !== 'function') {\n        return this\n      }\n    }\n    try {\n      return f.call(Tagged, this.value)\n    } catch (error) {\n      er = error\n      this.err = er\n      return this\n    }\n  }\n}\n\nmodule.exports = Tagged\n","'use strict';\n\nconst {\n  URLWithLegacySupport,\n  format,\n  URLSearchParams,\n  defaultBase\n} = require('./src/url');\n\nconst relative = require('./src/relative');\n\nmodule.exports = {\n  URL: URLWithLegacySupport,\n  URLSearchParams,\n  format,\n  relative,\n  defaultBase\n};","'use strict';\n\nconst defaultBase = self.location ? self.location.protocol + '//' + self.location.host : '';\nconst URL = self.URL;\n\nclass URLWithLegacySupport {\n  constructor(url = '', base = defaultBase) {\n    this.super = new URL(url, base);\n    this.path = this.pathname + this.search;\n    this.auth = this.username && this.password ? this.username + ':' + this.password : null;\n    this.query = this.search && this.search.startsWith('?') ? this.search.slice(1) : null;\n  }\n\n  get hash() {\n    return this.super.hash;\n  }\n\n  get host() {\n    return this.super.host;\n  }\n\n  get hostname() {\n    return this.super.hostname;\n  }\n\n  get href() {\n    return this.super.href;\n  }\n\n  get origin() {\n    return this.super.origin;\n  }\n\n  get password() {\n    return this.super.password;\n  }\n\n  get pathname() {\n    return this.super.pathname;\n  }\n\n  get port() {\n    return this.super.port;\n  }\n\n  get protocol() {\n    return this.super.protocol;\n  }\n\n  get search() {\n    return this.super.search;\n  }\n\n  get searchParams() {\n    return this.super.searchParams;\n  }\n\n  get username() {\n    return this.super.username;\n  }\n\n  set hash(hash) {\n    this.super.hash = hash;\n  }\n\n  set host(host) {\n    this.super.host = host;\n  }\n\n  set hostname(hostname) {\n    this.super.hostname = hostname;\n  }\n\n  set href(href) {\n    this.super.href = href;\n  }\n\n  set origin(origin) {\n    this.super.origin = origin;\n  }\n\n  set password(password) {\n    this.super.password = password;\n  }\n\n  set pathname(pathname) {\n    this.super.pathname = pathname;\n  }\n\n  set port(port) {\n    this.super.port = port;\n  }\n\n  set protocol(protocol) {\n    this.super.protocol = protocol;\n  }\n\n  set search(search) {\n    this.super.search = search;\n  }\n\n  set searchParams(searchParams) {\n    this.super.searchParams = searchParams;\n  }\n\n  set username(username) {\n    this.super.username = username;\n  }\n\n  createObjectURL(o) {\n    return this.super.createObjectURL(o);\n  }\n\n  revokeObjectURL(o) {\n    this.super.revokeObjectURL(o);\n  }\n\n  toJSON() {\n    return this.super.toJSON();\n  }\n\n  toString() {\n    return this.super.toString();\n  }\n\n  format() {\n    return this.toString();\n  }\n\n}\n\nfunction format(obj) {\n  if (typeof obj === 'string') {\n    const url = new URL(obj);\n    return url.toString();\n  }\n\n  if (!(obj instanceof URL)) {\n    const userPass = obj.username && obj.password ? \"\".concat(obj.username, \":\").concat(obj.password, \"@\") : '';\n    const auth = obj.auth ? obj.auth + '@' : '';\n    const port = obj.port ? ':' + obj.port : '';\n    const protocol = obj.protocol ? obj.protocol + '//' : '';\n    const host = obj.host || '';\n    const hostname = obj.hostname || '';\n    const search = obj.search || (obj.query ? '?' + obj.query : '');\n    const hash = obj.hash || '';\n    const pathname = obj.pathname || '';\n    const path = obj.path || pathname + search;\n    return \"\".concat(protocol).concat(userPass || auth).concat(host || hostname + port).concat(path).concat(hash);\n  }\n}\n\nmodule.exports = {\n  URLWithLegacySupport,\n  URLSearchParams: self.URLSearchParams,\n  defaultBase,\n  format\n};","'use strict'\n\n// exports.Commented = require('./commented')\nexports.Diagnose = require('./diagnose')\nexports.Decoder = require('./decoder')\nexports.Encoder = require('./encoder')\nexports.Simple = require('./simple')\nexports.Tagged = require('./tagged')\n\n// exports.comment = exports.Commented.comment\nexports.decodeAll = exports.Decoder.decodeAll\nexports.decodeFirst = exports.Decoder.decodeFirst\nexports.diagnose = exports.Diagnose.diagnose\nexports.encode = exports.Encoder.encode\nexports.decode = exports.Decoder.decode\n\nexports.leveldb = {\n  decode: exports.Decoder.decodeAll,\n  encode: exports.Encoder.encode,\n  buffer: true,\n  name: 'cbor'\n}\n","'use strict'\n\nconst { Buffer } = require('buffer')\nconst Decoder = require('./decoder')\nconst utils = require('./utils')\n\n/**\n * Output the diagnostic format from a stream of CBOR bytes.\n *\n */\nclass Diagnose extends Decoder {\n  createTag (tagNumber, value) {\n    return `${tagNumber}(${value})`\n  }\n\n  createInt (val) {\n    return super.createInt(val).toString()\n  }\n\n  createInt32 (f, g) {\n    return super.createInt32(f, g).toString()\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return super.createInt64(f1, f2, g1, g2).toString()\n  }\n\n  createInt32Neg (f, g) {\n    return super.createInt32Neg(f, g).toString()\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    return super.createInt64Neg(f1, f2, g1, g2).toString()\n  }\n\n  createTrue () {\n    return 'true'\n  }\n\n  createFalse () {\n    return 'false'\n  }\n\n  createFloat (val) {\n    const fl = super.createFloat(val)\n    if (utils.isNegativeZero(val)) {\n      return '-0_1'\n    }\n\n    return `${fl}_1`\n  }\n\n  createFloatSingle (a, b, c, d) {\n    const fl = super.createFloatSingle(a, b, c, d)\n    return `${fl}_2`\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h)\n    return `${fl}_3`\n  }\n\n  createByteString (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n    return `h'${val}`\n  }\n\n  createByteStringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createByteStringFromHeap(start, end)\n    )).toString('hex')\n\n    return `h'${val}'`\n  }\n\n  createInfinity () {\n    return 'Infinity_1'\n  }\n\n  createInfinityNeg () {\n    return '-Infinity_1'\n  }\n\n  createNaN () {\n    return 'NaN_1'\n  }\n\n  createNaNNeg () {\n    return '-NaN_1'\n  }\n\n  createNull () {\n    return 'null'\n  }\n\n  createUndefined () {\n    return 'undefined'\n  }\n\n  createSimpleUnassigned (val) {\n    return `simple(${val})`\n  }\n\n  createArray (arr, len) {\n    const val = super.createArray(arr, len)\n\n    if (len === -1) {\n      // indefinite\n      return `[_ ${val.join(', ')}]`\n    }\n\n    return `[${val.join(', ')}]`\n  }\n\n  createMap (map, len) {\n    const val = super.createMap(map)\n    const list = Array.from(val.keys())\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${list}}`\n    }\n\n    return `{${list}}`\n  }\n\n  createObject (obj, len) {\n    const val = super.createObject(obj)\n    const map = Object.keys(val)\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${map}}`\n    }\n\n    return `{${map}}`\n  }\n\n  createUtf8String (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n\n    return `\"${val}\"`\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createUtf8StringFromHeap(start, end)\n    )).toString('utf8')\n\n    return `\"${val}\"`\n  }\n\n  static diagnose (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Diagnose()\n    return dec.decodeFirst(input)\n  }\n}\n\nmodule.exports = Diagnose\n\nfunction collectObject (val) {\n  return (acc, key) => {\n    if (acc) {\n      return `${acc}, ${key}: ${val[key]}`\n    }\n    return `${key}: ${val[key]}`\n  }\n}\n","'use strict';\n\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n} // Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\n\n\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\n\nfunction getLens(b64) {\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  } // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n\n\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n  return [validLen, placeHoldersLen];\n} // base64 is 4/3 + up to two characters of the original data\n\n\nfunction byteLength(b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction toByteArray(b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars\n\n  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n  var i;\n\n  for (i = 0; i < len; i += 4) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = tmp >> 16 & 0xFF;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  return arr;\n}\n\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\n\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n\n  return output.join('');\n}\n\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n  // go through the array every three bytes, we'll deal with trailing stuff later\n\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n  }\n\n  return parts.join('');\n}","\"use strict\";\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};","/* eslint-disable */\n\nmodule.exports = function decodeAsm (stdlib, foreign, buffer) {\n  'use asm'\n\n  // -- Imports\n\n  var heap = new stdlib.Uint8Array(buffer)\n  // var log = foreign.log\n  var pushInt = foreign.pushInt\n  var pushInt32 = foreign.pushInt32\n  var pushInt32Neg = foreign.pushInt32Neg\n  var pushInt64 = foreign.pushInt64\n  var pushInt64Neg = foreign.pushInt64Neg\n  var pushFloat = foreign.pushFloat\n  var pushFloatSingle = foreign.pushFloatSingle\n  var pushFloatDouble = foreign.pushFloatDouble\n  var pushTrue = foreign.pushTrue\n  var pushFalse = foreign.pushFalse\n  var pushUndefined = foreign.pushUndefined\n  var pushNull = foreign.pushNull\n  var pushInfinity = foreign.pushInfinity\n  var pushInfinityNeg = foreign.pushInfinityNeg\n  var pushNaN = foreign.pushNaN\n  var pushNaNNeg = foreign.pushNaNNeg\n\n  var pushArrayStart = foreign.pushArrayStart\n  var pushArrayStartFixed = foreign.pushArrayStartFixed\n  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32\n  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64\n  var pushObjectStart = foreign.pushObjectStart\n  var pushObjectStartFixed = foreign.pushObjectStartFixed\n  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32\n  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64\n\n  var pushByteString = foreign.pushByteString\n  var pushByteStringStart = foreign.pushByteStringStart\n  var pushUtf8String = foreign.pushUtf8String\n  var pushUtf8StringStart = foreign.pushUtf8StringStart\n\n  var pushSimpleUnassigned = foreign.pushSimpleUnassigned\n\n  var pushTagStart = foreign.pushTagStart\n  var pushTagStart4 = foreign.pushTagStart4\n  var pushTagStart8 = foreign.pushTagStart8\n  var pushTagUnassigned = foreign.pushTagUnassigned\n\n  var pushBreak = foreign.pushBreak\n\n  var pow = stdlib.Math.pow\n\n  // -- Constants\n\n\n  // -- Mutable Variables\n\n  var offset = 0\n  var inputLength = 0\n  var code = 0\n\n  // Decode a cbor string represented as Uint8Array\n  // which is allocated on the heap from 0 to inputLength\n  //\n  // input - Int\n  //\n  // Returns Code - Int,\n  // Success = 0\n  // Error > 0\n  function parse (input) {\n    input = input | 0\n\n    offset = 0\n    inputLength = input\n\n    while ((offset | 0) < (inputLength | 0)) {\n      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0\n\n      if ((code | 0) > 0) {\n        break\n      }\n    }\n\n    return code | 0\n  }\n\n  // -- Helper Function\n\n  function checkOffset (n) {\n    n = n | 0\n\n    if ((((offset | 0) + (n | 0)) | 0) < (inputLength | 0)) {\n      return 0\n    }\n\n    return 1\n  }\n\n  function readUInt16 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 8) | heap[(n + 1) | 0]\n    ) | 0\n  }\n\n  function readUInt32 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 24) | (heap[(n + 1) | 0] << 16) | (heap[(n + 2) | 0] << 8) | heap[(n + 3) | 0]\n    ) | 0\n  }\n\n  // -- Initial Byte Handlers\n\n  function INT_P (octet) {\n    octet = octet | 0\n\n    pushInt(octet | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_P_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_P_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushInt(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_P_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_P_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function INT_N (octet) {\n    octet = octet | 0\n\n    pushInt((-1 - ((octet - 32) | 0)) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_N_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(\n      (-1 - (heap[(offset + 1) | 0] | 0)) | 0\n    )\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_N_16 (octet) {\n    octet = octet | 0\n\n    var val = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    val = readUInt16((offset + 1) | 0) | 0\n    pushInt((-1 - (val | 0)) | 0)\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_N_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_N_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function BYTE_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 64) | 0\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BYTE_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushByteStringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UTF8_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 96) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function UTF8_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushUtf8StringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY (octet) {\n    octet = octet | 0\n\n    pushArrayStartFixed((octet - 128) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function ARRAY_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function ARRAY_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function ARRAY_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ARRAY_BREAK (octet) {\n    octet = octet | 0\n\n    pushArrayStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP (octet) {\n    octet = octet | 0\n\n    var step = 0\n\n    step = (octet - 160) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(step | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function MAP_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function MAP_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function MAP_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function MAP_BREAK (octet) {\n    octet = octet | 0\n\n    pushObjectStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function TAG_KNOWN (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_POS (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_NEG (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_FRAC (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_FLOAT (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64_URL (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE16 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_1 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushTagStart(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_2 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushTagStart(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_4 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushTagStart4(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushTagStart8(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9 | 0)\n\n    return 0\n  }\n\n  function SIMPLE_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushSimpleUnassigned(((octet | 0) - 224) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FALSE (octet) {\n    octet = octet | 0\n\n    pushFalse()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_TRUE (octet) {\n    octet = octet | 0\n\n    pushTrue()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_NULL (octet) {\n    octet = octet | 0\n\n    pushNull()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_UNDEFINED (octet) {\n    octet = octet | 0\n\n    pushUndefined()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_BYTE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushSimpleUnassigned(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2)  | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_HALF (octet) {\n    octet = octet | 0\n\n    var f = 0\n    var g = 0\n    var sign = 1.0\n    var exp = 0.0\n    var mant = 0.0\n    var r = 0.0\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    f = heap[(offset + 1) | 0] | 0\n    g = heap[(offset + 2) | 0] | 0\n\n    if ((f | 0) & 0x80) {\n      sign = -1.0\n    }\n\n    exp = +(((f | 0) & 0x7C) >> 2)\n    mant = +((((f | 0) & 0x03) << 8) | g)\n\n    if (+exp == 0.0) {\n      pushFloat(+(\n        (+sign) * +5.9604644775390625e-8 * (+mant)\n      ))\n    } else if (+exp == 31.0) {\n      if (+sign == 1.0) {\n        if (+mant > 0.0) {\n          pushNaN()\n        } else {\n          pushInfinity()\n        }\n      } else {\n        if (+mant > 0.0) {\n          pushNaNNeg()\n        } else {\n          pushInfinityNeg()\n        }\n      }\n    } else {\n      pushFloat(+(\n        +sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)\n      ))\n    }\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_SINGLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushFloatSingle(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_DOUBLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushFloatDouble(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0,\n      heap[(offset + 5) | 0] | 0,\n      heap[(offset + 6) | 0] | 0,\n      heap[(offset + 7) | 0] | 0,\n      heap[(offset + 8) | 0] | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ERROR (octet) {\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BREAK (octet) {\n    octet = octet | 0\n\n    pushBreak()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  // -- Jump Table\n\n  var jumpTable = [\n    // Integer 0x00..0x17 (0..23)\n    INT_P, // 0x00\n    INT_P, // 0x01\n    INT_P, // 0x02\n    INT_P, // 0x03\n    INT_P, // 0x04\n    INT_P, // 0x05\n    INT_P, // 0x06\n    INT_P, // 0x07\n    INT_P, // 0x08\n    INT_P, // 0x09\n    INT_P, // 0x0A\n    INT_P, // 0x0B\n    INT_P, // 0x0C\n    INT_P, // 0x0D\n    INT_P, // 0x0E\n    INT_P, // 0x0F\n    INT_P, // 0x10\n    INT_P, // 0x11\n    INT_P, // 0x12\n    INT_P, // 0x13\n    INT_P, // 0x14\n    INT_P, // 0x15\n    INT_P, // 0x16\n    INT_P, // 0x17\n    // Unsigned integer (one-byte uint8_t follows)\n    UINT_P_8, // 0x18\n    // Unsigned integer (two-byte uint16_t follows)\n    UINT_P_16, // 0x19\n    // Unsigned integer (four-byte uint32_t follows)\n    UINT_P_32, // 0x1a\n    // Unsigned integer (eight-byte uint64_t follows)\n    UINT_P_64, // 0x1b\n    ERROR, // 0x1c\n    ERROR, // 0x1d\n    ERROR, // 0x1e\n    ERROR, // 0x1f\n    // Negative integer -1-0x00..-1-0x17 (-1..-24)\n    INT_N, // 0x20\n    INT_N, // 0x21\n    INT_N, // 0x22\n    INT_N, // 0x23\n    INT_N, // 0x24\n    INT_N, // 0x25\n    INT_N, // 0x26\n    INT_N, // 0x27\n    INT_N, // 0x28\n    INT_N, // 0x29\n    INT_N, // 0x2A\n    INT_N, // 0x2B\n    INT_N, // 0x2C\n    INT_N, // 0x2D\n    INT_N, // 0x2E\n    INT_N, // 0x2F\n    INT_N, // 0x30\n    INT_N, // 0x31\n    INT_N, // 0x32\n    INT_N, // 0x33\n    INT_N, // 0x34\n    INT_N, // 0x35\n    INT_N, // 0x36\n    INT_N, // 0x37\n    // Negative integer -1-n (one-byte uint8_t for n follows)\n    UINT_N_8, // 0x38\n    // Negative integer -1-n (two-byte uint16_t for n follows)\n    UINT_N_16, // 0x39\n    // Negative integer -1-n (four-byte uint32_t for nfollows)\n    UINT_N_32, // 0x3a\n    // Negative integer -1-n (eight-byte uint64_t for n follows)\n    UINT_N_64, // 0x3b\n    ERROR, // 0x3c\n    ERROR, // 0x3d\n    ERROR, // 0x3e\n    ERROR, // 0x3f\n    // byte string (0x00..0x17 bytes follow)\n    BYTE_STRING, // 0x40\n    BYTE_STRING, // 0x41\n    BYTE_STRING, // 0x42\n    BYTE_STRING, // 0x43\n    BYTE_STRING, // 0x44\n    BYTE_STRING, // 0x45\n    BYTE_STRING, // 0x46\n    BYTE_STRING, // 0x47\n    BYTE_STRING, // 0x48\n    BYTE_STRING, // 0x49\n    BYTE_STRING, // 0x4A\n    BYTE_STRING, // 0x4B\n    BYTE_STRING, // 0x4C\n    BYTE_STRING, // 0x4D\n    BYTE_STRING, // 0x4E\n    BYTE_STRING, // 0x4F\n    BYTE_STRING, // 0x50\n    BYTE_STRING, // 0x51\n    BYTE_STRING, // 0x52\n    BYTE_STRING, // 0x53\n    BYTE_STRING, // 0x54\n    BYTE_STRING, // 0x55\n    BYTE_STRING, // 0x56\n    BYTE_STRING, // 0x57\n    // byte string (one-byte uint8_t for n, and then n bytes follow)\n    BYTE_STRING_8, // 0x58\n    // byte string (two-byte uint16_t for n, and then n bytes follow)\n    BYTE_STRING_16, // 0x59\n    // byte string (four-byte uint32_t for n, and then n bytes follow)\n    BYTE_STRING_32, // 0x5a\n    // byte string (eight-byte uint64_t for n, and then n bytes follow)\n    BYTE_STRING_64, // 0x5b\n    ERROR, // 0x5c\n    ERROR, // 0x5d\n    ERROR, // 0x5e\n    // byte string, byte strings follow, terminated by \"break\"\n    BYTE_STRING_BREAK, // 0x5f\n    // UTF-8 string (0x00..0x17 bytes follow)\n    UTF8_STRING, // 0x60\n    UTF8_STRING, // 0x61\n    UTF8_STRING, // 0x62\n    UTF8_STRING, // 0x63\n    UTF8_STRING, // 0x64\n    UTF8_STRING, // 0x65\n    UTF8_STRING, // 0x66\n    UTF8_STRING, // 0x67\n    UTF8_STRING, // 0x68\n    UTF8_STRING, // 0x69\n    UTF8_STRING, // 0x6A\n    UTF8_STRING, // 0x6B\n    UTF8_STRING, // 0x6C\n    UTF8_STRING, // 0x6D\n    UTF8_STRING, // 0x6E\n    UTF8_STRING, // 0x6F\n    UTF8_STRING, // 0x70\n    UTF8_STRING, // 0x71\n    UTF8_STRING, // 0x72\n    UTF8_STRING, // 0x73\n    UTF8_STRING, // 0x74\n    UTF8_STRING, // 0x75\n    UTF8_STRING, // 0x76\n    UTF8_STRING, // 0x77\n    // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)\n    UTF8_STRING_8, // 0x78\n    // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)\n    UTF8_STRING_16, // 0x79\n    // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)\n    UTF8_STRING_32, // 0x7a\n    // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)\n    UTF8_STRING_64, // 0x7b\n    // UTF-8 string, UTF-8 strings follow, terminated by \"break\"\n    ERROR, // 0x7c\n    ERROR, // 0x7d\n    ERROR, // 0x7e\n    UTF8_STRING_BREAK, // 0x7f\n    // array (0x00..0x17 data items follow)\n    ARRAY, // 0x80\n    ARRAY, // 0x81\n    ARRAY, // 0x82\n    ARRAY, // 0x83\n    ARRAY, // 0x84\n    ARRAY, // 0x85\n    ARRAY, // 0x86\n    ARRAY, // 0x87\n    ARRAY, // 0x88\n    ARRAY, // 0x89\n    ARRAY, // 0x8A\n    ARRAY, // 0x8B\n    ARRAY, // 0x8C\n    ARRAY, // 0x8D\n    ARRAY, // 0x8E\n    ARRAY, // 0x8F\n    ARRAY, // 0x90\n    ARRAY, // 0x91\n    ARRAY, // 0x92\n    ARRAY, // 0x93\n    ARRAY, // 0x94\n    ARRAY, // 0x95\n    ARRAY, // 0x96\n    ARRAY, // 0x97\n    // array (one-byte uint8_t fo, and then n data items follow)\n    ARRAY_8, // 0x98\n    // array (two-byte uint16_t for n, and then n data items follow)\n    ARRAY_16, // 0x99\n    // array (four-byte uint32_t for n, and then n data items follow)\n    ARRAY_32, // 0x9a\n    // array (eight-byte uint64_t for n, and then n data items follow)\n    ARRAY_64, // 0x9b\n    // array, data items follow, terminated by \"break\"\n    ERROR, // 0x9c\n    ERROR, // 0x9d\n    ERROR, // 0x9e\n    ARRAY_BREAK, // 0x9f\n    // map (0x00..0x17 pairs of data items follow)\n    MAP, // 0xa0\n    MAP, // 0xa1\n    MAP, // 0xa2\n    MAP, // 0xa3\n    MAP, // 0xa4\n    MAP, // 0xa5\n    MAP, // 0xa6\n    MAP, // 0xa7\n    MAP, // 0xa8\n    MAP, // 0xa9\n    MAP, // 0xaA\n    MAP, // 0xaB\n    MAP, // 0xaC\n    MAP, // 0xaD\n    MAP, // 0xaE\n    MAP, // 0xaF\n    MAP, // 0xb0\n    MAP, // 0xb1\n    MAP, // 0xb2\n    MAP, // 0xb3\n    MAP, // 0xb4\n    MAP, // 0xb5\n    MAP, // 0xb6\n    MAP, // 0xb7\n    // map (one-byte uint8_t for n, and then n pairs of data items follow)\n    MAP_8, // 0xb8\n    // map (two-byte uint16_t for n, and then n pairs of data items follow)\n    MAP_16, // 0xb9\n    // map (four-byte uint32_t for n, and then n pairs of data items follow)\n    MAP_32, // 0xba\n    // map (eight-byte uint64_t for n, and then n pairs of data items follow)\n    MAP_64, // 0xbb\n    ERROR, // 0xbc\n    ERROR, // 0xbd\n    ERROR, // 0xbe\n    // map, pairs of data items follow, terminated by \"break\"\n    MAP_BREAK, // 0xbf\n    // Text-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc0\n    // Epoch-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc1\n    // Positive bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc2\n    // Negative bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc3\n    // Decimal Fraction (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc4\n    // Bigfloat (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc5\n    // (tagged item)\n    TAG_UNASSIGNED, // 0xc6\n    TAG_UNASSIGNED, // 0xc7\n    TAG_UNASSIGNED, // 0xc8\n    TAG_UNASSIGNED, // 0xc9\n    TAG_UNASSIGNED, // 0xca\n    TAG_UNASSIGNED, // 0xcb\n    TAG_UNASSIGNED, // 0xcc\n    TAG_UNASSIGNED, // 0xcd\n    TAG_UNASSIGNED, // 0xce\n    TAG_UNASSIGNED, // 0xcf\n    TAG_UNASSIGNED, // 0xd0\n    TAG_UNASSIGNED, // 0xd1\n    TAG_UNASSIGNED, // 0xd2\n    TAG_UNASSIGNED, // 0xd3\n    TAG_UNASSIGNED, // 0xd4\n    // Expected Conversion (data item follows; see Section 2.4.4.2)\n    TAG_UNASSIGNED, // 0xd5\n    TAG_UNASSIGNED, // 0xd6\n    TAG_UNASSIGNED, // 0xd7\n    // (more tagged items, 1/2/4/8 bytes and then a data item follow)\n    TAG_MORE_1, // 0xd8\n    TAG_MORE_2, // 0xd9\n    TAG_MORE_4, // 0xda\n    TAG_MORE_8, // 0xdb\n    ERROR, // 0xdc\n    ERROR, // 0xdd\n    ERROR, // 0xde\n    ERROR, // 0xdf\n    // (simple value)\n    SIMPLE_UNASSIGNED, // 0xe0\n    SIMPLE_UNASSIGNED, // 0xe1\n    SIMPLE_UNASSIGNED, // 0xe2\n    SIMPLE_UNASSIGNED, // 0xe3\n    SIMPLE_UNASSIGNED, // 0xe4\n    SIMPLE_UNASSIGNED, // 0xe5\n    SIMPLE_UNASSIGNED, // 0xe6\n    SIMPLE_UNASSIGNED, // 0xe7\n    SIMPLE_UNASSIGNED, // 0xe8\n    SIMPLE_UNASSIGNED, // 0xe9\n    SIMPLE_UNASSIGNED, // 0xea\n    SIMPLE_UNASSIGNED, // 0xeb\n    SIMPLE_UNASSIGNED, // 0xec\n    SIMPLE_UNASSIGNED, // 0xed\n    SIMPLE_UNASSIGNED, // 0xee\n    SIMPLE_UNASSIGNED, // 0xef\n    SIMPLE_UNASSIGNED, // 0xf0\n    SIMPLE_UNASSIGNED, // 0xf1\n    SIMPLE_UNASSIGNED, // 0xf2\n    SIMPLE_UNASSIGNED, // 0xf3\n    // False\n    SIMPLE_FALSE, // 0xf4\n    // True\n    SIMPLE_TRUE, // 0xf5\n    // Null\n    SIMPLE_NULL, // 0xf6\n    // Undefined\n    SIMPLE_UNDEFINED, // 0xf7\n    // (simple value, one byte follows)\n    SIMPLE_BYTE, // 0xf8\n    // Half-Precision Float (two-byte IEEE 754)\n    SIMPLE_FLOAT_HALF, // 0xf9\n    // Single-Precision Float (four-byte IEEE 754)\n    SIMPLE_FLOAT_SINGLE, // 0xfa\n    // Double-Precision Float (eight-byte IEEE 754)\n    SIMPLE_FLOAT_DOUBLE, // 0xfb\n    ERROR, // 0xfc\n    ERROR, // 0xfd\n    ERROR, // 0xfe\n    // \"break\" stop code\n    BREAK // 0xff\n  ]\n\n  // --\n\n  return {\n    parse: parse\n  }\n}\n","'use strict';\n\nconst {\n  URLWithLegacySupport,\n  format\n} = require('./url');\n\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n  let protocol = location.protocol ? location.protocol.replace(':', '') : 'http'; // Check protocol map\n\n  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';\n  let urlParsed;\n\n  try {\n    urlParsed = new URLWithLegacySupport(url);\n  } catch (err) {\n    urlParsed = {};\n  }\n\n  const base = Object.assign({}, location, {\n    protocol: protocol || urlParsed.protocol,\n    host: location.host || urlParsed.host\n  });\n  return new URLWithLegacySupport(url, format(base)).toString();\n};","'use strict'\n\nconst { Buffer } = require('buffer')\nconst { URL } = require('iso-url')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst utils = require('./utils')\nconst constants = require('./constants')\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SHIFT32 = constants.SHIFT32\nconst SYMS = constants.SYMS\nconst TAG = constants.TAG\nconst HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO\nconst FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR\nconst DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT\nconst TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE\nconst FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE\nconst UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED\nconst NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL\n\nconst MAXINT_BN = new Bignumber('0x20000000000000')\nconst BUF_NAN = Buffer.from('f97e00', 'hex')\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex')\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex')\n\nfunction toType (obj) {\n  // [object Type]\n  // --------8---1\n  return ({}).toString.call(obj).slice(8, -1)\n}\n\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\nclass Encoder {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  constructor (options) {\n    options = options || {}\n\n    this.streaming = typeof options.stream === 'function'\n    this.onData = options.stream\n\n    this.semanticTypes = [\n      [URL, this._pushUrl],\n      [Bignumber, this._pushBigNumber]\n    ]\n\n    const addTypes = options.genTypes || []\n    const len = addTypes.length\n    for (let i = 0; i < len; i++) {\n      this.addSemanticType(\n        addTypes[i][0],\n        addTypes[i][1]\n      )\n    }\n\n    this._reset()\n  }\n\n  addSemanticType (type, fun) {\n    const len = this.semanticTypes.length\n    for (let i = 0; i < len; i++) {\n      const typ = this.semanticTypes[i][0]\n      if (typ === type) {\n        const old = this.semanticTypes[i][1]\n        this.semanticTypes[i][1] = fun\n        return old\n      }\n    }\n    this.semanticTypes.push([type, fun])\n    return null\n  }\n\n  push (val) {\n    if (!val) {\n      return true\n    }\n\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = 0\n    this.resultLength[this.offset] = val.length\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  pushWrite (val, method, len) {\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = method\n    this.resultLength[this.offset] = len\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  _pushUInt8 (val) {\n    return this.pushWrite(val, 1, 1)\n  }\n\n  _pushUInt16BE (val) {\n    return this.pushWrite(val, 2, 2)\n  }\n\n  _pushUInt32BE (val) {\n    return this.pushWrite(val, 3, 4)\n  }\n\n  _pushDoubleBE (val) {\n    return this.pushWrite(val, 4, 8)\n  }\n\n  _pushNaN () {\n    return this.push(BUF_NAN)\n  }\n\n  _pushInfinity (obj) {\n    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS\n    return this.push(half)\n  }\n\n  _pushFloat (obj) {\n    const b2 = Buffer.allocUnsafe(2)\n\n    if (utils.writeHalf(b2, obj)) {\n      if (utils.parseHalf(b2) === obj) {\n        return this._pushUInt8(HALF) && this.push(b2)\n      }\n    }\n\n    const b4 = Buffer.allocUnsafe(4)\n    b4.writeFloatBE(obj, 0)\n    if (b4.readFloatBE(0) === obj) {\n      return this._pushUInt8(FLOAT) && this.push(b4)\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)\n  }\n\n  _pushInt (obj, mt, orig) {\n    const m = mt << 5\n    if (obj < 24) {\n      return this._pushUInt8(m | obj)\n    }\n\n    if (obj <= 0xff) {\n      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)\n    }\n\n    if (obj <= 0xffff) {\n      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)\n    }\n\n    if (obj <= 0xffffffff) {\n      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)\n    }\n\n    if (obj <= Number.MAX_SAFE_INTEGER) {\n      return this._pushUInt8(m | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&\n        this._pushUInt32BE(obj % SHIFT32)\n    }\n\n    if (mt === MT.NEG_INT) {\n      return this._pushFloat(orig)\n    }\n\n    return this._pushFloat(obj)\n  }\n\n  _pushIntNum (obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj)\n    } else {\n      return this._pushInt(obj, MT.POS_INT)\n    }\n  }\n\n  _pushNumber (obj) {\n    switch (false) {\n      case (obj === obj): // eslint-disable-line\n        return this._pushNaN(obj)\n      case isFinite(obj):\n        return this._pushInfinity(obj)\n      case ((obj % 1) !== 0):\n        return this._pushIntNum(obj)\n      default:\n        return this._pushFloat(obj)\n    }\n  }\n\n  _pushString (obj) {\n    const len = Buffer.byteLength(obj, 'utf8')\n    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len)\n  }\n\n  _pushBoolean (obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE)\n  }\n\n  _pushUndefined (obj) {\n    return this._pushUInt8(UNDEFINED)\n  }\n\n  _pushArray (gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushTag (tag) {\n    return this._pushInt(tag, MT.TAG)\n  }\n\n  _pushDate (gen, obj) {\n    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n    // still allowed to encode fractions of seconds which can be achieved by\n    // changing overwriting the encode function for Date objects.\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000))\n  }\n\n  _pushBuffer (gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)\n  }\n\n  _pushNoFilter (gen, obj) {\n    return gen._pushBuffer(gen, obj.slice())\n  }\n\n  _pushRegexp (gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)\n  }\n\n  _pushSet (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUrl (gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())\n  }\n\n  _pushBigint (obj) {\n    let tag = TAG.POS_BIGINT\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1)\n      tag = TAG.NEG_BIGINT\n    }\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  _pushBigNumber (gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN()\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj)\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&\n      gen._pushInt(2, MT.ARRAY))) {\n      return false\n    }\n\n    const dec = obj.decimalPlaces()\n    const slide = obj.multipliedBy(new Bignumber(10).pow(dec))\n    if (!gen._pushIntNum(-dec)) {\n      return false\n    }\n    if (slide.abs().isLessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber())\n    } else {\n      return gen._pushBigint(slide)\n    }\n  }\n\n  _pushMap (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      obj.size,\n      Array.from(obj)\n    )\n  }\n\n  _pushObject (obj) {\n    if (!obj) {\n      return this._pushUInt8(NULL)\n    }\n\n    var len = this.semanticTypes.length\n    for (var i = 0; i < len; i++) {\n      if (obj instanceof this.semanticTypes[i][0]) {\n        return this.semanticTypes[i][1].call(obj, this, obj)\n      }\n    }\n\n    var f = obj.encodeCBOR\n    if (typeof f === 'function') {\n      return f.call(obj, this)\n    }\n\n    var keys = Object.keys(obj)\n    var keyLength = keys.length\n    if (!this._pushInt(keyLength, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      keyLength,\n      keys.map((k) => [k, obj[k]])\n    )\n  }\n\n  _pushRawMap (len, map) {\n    // Sort keys for canoncialization\n    // 1. encode key\n    // 2. shorter key comes before longer key\n    // 3. same length keys are sorted with lower\n    //    byte value before higher\n\n    map = map.map(function (a) {\n      a[0] = Encoder.encode(a[0])\n      return a\n    }).sort(utils.keySorter)\n\n    for (var j = 0; j < len; j++) {\n      if (!this.push(map[j][0])) {\n        return false\n      }\n\n      if (!this.pushAny(map[j][1])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Alias for `.pushAny`\n   *\n   * @param {*} obj\n   * @returns {boolean} true on success\n   */\n  write (obj) {\n    return this.pushAny(obj)\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny (obj) {\n    var typ = toType(obj)\n\n    switch (typ) {\n      case 'Number':\n        return this._pushNumber(obj)\n      case 'String':\n        return this._pushString(obj)\n      case 'Boolean':\n        return this._pushBoolean(obj)\n      case 'Object':\n        return this._pushObject(obj)\n      case 'Array':\n        return this._pushArray(this, obj)\n      case 'Uint8Array':\n        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj))\n      case 'Null':\n        return this._pushUInt8(NULL)\n      case 'Undefined':\n        return this._pushUndefined(obj)\n      case 'Map':\n        return this._pushMap(this, obj)\n      case 'Set':\n        return this._pushSet(this, obj)\n      case 'URL':\n        return this._pushUrl(this, obj)\n      case 'BigNumber':\n        return this._pushBigNumber(this, obj)\n      case 'Date':\n        return this._pushDate(this, obj)\n      case 'RegExp':\n        return this._pushRegexp(this, obj)\n      case 'Symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushObject(null)\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(undefined)\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString())\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''))\n    }\n  }\n\n  finalize () {\n    if (this.offset === 0) {\n      return null\n    }\n\n    var result = this.result\n    var resultLength = this.resultLength\n    var resultMethod = this.resultMethod\n    var offset = this.offset\n\n    // Determine the size of the buffer\n    var size = 0\n    var i = 0\n\n    for (; i < offset; i++) {\n      size += resultLength[i]\n    }\n\n    var res = Buffer.allocUnsafe(size)\n    var index = 0\n    var length = 0\n\n    // Write the content into the result buffer\n    for (i = 0; i < offset; i++) {\n      length = resultLength[i]\n\n      switch (resultMethod[i]) {\n        case 0:\n          result[i].copy(res, index)\n          break\n        case 1:\n          res.writeUInt8(result[i], index, true)\n          break\n        case 2:\n          res.writeUInt16BE(result[i], index, true)\n          break\n        case 3:\n          res.writeUInt32BE(result[i], index, true)\n          break\n        case 4:\n          res.writeDoubleBE(result[i], index, true)\n          break\n        case 5:\n          res.write(result[i], index, length, 'utf8')\n          break\n        default:\n          throw new Error('unkown method')\n      }\n\n      index += length\n    }\n\n    var tmp = res\n\n    this._reset()\n\n    return tmp\n  }\n\n  _reset () {\n    this.result = []\n    this.resultMethod = []\n    this.resultLength = []\n    this.offset = 0\n  }\n\n  /**\n   * Encode the given value\n   * @param {*} o\n   * @returns {Buffer}\n   */\n  static encode (o) {\n    const enc = new Encoder()\n    const ret = enc.pushAny(o)\n    if (!ret) {\n      throw new Error('Failed to encode input')\n    }\n\n    return enc.finalize()\n  }\n}\n\nmodule.exports = Encoder\n"],"sourceRoot":""}
\ No newline at end of file
diff --git a/node_modules/borc/src/decoder.js b/node_modules/borc/src/decoder.js
index 5100dc3..da3061a 100644
--- a/node_modules/borc/src/decoder.js
+++ b/node_modules/borc/src/decoder.js
@@ -109,7 +109,7 @@ class Decoder {
 
   // Finish the current parent
   _closeParent () {
-    var p = this._parents.pop()
+    const p = this._parents.pop()
 
     if (p.length > 0) {
       throw new Error(`Missing ${p.length} elements`)
diff --git a/node_modules/borc/src/encoder.js b/node_modules/borc/src/encoder.js
index 4b7ef5b..ba6fe83 100644
--- a/node_modules/borc/src/encoder.js
+++ b/node_modules/borc/src/encoder.js
@@ -1,7 +1,6 @@
 'use strict'
 
 const { Buffer } = require('buffer')
-const { URL } = require('iso-url')
 const Bignumber = require('bignumber.js').BigNumber
 
 const utils = require('./utils')
@@ -46,7 +45,6 @@ class Encoder {
     this.onData = options.stream
 
     this.semanticTypes = [
-      [URL, this._pushUrl],
       [Bignumber, this._pushBigNumber]
     ]
 
@@ -240,6 +238,7 @@ class Encoder {
   }
 
   _pushBuffer (gen, obj) {
+      console.log({borc: JSON.stringify(obj)})
     return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)
   }
 
@@ -263,10 +262,6 @@ class Encoder {
     return true
   }
 
-  _pushUrl (gen, obj) {
-    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())
-  }
-
   _pushBigint (obj) {
     let tag = TAG.POS_BIGINT
     if (obj.isNegative()) {
@@ -324,20 +319,20 @@ class Encoder {
       return this._pushUInt8(NULL)
     }
 
-    var len = this.semanticTypes.length
-    for (var i = 0; i < len; i++) {
+    const len = this.semanticTypes.length
+    for (let i = 0; i < len; i++) {
       if (obj instanceof this.semanticTypes[i][0]) {
         return this.semanticTypes[i][1].call(obj, this, obj)
       }
     }
 
-    var f = obj.encodeCBOR
+    const f = obj.encodeCBOR
     if (typeof f === 'function') {
       return f.call(obj, this)
     }
 
-    var keys = Object.keys(obj)
-    var keyLength = keys.length
+    const keys = Object.keys(obj)
+    const keyLength = keys.length
     if (!this._pushInt(keyLength, MT.MAP)) {
       return false
     }
@@ -360,7 +355,7 @@ class Encoder {
       return a
     }).sort(utils.keySorter)
 
-    for (var j = 0; j < len; j++) {
+    for (let j = 0; j < len; j++) {
       if (!this.push(map[j][0])) {
         return false
       }
@@ -390,7 +385,7 @@ class Encoder {
    * @returns {boolean} true on success
    */
   pushAny (obj) {
-    var typ = toType(obj)
+    const typ = toType(obj)
 
     switch (typ) {
       case 'Number':
@@ -413,8 +408,6 @@ class Encoder {
         return this._pushMap(this, obj)
       case 'Set':
         return this._pushSet(this, obj)
-      case 'URL':
-        return this._pushUrl(this, obj)
       case 'BigNumber':
         return this._pushBigNumber(this, obj)
       case 'Date':
@@ -441,22 +434,22 @@ class Encoder {
       return null
     }
 
-    var result = this.result
-    var resultLength = this.resultLength
-    var resultMethod = this.resultMethod
-    var offset = this.offset
+    const result = this.result
+    const resultLength = this.resultLength
+    const resultMethod = this.resultMethod
+    const offset = this.offset
 
     // Determine the size of the buffer
-    var size = 0
-    var i = 0
+    let size = 0
+    let i = 0
 
     for (; i < offset; i++) {
       size += resultLength[i]
     }
 
-    var res = Buffer.allocUnsafe(size)
-    var index = 0
-    var length = 0
+    const res = Buffer.allocUnsafe(size)
+    let index = 0
+    let length = 0
 
     // Write the content into the result buffer
     for (i = 0; i < offset; i++) {
@@ -488,7 +481,7 @@ class Encoder {
       index += length
     }
 
-    var tmp = res
+    const tmp = res
 
     this._reset()
 
@@ -504,6 +497,7 @@ class Encoder {
 
   /**
    * Encode the given value
+   *
    * @param {*} o
    * @returns {Buffer}
    */
diff --git a/node_modules/borc/src/simple.js b/node_modules/borc/src/simple.js
index a8685b7..b806a57 100644
--- a/node_modules/borc/src/simple.js
+++ b/node_modules/borc/src/simple.js
@@ -45,7 +45,7 @@ class Simple {
   /**
    * Push the simple value onto the CBOR stream
    *
-   * @param {cbor.Encoder} gen The generator to push onto
+   * @param {cbor.Encoder} gen - The generator to push onto
    * @returns {number}
    */
   encodeCBOR (gen) {
@@ -68,9 +68,9 @@ class Simple {
    * `null` or `undefined`, so that the value can be passed through a
    * stream in object mode.
    *
-   * @param {Number} val - the CBOR additional info to convert
+   * @param {number} val - the CBOR additional info to convert
    * @param {bool} hasParent - Does the CBOR item have a parent?
-   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value
+   * @returns {(null | undefined | boolean | symbol)} - the decoded value
    */
   static decode (val, hasParent) {
     if (hasParent == null) {
diff --git a/node_modules/borc/src/tagged.js b/node_modules/borc/src/tagged.js
index ba34223..85f9a31 100644
--- a/node_modules/borc/src/tagged.js
+++ b/node_modules/borc/src/tagged.js
@@ -9,7 +9,7 @@ class Tagged {
   /**
    * Creates an instance of Tagged.
    *
-   * @param {Number} tag - the number of the tag
+   * @param {number} tag - the number of the tag
    * @param {any} value - the value inside the tag
    * @param {Error} err - the error that was thrown parsing the tag, or null
    */
@@ -28,7 +28,7 @@ class Tagged {
   /**
    * Convert to a String
    *
-   * @returns {String} string of the form '1(2)'
+   * @returns {string} string of the form '1(2)'
    */
   toString () {
     return `${this.tag}(${JSON.stringify(this.value)})`
@@ -37,7 +37,7 @@ class Tagged {
   /**
    * Push the simple value onto the CBOR stream
    *
-   * @param {cbor.Encoder} gen The generator to push onto
+   * @param {cbor.Encoder} gen - The generator to push onto
    * @returns {number}
    */
   encodeCBOR (gen) {
@@ -52,12 +52,12 @@ class Tagged {
    * of a function.
    *
    * @param {Object} converters - keys in the object are a tag number, the value
-   *   is a function that takes the decoded CBOR and returns a JavaScript value
-   *   of the appropriate type.  Throw an exception in the function on errors.
+   * is a function that takes the decoded CBOR and returns a JavaScript value
+   * of the appropriate type.  Throw an exception in the function on errors.
    * @returns {any} - the converted item
    */
   convert (converters) {
-    var er, f
+    let er, f
     f = converters != null ? converters[this.tag] : undefined
     if (typeof f !== 'function') {
       f = Tagged['_tag' + this.tag]
diff --git a/node_modules/borc/src/utils.js b/node_modules/borc/src/utils.js
index 7219bf1..b19adbd 100644
--- a/node_modules/borc/src/utils.js
+++ b/node_modules/borc/src/utils.js
@@ -9,14 +9,13 @@ const SHIFT16 = constants.SHIFT16
 const MAX_SAFE_HIGH = 0x1fffff
 
 exports.parseHalf = function parseHalf (buf) {
-  var exp, mant, sign
-  sign = buf[0] & 0x80 ? -1 : 1
-  exp = (buf[0] & 0x7C) >> 2
-  mant = ((buf[0] & 0x03) << 8) | buf[1]
+  const sign = buf[0] & 0x80 ? -1 : 1
+  const exp = (buf[0] & 0x7C) >> 2
+  const mant = ((buf[0] & 0x03) << 8) | buf[1]
   if (!exp) {
     return sign * 5.9604644775390625e-8 * mant
   } else if (exp === 0x1f) {
-    return sign * (mant ? 0 / 0 : 2e308)
+    return sign * (mant ? 0 / 0 : 2e308) // eslint-disable-line no-loss-of-precision
   } else {
     return sign * Math.pow(2, exp - 25) * (1024 + mant)
   }
@@ -95,7 +94,7 @@ exports.writeHalf = function writeHalf (buf, half) {
   //   int exp = (u32.u >> 23) & 0xff;
   //   int mant = u32.u & 0x7fffff;
 
-  var s16 = (u >> 16) & 0x8000 // top bit is sign
+  let s16 = (u >> 16) & 0x8000 // top bit is sign
   const exp = (u >> 23) & 0xff // then 5 bits of exponent
   const mant = u & 0x7fffff
 
@@ -138,8 +137,8 @@ exports.writeHalf = function writeHalf (buf, half) {
 }
 
 exports.keySorter = function (a, b) {
-  var lenA = a[0].byteLength
-  var lenB = b[0].byteLength
+  const lenA = a[0].byteLength
+  const lenB = b[0].byteLength
 
   if (lenA > lenB) {
     return 1
