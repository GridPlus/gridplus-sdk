"use strict";(self.webpackChunkgridplus_sdk_docs=self.webpackChunkgridplus_sdk_docs||[]).push([[9671],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=i,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9881:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],s={id:"index",title:"\ud83d\udc4b Getting Started",slug:"/",sidebar_position:0,custom_edit_url:null},l="GridPlus SDK",c={unversionedId:"index",id:"index",title:"\ud83d\udc4b Getting Started",description:"The GridPlus SDK is designed to facilitate communication between an app or service and a user's Lattice1 hardware wallet.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/",permalink:"/gridplus-sdk/",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"index",title:"\ud83d\udc4b Getting Started",slug:"/",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",next:{title:"\ud83d\udd11 Addresses and Public Keys",permalink:"/gridplus-sdk/addresses"}},p={},d=[{value:"Installing",id:"installing",level:2},{value:"Connecting to a Lattice",id:"connecting-to-a-lattice",level:2},{value:"Pairing vs Connecting",id:"pairing-vs-connecting",level:3},{value:"Stashing and Rehydrating an SDK Instance",id:"stashing-and-rehydrating-an-sdk-instance",level:3},{value:"Now What?",id:"now-what",level:2}],u={toc:d};function h(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"gridplus-sdk"},"GridPlus SDK"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/GridPlus/gridplus-sdk"},"GridPlus SDK")," is designed to facilitate communication between an app or service and a user's ",(0,r.kt)("a",{parentName:"p",href:"https://gridplus.io/lattice"},"Lattice1 hardware wallet"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("a",{parentName:"p",href:"https://gridplus.io/lattice"},"Lattice1")," is an Internet-connected device which listens for end-to-end encrypted requests. HTTPS requests originate from this SDK and responses are returned ",(0,r.kt)("strong",{parentName:"p"},"asynchronously"),". Some requests require user authorization and will time out if the user does not approve them."),(0,r.kt)("p",{parentName:"admonition"},"If you are using the ",(0,r.kt)("inlineCode",{parentName:"p"},"gridplus-sdk")," in a Node.js application with a version of Node lower than v18, you will need to patch the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch()")," API in the global scope. One solution is to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"node-fetch")," package. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/node-fetch/node-fetch#installation"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"node-fetch")," README")," for instructions. Other options are available on NPM.")),(0,r.kt)("h2",{id:"installing"},"Installing"),(0,r.kt)("p",null,"First install this SDK with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save gridplus-sdk\n")),(0,r.kt)("h2",{id:"connecting-to-a-lattice"},"Connecting to a Lattice"),(0,r.kt)("p",null,"You first need to instantiate a new ",(0,r.kt)("a",{parentName:"p",href:"./api/classes/client.Client"},(0,r.kt)("inlineCode",{parentName:"a"},"Client"))," object with, at a minimum, the name of your requesting app (see ",(0,r.kt)("a",{parentName:"p",href:"./api/classes/client.Client"},(0,r.kt)("inlineCode",{parentName:"a"},"Client")," doc")," for a full list of options). The ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," used to instantiate ",(0,r.kt)("inlineCode",{parentName:"p"},"Client")," will show up on the desired Lattice when pairing, so you should name it something relevant to your app/service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Client } from 'gridplus-sdk';\n\nconst client = new Client({ name: 'SDK Connectooor' });\n")),(0,r.kt)("p",null,"You can now use your ",(0,r.kt)("inlineCode",{parentName:"p"},"client")," object to connect to a specific Lattice1 device, which should have a unique ",(0,r.kt)("inlineCode",{parentName:"p"},"deviceID"),", discoverable through the client's ",(0,r.kt)("inlineCode",{parentName:"p"},"baseUrl"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Lattices are discoverable over a combination of ",(0,r.kt)("inlineCode",{parentName:"p"},"deviceID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"baseUrl"),". By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"baseUrl")," (an attribute of ",(0,r.kt)("inlineCode",{parentName:"p"},"Client")," and a config option when creating an instance) points to the GridPlus routing cloud service, but you can also create your own endpoint using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/GridPlus/lattice-connect-v2"},"Lattice Connect"),". "),(0,r.kt)("p",{parentName:"admonition"},"When a Lattice connects to a routing service (located at some ",(0,r.kt)("inlineCode",{parentName:"p"},"baseUrl"),") for the first time, that server should generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"deviceID")," for the connecting Lattice. At this point, the Lattice will save the newly issued ",(0,r.kt)("inlineCode",{parentName:"p"},"deviceID")," and will listen for corresponding messages coming from ",(0,r.kt)("inlineCode",{parentName:"p"},"baseUrl")," (these messages are always ",(0,r.kt)("strong",{parentName:"p"},"end-to-end encrypted"),"). The Lattice should be permanently discoverable at this ",(0,r.kt)("inlineCode",{parentName:"p"},"baseUrl"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"deviceID")," combination unless/until its user resets the Lattice Router or switches the device to a new routing service.")),(0,r.kt)("h3",{id:"pairing-vs-connecting"},"Pairing vs Connecting"),(0,r.kt)("p",null,"The connection process depends on whether your app/service is already ",(0,r.kt)("strong",{parentName:"p"},"paired")," to the target Lattice. ",(0,r.kt)("strong",{parentName:"p"},"Pairing")," is a process involving key exchange and ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman"},"ECDH")," shared key generation between the target Lattice and your ",(0,r.kt)("inlineCode",{parentName:"p"},"Client")," instance, such that future messages can be end-to-end encrypted."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"Client")," has a ",(0,r.kt)("inlineCode",{parentName:"p"},"privKey")," attribute (a 32-byte buffer or hex string), which is used to encrypt/decrypt messages. By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"privKey")," is generated randomly, but it is ",(0,r.kt)("strong",{parentName:"p"},"highly recommended")," you generate your own private key deterministically or ",(0,r.kt)("a",{parentName:"p",href:"#stashing-and-rehydrating-an-sdk-instance"},"stash and rehydrate")," the instance if you wish to re-use the app/service with the target Lattice(s). If you naively create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Client")," instance with a random ",(0,r.kt)("inlineCode",{parentName:"p"},"privKey"),", it will force a re-pairing with the target Lattice(s).")),(0,r.kt)("p",null,"If you are ",(0,r.kt)("strong",{parentName:"p"},"not")," paired to the target Lattice already, the connection request will cause the Lattice to generate a new ",(0,r.kt)("strong",{parentName:"p"},"pairing code")," and display that on the device's screen. That code must be entered into the ",(0,r.kt)("inlineCode",{parentName:"p"},"Client")," instance within 60 seconds, i.e. before it expires. This process only happens ",(0,r.kt)("strong",{parentName:"p"},"once per pairing"),", so subsequent ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," requests should reach the target Lattice without having to re-pair. However, any Lattice user may remove any pairing from their device at any time. If this happens, you will need to re-pair with the device in order to make any new requests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Client, Constants, Utils } from 'gridplus-sdk';\nimport { question } from 'readline-sync';\nconst deviceID = 'XXXXXX';\nconst numValidators = 5;\n\n// Instantiate the `Client` object with a name. Here we will use the\n// default `baseUrl`, i.e. GridPlus routing service.\nconst client = new Client({ name: 'SDK Connectooor' });\n\n// Call `connect` to determine if we are already paired\nconst isPaired = await client.connect(deviceID);\n\nif (!isPaired) {\n  // If not paired, the secret needs to get sent to `pair`\n  const secret = await question('Enter pairing secret: ');\n  await client.pair(secret);\n}\n")),(0,r.kt)("h3",{id:"stashing-and-rehydrating-an-sdk-instance"},"Stashing and Rehydrating an SDK Instance"),(0,r.kt)("p",null,"As mentioned above, naively generating new ",(0,r.kt)("inlineCode",{parentName:"p"},"Client")," instances without deterministically generating a ",(0,r.kt)("inlineCode",{parentName:"p"},"privKey")," will require a pairing with target Lattice(s). If you don't want to deterministically generate and set the ",(0,r.kt)("inlineCode",{parentName:"p"},"privKey")," attribute, you can also let ",(0,r.kt)("inlineCode",{parentName:"p"},"Client")," generate a random one and then stash your ",(0,r.kt)("inlineCode",{parentName:"p"},"Client")," instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const clientStash = client.getStateData();\nconst client2 = new Client({ stateData: clientStash, });\n")),(0,r.kt)("h2",{id:"now-what"},"Now What?"),(0,r.kt)("p",null,"Once your ",(0,r.kt)("inlineCode",{parentName:"p"},"client")," is paired or otherwise connected to the target Lattice, you can make full use of the SDK. "),(0,r.kt)("p",null,"Some actions, such as requesting signatures, require ",(0,r.kt)("strong",{parentName:"p"},"user authorization")," on the device or they will time out. Other actions, such as fetching public keys, can be made as long as there is a pairing with the target Lattice."),(0,r.kt)("p",null,"The rest of these docs will cover basic functionality (e.g. ",(0,r.kt)("a",{parentName:"p",href:"./addresses"},"getting addresses")," and ",(0,r.kt)("a",{parentName:"p",href:"./signing"},"making signatures"),") as well as tutorials on more advanced topics, which would typically be built into a UI such as the ",(0,r.kt)("a",{parentName:"p",href:"https://lattice.gridplus.io"},"Lattice Manager")," or an integrated app such as ",(0,r.kt)("a",{parentName:"p",href:"https://metamask.io"},"MetaMask"),"."),(0,r.kt)("p",null,"You can always consult the ",(0,r.kt)("a",{parentName:"p",href:"./api/classes/client.Client"},"API Docs")," for more specific information on options related to various SDK functions."))}h.isMDXComponent=!0}}]);