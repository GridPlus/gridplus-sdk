"use strict";(self.webpackChunkgridplus_sdk_docs=self.webpackChunkgridplus_sdk_docs||[]).push([[854],{9681:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>o});var t=n(4848),i=n(8453);const r={id:"addresses",sidebar_position:2},d="\ud83d\udd11 Addresses and Public Keys",c={id:"addresses",title:"\ud83d\udd11 Addresses and Public Keys",description:"Once your connection is established, you can request a few different addresses and key types from the Lattice.",source:"@site/docs/addresses.md",sourceDirName:".",slug:"/addresses",permalink:"/gridplus-sdk/addresses",draft:!1,unlisted:!1,editUrl:"https://github.com/gridplus/gridplus-sdk/docs/addresses.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"addresses",sidebar_position:2},sidebar:"sidebar",previous:{title:"\ud83d\udc4b Getting Started",permalink:"/gridplus-sdk/"},next:{title:"\ud83e\uddfe Signing Messages",permalink:"/gridplus-sdk/signing"}},a={},o=[{value:"\u039e Ethereum-type addresses",id:"\u03be-ethereum-type-addresses",level:2},{value:"Example: requesting Ethereum addresses",id:"example-requesting-ethereum-addresses",level:3},{value:"\u20bf Bitcoin addresses",id:"-bitcoin-addresses",level:2},{value:"Example: requesting BTC segwit addresses",id:"example-requesting-btc-segwit-addresses",level:3},{value:"\ud83d\udddd\ufe0f Public Keys",id:"\ufe0f-public-keys",level:2},{value:"1\ufe0f\u20e3 <code>secp256k1</code> curve",id:"1\ufe0f\u20e3-secp256k1-curve",level:3},{value:"Example: requesting secp256k1 public key",id:"example-requesting-secp256k1-public-key",level:4},{value:"2\ufe0f\u20e3 <code>ed25519</code> curve",id:"2\ufe0f\u20e3-ed25519-curve",level:3}];function l(e){const s={admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"-addresses-and-public-keys",children:"\ud83d\udd11 Addresses and Public Keys"}),"\n",(0,t.jsx)(s.p,{children:"Once your connection is established, you can request a few different addresses and key types from the Lattice."}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsxs)(s.p,{children:["This section uses the following notation when discussing BIP32 derivation paths: ",(0,t.jsx)(s.code,{children:"[ purpose, coin_type, account, change, address ]"}),". It also uses ",(0,t.jsx)(s.code,{children:"'"}),' to represent a "hardened", index, which is just ',(0,t.jsx)(s.code,{children:"0x80000000 + index"}),"."]})}),"\n",(0,t.jsx)(s.h2,{id:"\u03be-ethereum-type-addresses",children:"\u039e Ethereum-type addresses"}),"\n",(0,t.jsxs)(s.p,{children:["These addresses are 20-byte hex strings prefixed with ",(0,t.jsx)(s.code,{children:"0x"}),". Lattice firmware places some restrictions based on derivation path, specifically that the ",(0,t.jsx)(s.code,{children:"coin_type"})," must be supported (Ethereum uses coin type ",(0,t.jsx)(s.code,{children:"60'"}),")."]}),"\n",(0,t.jsxs)(s.p,{children:["In practice, most apps just use the standard Ethereum ",(0,t.jsx)(s.code,{children:"coin_type"})," (",(0,t.jsx)(s.code,{children:"60'"}),") when requesting addresses for other networks, but we do support some others (a vestige of an integration -- you probably won't ever need to use these):"]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.code,{children:"966', 700', 9006', 9005', 1007', 178', 137', 3731', 1010', 61', 108', 40', 889', 1987', 820', 6060', 1620', 1313114', 76', 246529', 246785', 1001', 227', 916', 464', 2221', 344', 73799', 246'"})}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Keep in mind that changing the ",(0,t.jsx)(s.code,{children:"coin_type"})," will change all the requested addresses relative to Ethereum. This is why, in practice, most apps just use the Ethereum path."]}),"\n",(0,t.jsx)(s.h3,{id:"example-requesting-ethereum-addresses",children:"Example: requesting Ethereum addresses"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"const reqData = {\n  startPath: [\n    // Derivation path of the first requested address\n    0x80000000 + 44,\n    0x80000000 + 60,\n    0x80000000,\n    0,\n    0,\n  ],\n  n: 5, // Number of sequential addresses on specified path to return (max 10)\n};\n\nconst addrs = await fetchAddresses(reqData);\n"})}),"\n",(0,t.jsx)(s.h2,{id:"-bitcoin-addresses",children:"\u20bf Bitcoin addresses"}),"\n",(0,t.jsxs)(s.p,{children:["The Lattice can also export Bitcoin formatted addresses. There are three types of addresses that can be fetched and the type is determined by the ",(0,t.jsx)(s.code,{children:"purpose"})," index of the BIP32 derivation path."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["If ",(0,t.jsx)(s.code,{children:"purpose = 44'"}),", ",(0,t.jsx)(s.em,{children:"legacy"})," addresses (beginning with ",(0,t.jsx)(s.code,{children:"1"}),") will be returned"]}),"\n",(0,t.jsxs)(s.li,{children:["If ",(0,t.jsx)(s.code,{children:"purpose = 49'"}),", ",(0,t.jsx)(s.em,{children:"wrapped segwit"})," addresses (beginning with ",(0,t.jsx)(s.code,{children:"3"}),") will be returned"]}),"\n",(0,t.jsxs)(s.li,{children:["If ",(0,t.jsx)(s.code,{children:"purpose = 84'"}),", ",(0,t.jsx)(s.em,{children:"segwit v1"})," addresses (beginning with ",(0,t.jsx)(s.code,{children:"bc1"}),") will be returned"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Keep in mind that ",(0,t.jsx)(s.code,{children:"coin_type"})," ",(0,t.jsx)(s.code,{children:"0'"})," is required when requesting BTC addresses."]}),"\n",(0,t.jsx)(s.h3,{id:"example-requesting-btc-segwit-addresses",children:"Example: requesting BTC segwit addresses"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"const reqData = {\n  // Derivation path of the first requested address\n  startPath: [0x80000000 + 84, 0x80000000, 0x80000000, 0, 0],\n};\n\n// `n` will be set to 10 if not specified -> 10 addresses returned\nconst addr0 = await fetchAddresses(reqData);\n"})}),"\n",(0,t.jsx)(s.h2,{id:"\ufe0f-public-keys",children:"\ud83d\udddd\ufe0f Public Keys"}),"\n",(0,t.jsx)(s.p,{children:"In addition to formatted addresses, the Lattice can return public keys on any supported curve for any BIP32 derivation path."}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsx)(s.p,{children:"Currently the derivation path must be at least 2 indices deep, but this restriction may be removed in the future."})}),"\n",(0,t.jsxs)(s.p,{children:["For requesting public keys it is best to import ",(0,t.jsx)(s.code,{children:"Constants"})," with:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"import { Constants } from 'gridplus-sdk';\n"})}),"\n",(0,t.jsxs)(s.h3,{id:"1\ufe0f\u20e3-secp256k1-curve",children:["1\ufe0f\u20e3 ",(0,t.jsx)(s.code,{children:"secp256k1"})," curve"]}),"\n",(0,t.jsx)(s.p,{children:"Used by Bitcoin, Ethereum, and most blockchains."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Pubkey size: 65 bytes"})}),"\n",(0,t.jsxs)(s.p,{children:["The public key has two 32 byte components and is of format: ",(0,t.jsx)(s.code,{children:"04{X}{Y}"}),", meaning every public key is prefixed with a ",(0,t.jsx)(s.code,{children:"04"})," byte."]}),"\n",(0,t.jsx)(s.h4,{id:"example-requesting-secp256k1-public-key",children:"Example: requesting secp256k1 public key"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"const req = {\n  // Derivation path of the first requested pubkey\n  startPath: [0x80000000 + 44, 0x80000000 + 60, 0x80000000, 0, 0],\n  n: 3,\n  flag: Constants.GET_ADDR_FLAGS.SECP256K1_PUB,\n};\n\nconst pubkeys = await fetchAddresses(req);\n"})}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsxs)(s.p,{children:["Since ",(0,t.jsx)(s.code,{children:"startPath"})," is the same, this example returns public keys which can be converted to Ethereum addresses to yield the same result as the above request to fetch Ethereum addresses."]})}),"\n",(0,t.jsxs)(s.h3,{id:"2\ufe0f\u20e3-ed25519-curve",children:["2\ufe0f\u20e3 ",(0,t.jsx)(s.code,{children:"ed25519"})," curve"]}),"\n",(0,t.jsxs)(s.p,{children:["Used by Solana and a few others. ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.em,{children:"Ed25519 requires all derivation path indices be hardened."})})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Pubkey size: 32 bytes"})}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsxs)(s.p,{children:["Some libraries prefix these keys with a ",(0,t.jsx)(s.code,{children:"00"})," byte (making them 33 bytes), but we do ",(0,t.jsx)(s.strong,{children:"not"})," return keys with this prefix."]})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"const req = {\n  // Derivation path of the first requested pubkey\n  startPath: [0x80000000 + 44, 0x80000000 + 60, 0x80000000],\n  n: 3,\n  flag: Constants.GET_ADDR_FLAGS.ED25519_PUB,\n};\n\nconst pubkeys = await fetchAddresses(req);\n"})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>c});var t=n(6540);const i={},r=t.createContext(i);function d(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);