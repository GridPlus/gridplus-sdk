"use strict";(self.webpackChunkgridplus_sdk_docs=self.webpackChunkgridplus_sdk_docs||[]).push([[1351],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=c(n),f=a,m=l["".concat(p,".").concat(f)]||l[f]||d[f]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=l;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},4358:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={id:"encData",sidebar_position:4},p="\ud83d\udd12 Fetching Encrypted Data",c={unversionedId:"encData",id:"encData",title:"\ud83d\udd12 Fetching Encrypted Data",description:"Firmware v0.17.0 is required to fetch encrypted data.",source:"@site/docs/encData.md",sourceDirName:".",slug:"/encData",permalink:"/gridplus-sdk/encData",draft:!1,editUrl:"https://github.com/gridplus/gridplus-sdk/docs/encData.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"encData",sidebar_position:4},sidebar:"sidebar",previous:{title:"\ud83e\uddfe Signing Transactions and Messages",permalink:"/gridplus-sdk/signing"},next:{title:"\ud83e\uddea Testing",permalink:"/gridplus-sdk/testing"}},u={},d=[{value:"Supported Types of Data",id:"supported-types-of-data",level:2},{value:"BLS Private Keys (EIP2335)",id:"bls-private-keys-eip2335",level:3}],l={toc:d};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"-fetching-encrypted-data"},"\ud83d\udd12 Fetching Encrypted Data"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Firmware v0.17.0 is required to fetch encrypted data.")),(0,o.kt)("p",null,"You can use this SDK to fetch certain pieces of secure data from your Lattice in an encrypted format."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Before you can fetch encrypted data, you need to set an encryption password on your Lattice. You will be asked to do this automatically if you request encrypted data without a password set, but you can always go to ",(0,o.kt)("inlineCode",{parentName:"p"},"System Preferences -> Security & Privacy -> Encryption Password")," to set, delete, or change your device's encryption password.")),(0,o.kt)("p",null,"All requests for encrypted data follow the general format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Constants } from `gridplus-sdk`\n\n// Set of supported schemas\nconst schemas = Constants.ENC_DATA.SCHEMAS;\n\n// Build request data\nconst req = {\n  schema: // Specify which schema to use\n  params: {\n    // Params specific to the type of data being requested\n  }\n}\n\nconst encryptedData = await client.fetchEncryptedData(req);\n")),(0,o.kt)("h2",{id:"supported-types-of-data"},"Supported Types of Data"),(0,o.kt)("p",null,"The following types of data may be requested. You should specify params."),(0,o.kt)("h3",{id:"bls-private-keys-eip2335"},"BLS Private Keys (EIP2335)"),(0,o.kt)("p",null,"You may request an encrypted BLS private key of your Lattice's current wallet by providing the BIP39 derivation path. The data format follows ",(0,o.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-2335"},"EIP-2335"),"."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Currently, the only available schema is ",(0,o.kt)("inlineCode",{parentName:"p"},"BLS_KEYSTORE_EIP2335_PBKDF_V4"),". As implied by the name, keys may only be fetched with kdf ",(0,o.kt)("inlineCode",{parentName:"p"},"pbkdf2")," and returned data is of format V4. See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ChainSafe/bls-keystore"},"this module")," for more info on EIP-2335 data format.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Request data:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const req = {\n  schema: schemas.BLS_KEYSTORE_EIP2335_PBKDF_V4,\n  params: {\n    path: <number[]>, // Up to 5 u32 indices representing BIP39 path\n    c: <number>,      // Optional, number of AES iterations (default=262144)\n  }\n}\n")))}f.isMDXComponent=!0}}]);